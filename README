README for IXIN
See end for copying conditions.

* What is it?

  IXIN is an EXPERIMENTAL distribution of EXPERIMENTAL code and
  some pre-built IXIN files.  IXIN stands for "indexed texinfo".

  All code is under GPLv3+.  All (.xml) docs are under GFDL.

* Who is it for?

  The intended audience is Texinfo hackers and others who wish to
  build on Texinfo, adding to it the capability of producing files
  that are:

  - arbitrarily accessible
  - runtime configurable (e.g., paragraph indentation)

  See also:
  http://mail.gnu.org/archive/html/gnu-system-discuss/
  http://mail.gnu.org/archive/html/help-texinfo/

* What does it do?

  It defines a documentation file format and provides two simple
  tools to write and read, respectively, files in that format.
  The file format definition is described in a document under [[file:spec/][spec/]].

* What does it NOT do?

  This package does not include a program to view documents in the
  new format.  You can do "make demo" to see some of the potential,
  though.

  Even more basic, it does NOT include the Texinfo DTD, which is
  expected under /usr/share (see [[file:c/zomg]] to manually tweak).

* dependencies

  The distribution includes pre-built .sxml and .ixin files, so the
  write tool is not necessary unless you modify the source .xml, in
  which case you will need to install Mixp (http://www.nongnu.org/mixp/)
  (Guile 1.8), or fix a1-nf3-guile2 (Guile 2.x), to proceed.  Of course,
  you need to have one of those Guile versions installed, too.

* groupings

  This is the "current best guess" distribution of XID, VARS, SETTINGS
  (for META divvying).  Corrections solicited!

*** group A: XID

    |---------------------+-----------------|
    | setfile             | string/filename |
    | documentdescription | string/no-LF    |
    |---------------------+-----------------|

*** group B: SETTINGS that should not change

    |--------------------------------+--------------------------|
    | novalidate                     | none                     |
    |--------------------------------+--------------------------|
    | fonttextsize                   | integer: 10 11           |
    | footnotestyle                  | sym: end separate        |
    | pagesizes                      | list of (integer symbol) |
    | setchapternewpage              | sym: off on odd          |
    | setcontentsaftertitlepage      | none                     |
    | setshortcontentsaftertitlepage | none                     |
    |--------------------------------+--------------------------|
    | everyheadingmarks              | sym: top bottom          |
    | evenheadingmarks               | sym: top bottom          |
    | oddheadingmarks                | sym: top bottom          |
    |--------------------------------+--------------------------|
    | everyfootingmarks              | sym: top bottom          |
    | evenfootingmarks               | sym: top bottom          |
    | oddfootingmarks                | sym: top bottom          |
    |--------------------------------+--------------------------|

*** group C: SETTINGS that might change w/ node

    |---------------------------+-------------------------------------------|
    | documentencoding          | sym: US-ASCII UTF-8 koi8-r koi8-u         |
    |                           | ---: ISO-8859-1 ISO-8859-15 ISO-8859-2    |
    |---------------------------+-------------------------------------------|
    | codequoteundirected       | sym: on off (also from @set/@clear)       |
    | codequotebacktick         | sym: on off (also from @set/@clear)       |
    | deftypefnnewline          | sym: on off (also from @set/@clear)       |
    |---------------------------+-------------------------------------------|
    | exampleindent             | sym: asis / integer                       |
    | paragraphindent           | sym: asis / integer                       |
    | firstparagraphindent      | sym: none insert                          |
    |---------------------------+-------------------------------------------|
    | allowcodebreaks           | sym: false true                           |
    | clickstyle                | ??? renderable sequence                   |
    | deftypefnnewli            | sym: on off                               |
    | documentlanguage          | symbol                                    |
    | frenchspacing             | sym: on off                               |
    | headings                  | sym: on off single{,after} double{,after} |
    | kbdinputstyle             | sym: code example distinct                |
    | urefbreakstyle            | sym: after before none                    |
    | xrefautomaticsectiontitle | sym: on off                               |
    |---------------------------+-------------------------------------------|

* possible access patterns

  The retrieve program illustrates one access pattern: read up
  and through the sectioning tree, and then use COUNTS and INDEX
  information to dig out node data on demand.

  Another, more incremental, approach is to read up through COUNTS,
  and then subsequently access index, dts and node data on demand.
  This is supported by design; the file position for the start of
  the node data is the sum of (always including trailing newline):
  - file position after reading COUNTS
  - INDEX-LENGTH
  - S-TREE-LENGTH
  - DTS-LENGTH...
  - FLOSET-LENGTH...

* invoking a1-nf3-{mixp,guile2}

  Usage: a1-nf3-{mixp,guile2} FILENAME

  Display the XML file in "SXML format" to stdout.

  FILENAME should be produced by "makeinfo --xml".

* invoking mkixin

  Usage: mkixin FILENAME...

  For each FILENAME, assumed to be STEM.sxml, create STEM.ixin.

* invoking retrieve

  Usage: retrieve IXIN [COMMAND [ARGS...]]

  IXIN is the name of a file created by mkixin.

  COMMAND (and args) is one of the following:

  - dump
  - dump/abbrev N-BYTES
  - dump-meta
  - dump-counts
  - dump-index
  - list-dts
  - dump-dts [TYPE]
  - dump-s-tree
  - dump-node
  - show-node WHICH
  - show-all-nodes
  - repl END-CODE

  WHICH can be a name, like "Top", or a number, like "0".
  If no COMMAND is specified, it is taken as "dump/abbrev 42",
  which is like ‘dump’, but truncates the node data to 42 bytes.

  For ‘dump-dts’, if TYPE is specified, dump that particular dts.
  Otherwise, dump all dts, each preceded by "dts: TYPE".

  For ‘repl’, END-CODE is a decimal number that specifies the first
  character in the two character sequence used to terminate a response.
  The second char is always newline (aka ‘\n’).  For example, use 12 for
  formfeed (aka, ‘\f’).

  In ‘repl’ mode, retrieve maintains a "current node", initially id 0
  (name "Top"), and loops reading a line from stdin and displaying
  results to stdout.  Valid commands (and args) are:

  - where        -- display current node information
  - nav          -- display next/prev/up links (subset of ‘where’)
  - next         -- move to ‘next’ node, if possible
  - prev         -- move to ‘prev’ node, if possible
  - up           -- move to ‘up’ node, if possible
  - goto WHICH   -- jump directly to node WHICH
  - show [WHICH] -- do ‘show-node’ for WHICH or current node
  - raw [WHICH]  -- do ‘dump-node’ for WHICH or current node
  - dump-meta    -- as from command-line (above)
  - dump-index   -- likewise
  - list-dts     -- likewise
  - dump-dts [TYPE] -- likewise
  - dump-s-tree  -- likewise
  - quit         -- exit immediately

* What needs to be done, still?

  - w/ upstream (Texinfo) hackers:
    - still missing
      - settings
        - detection
        - tracking
      - references
        - external
	  - for HTML anchors and such
	  - via "normalized label"
        - internal
	  - from nodes to indices
	  - via "ix coordinate"
    - image snarfing (* is current choice)
      - how? -- binary, *base64
      - when? -- never, optional, *always
      - where? -- blobs + blobs-index, *inline
    - resolve ‘???’ doubts
  - write ixin.el that uses retrieve repl
  - fix a1-nf3-guile2
  - (depending on viability) clean up impl

* implementation notes

*** generally

    The temp-file interaction code is quick (to write) and dirty.
    Kids, laugh all you want, but don't do this in your own code!

*** mkixin

    The ‘(node ...)’ form is not identical to the input SXML;
    [[file:c/mkixin::xnode!][xnode!]] removes the element by side-effect.

    The upshot is to move name, next, prev and up elements (actually,
    their decoded (and re-encoded, for the links) contents) into the
    index.

    This is the only non-functional (destructive) operation on the nodes.

*** retrieve

    The many "~Y" in the format strings (instead of simpler "~S") forces
    control through ‘string-xrep’ ([[file:c/z-fixed-pp.scm]]).  Surprisingly,
    this is necessary even for Guile 2.  Hmmm.

* producing SXML w/o Guile

*** findings

    The program a1-nf3-mixp produces SXML from XML, but requires Guile
    and Mixp.  The distribution includes a 90% solution that uses Perl
    module ‘Data::Stag::SxprWriter’ to convert from XML to SXML NF1 and
    Guile (NB: w/o Mixp) to convert that to NF3.

    See:
    [[file:c/a1-nf1]] (Perl)
    file:c/a1-nf3-from-nf1 (Guile)
    file:d/GNUmakefile target ‘not-quite’

    It is only 90% because the Perl module suffers some problems still
    (and the author is no Perl hacker).

*** problems

***** ‘(’ and ‘)’ gratuitously escaped

      SxprWriter adds backslash escapes for these for no good reason.

***** ‘\’ (backslash) NOT escaped

      Unfortunately, this is an omission not easily kludged around.

***** whitespace lossage

      If you "cd d && make alive.sxml-not-quite", for example, you will
      note alive.sxml-not-quite is missing whitespace on the borders
      between normal strings and sub-elements.  Look at the strings
      surrounding ‘(strong (@) "stay on")’ in both alive.sxml and
      alive.sxml-not-quite.

***** superfluous ‘quote’

      Somewhat strangely, SxprWriter creates ‘(quote (texinfo ...))’
      instead of simply ‘(texinfo ...)’.  This is kludged around in
      a1-nf3-from-nf1 in proc ‘relevant’.

***** no DTD lookup

      Perhaps this is a not-a-Perl-hacker problem, but SxprWriter does
      not seem to complain about not finding the texinfo.dtd.  Thus,
      entities defined therein, such as ‘&copyright;’ are silently
      ignored.

***** warning

      If you "cd d && ../c/a1-nf1 prob.xml", you will see the warning:

      Wide character in print at ../c/a1-nf1 line 26.

      What does that mean?  PEBKAC, most likely.

***** NF1 instead of NF3

      Perhaps SxprWriter can be configured to output NF3 directly,
      but that wasn't clear from the docs.  Plus, it's just so easy
      (a1-nf3-from-nf1) in Scheme!

*** hackers welcome

    Whoever can fix these problems should probably arrange to output NF3
    directly, thus eliminating Guile entirely.  Here's a start:

    [[file:c/SxprWriter.pm.patch]]

    That patch addresses the first two problems only.  The program
    a1-nf1 kludges around the first problem only.  The ‘2>/dev/null’ in
    [[file:d/GNUmakefile]] is likewise suboptimal.

* copying conditions

  Copyright (C) 2012 Thien-Thi Nguyen

  Copying and distribution of this file, with or without modification,
  are permitted provided the copyright notice and this notice are preserved.

  ________________
  Local Variables:
  mode: org
  End:
