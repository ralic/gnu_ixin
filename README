README for IXIN
See end for copying conditions.

* What is it?

  IXIN is an EXPERIMENTAL distribution of EXPERIMENTAL code and
  some pre-built IXIN files.  IXIN stands for "indexed texinfo".

  All code is under GPLv3+.  All (.xml) docs are under GFDL.

  [[file:spec/ixin.texi]] is The IXIN Chronicles, a document that
  defines the file format and provides related info.  There are
  various output formats, including .info, .pdf and .ixin.

  [[file:c/]] contains some simple command-line utilities to write and
  read the file format, and a proof-of-concept rendering program.

  [[file:d/]] contains the some pre-built .sxml and .ixin files.
  [[file:d/GNUmakefile]] supports "make demo" and "make demo-zow",
  among other commands.

* Who is it for?

  The intended audience is Texinfo hackers and others who wish to
  build on Texinfo, adding to it the capability of producing files
  that are:

  - arbitrarily accessible
  - runtime configurable (e.g., paragraph indentation)

  See also:
  http://mail.gnu.org/archive/html/gnu-system-discuss/
  http://mail.gnu.org/archive/html/help-texinfo/

* dependencies

  The distribution includes pre-built .sxml and .ixin files, so the
  write tool is not necessary unless you modify the source .xml, in
  which case you will need to install Mixp (http://www.nongnu.org/mixp/)
  (Guile 1.8), or fix a1-nf3-guile2 (Guile 2.x), to proceed.  Of course,
  you need to have one of those Guile versions installed, too.  Writing
  also uses utility base64 to encode image data.

  You may also need the programs makeinfo and texi2pdf if you
  plan to rebuild the spec document.  To use alternate versions
  (for example, from the Texinfo pretest releases) you can set
  environment variables MAKEINFO and TEXI2PDF and invoke make
  with the ‘--environment-overrides’ (short form ‘-e’) option.

  Lastly, the proof-of-concept rendering program requires a
  relatively modern version of Emacs, as well as utility base64.

* What needs to be done, still?

  - w/ upstream (Texinfo) hackers:
    - image snarfing (* is current choice)
      - how? -- binary, *base64
      - when? -- never, optional, *always
      - where? -- inline, *blobs + blobs-index
    - add SETTINGS block (??? maybe)
      - s/TWEAKS/FINISH-POS/
      - change ‘ixset’ to use POS
    - define "optional blocks" syntax/protocol
      - rationale
        - upward compat (new blocks)
	- reduced bloat (not every doc has these)
      - convert: settings / dts / flosets / blobs
    - resolve ‘???’ doubts
  - make spit.el use shr.el
  - fix a1-nf3-guile2
  - (depending on viability) clean up impl

* copying conditions

  Copyright (C) 2012, 2013 Thien-Thi Nguyen

  Copying and distribution of this file, with or without modification,
  are permitted provided the copyright notice and this notice are preserved.

  ________________
  Local Variables:
  mode: org
  End:
