README for IXIN
See end for copying conditions.

* What is it?

  IXIN is an EXPERIMENTAL distribution of EXPERIMENTAL code and
  some pre-built IXIN files.  IXIN stands for "indexed texinfo".

  All code is under GPLv3+.  All (.xml) docs are under GFDL.

* Who is it for?

  The intended audience is Texinfo hackers and others who wish to
  build on Texinfo, adding to it the capability of producing files
  that are:

  - arbitrarily accessible
  - runtime configurable (e.g., paragraph indentation)

  See also:
  http://mail.gnu.org/archive/html/gnu-system-discuss/
  http://mail.gnu.org/archive/html/help-texinfo/

* What does it do?

  It defines a documentation file format and provides two simple
  tools to write and read, respectively, files in that format.
  The file format definition is described in a document under [[file:spec/][spec/]].

* What does it NOT do?

  This package does not include a program to view documents in the
  new format.  You can do "make demo" to see some of the potential,
  though.

  See also [[file:c/spit.el]] (if you use Emacs).

* dependencies

  The distribution includes pre-built .sxml and .ixin files, so the
  write tool is not necessary unless you modify the source .xml, in
  which case you will need to install Mixp (http://www.nongnu.org/mixp/)
  (Guile 1.8), or fix a1-nf3-guile2 (Guile 2.x), to proceed.  Of course,
  you need to have one of those Guile versions installed, too.

  You may also need the programs makeinfo and texi2pdf if you
  plan to rebuild the spec document.  To use alternate versions
  (for example, from the Texinfo pretest releases) you can set
  environment variables MAKEINFO and TEXI2PDF and invoke make
  with the ‘--environment-overrides’ (short form ‘-e’) option.

* possible access patterns

  The retrieve program illustrates one access pattern: read up
  and through the sectioning tree, and then use COUNTS and INDEX
  information to dig out node data on demand.

  Another, more incremental, approach is to read up through COUNTS,
  and then subsequently access index, dts and node data on demand.
  This is supported by design; the file position for the start of
  the node data is the sum of (always including trailing newline):
  - file position after reading COUNTS
  - INDEX-LENGTH
  - S-TREE-LENGTH
  - DTS-LENGTH...
  - FLOSET-LENGTH...

* What needs to be done, still?

  - w/ upstream (Texinfo) hackers:
    - still missing
      - settings support in mkixin
        - detection
        - tracking
    - image snarfing (* is current choice)
      - how? -- binary, *base64
      - when? -- never, optional, *always
      - where? -- blobs + blobs-index, *inline
    - resolve ‘???’ doubts
  - make spit.el use shr.el
  - fix a1-nf3-guile2
  - (depending on viability) clean up impl

* implementation notes

*** mkixin

    The ‘(node ...)’ form is not identical to the input SXML;
    [[file:c/mkixin::xnode!][xnode!]] removes the element by side-effect.

    The upshot is to move name, next, prev and up elements (actually,
    their decoded (and re-encoded, for the links) contents) into the
    index.

    Other elements and attributes are stripped, too.

*** retrieve

    The many "~Y" in the format strings (instead of simpler "~S") forces
    control through ‘string-xrep’ ([[file:c/z-fixed-pp.scm]]).  Surprisingly,
    this is necessary even for Guile 2.  Hmmm.

* producing SXML w/o Guile

*** findings

    The program a1-nf3-mixp produces SXML from XML, but requires Guile
    and Mixp.  The distribution includes a 90% solution that uses Perl
    module ‘Data::Stag::SxprWriter’ to convert from XML to SXML NF1 and
    Guile (NB: w/o Mixp) to convert that to NF3.

    See:
    [[file:c/a1-nf1]] (Perl)
    file:c/a1-nf3-from-nf1 (Guile)
    file:d/GNUmakefile target ‘not-quite’

    It is only 90% because the Perl module suffers some problems still
    (and the author is no Perl hacker).

*** problems

***** ‘(’ and ‘)’ gratuitously escaped

      SxprWriter adds backslash escapes for these for no good reason.

***** ‘\’ (backslash) NOT escaped

      Unfortunately, this is an omission not easily kludged around.

***** whitespace lossage

      If you "cd d && make alive.sxml-not-quite", for example, you will
      note alive.sxml-not-quite is missing whitespace on the borders
      between normal strings and sub-elements.  Look at the strings
      surrounding ‘(strong (@) "stay on")’ in both alive.sxml and
      alive.sxml-not-quite.

***** superfluous ‘quote’

      Somewhat strangely, SxprWriter creates ‘(quote (texinfo ...))’
      instead of simply ‘(texinfo ...)’.  This is kludged around in
      a1-nf3-from-nf1 in proc ‘relevant’.

***** no DTD lookup

      Perhaps this is a not-a-Perl-hacker problem, but SxprWriter does
      not seem to complain about not finding the texinfo.dtd.  Thus,
      entities defined therein, such as ‘&copyright;’ are silently
      ignored.

***** warning

      If you "cd d && ../c/a1-nf1 prob.xml", you will see the warning:

      Wide character in print at ../c/a1-nf1 line 26.

      What does that mean?  PEBKAC, most likely.

***** NF1 instead of NF3

      Perhaps SxprWriter can be configured to output NF3 directly,
      but that wasn't clear from the docs.  Plus, it's just so easy
      (a1-nf3-from-nf1) in Scheme!

*** hackers welcome

    Whoever can fix these problems should probably arrange to output NF3
    directly, thus eliminating Guile entirely.  Here's a start:

    [[file:c/SxprWriter.pm.patch]]

    That patch addresses the first two problems only.  The program
    a1-nf1 kludges around the first problem only.  The ‘2>/dev/null’ in
    [[file:d/GNUmakefile]] is likewise suboptimal.

* copying conditions

  Copyright (C) 2012, 2013 Thien-Thi Nguyen

  Copying and distribution of this file, with or without modification,
  are permitted provided the copyright notice and this notice are preserved.

  ________________
  Local Variables:
  mode: org
  End:
