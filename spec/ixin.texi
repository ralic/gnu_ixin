\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename ixin.info
@documentencoding UTF-8
@documentlanguage en
@include release.texi
@settitle The IXIN Chronicles
@defindex jargon
@synindex jargon cp
@defindex doubt
@syncodeindex pg doubt
@syncodeindex vr cp
@c %**end of header

@macro packageparticulars
edition @value{VERSION}, @value{UPDATED}
@end macro

@copying
This is the IXIN Chronicles (@packageparticulars{}).

Copyright @copyright{} 2012, 2013 Thien-Thi Nguyen

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the appendix entitled
``GNU Free Documentation License''.
@end quotation
@end copying

@dircategory GNU organization
@direntry
* IXIN: (ixin).         The @sc{ixin} Chronicles
                        (@packageparticulars{})
@end direntry

@titlepage
@title The IXIN Chronicles
@subtitle @packageparticulars{}
@author Thien-Thi Nguyen
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@macro qqq
@strong{@t{???}}
@end macro


@c ---------------------------------------------------------------------------
@ifnottex
@node Top
@top The IXIN Chronicles

@insertcopying
@end ifnottex

@menu
* Introduction::            Design criteria, methods, jargon.
* Specification::           How it's gonna be!
* Utilities::               Code that tries to conform.

* GNU FDL::                 Copying and sharing this documentation.
* List of Figures::
* Program and Doubt Index::
* Index::
@end menu


@c ---------------------------------------------------------------------------
@node    Introduction
@chapter Introduction

@cindex origin, idea
It's 2012.  People use the info format, but find it increasingly
difficult to express certain desired rendering, such as background
color.  There is talk on some GNU mailing list about designing a
successor.  Someone wonders why the XML output, available since 2004 or
so (Texinfo 4.7 era), has little uptake.  Someone else opines that
perhaps the reason is because XML is ugly, suggests SXML might be easier
on the aesthetic sensibilities, but laments both representations'
impoverished type system.  Someone else suggests that a successor format
would most likely be a mix of SXML and Lisp- (and Scheme-) friendly
sexps.

Out of these frustrated ramblings, IXIN was born.

@menu
* Design::        What makes a good file format?
* Technique::     How do we go about defining it?
* Terminology::   You can't spell dictionary w/o ``diction''.
@end menu

@center @image{logo}


@c ---------------------------------------------------------------------------
@node    Design
@section Design

@cindex access, incremental
@cindex control, rendering
Aside from being able to ``set the background color''
(@pxref{Introduction}), we would like a file format that supports
incremental access and runtime (end-user) control of certain display
parameters.  Basically, late-binding for documentation.
@cindex renderer
@cindex processor
@cindex program, rendering
This must be
done in cooperation with the @dfn{rendering program}, also known as the
@dfn{processor} or the @dfn{renderer}.

@cindex origin, file-format name
The overall approach, and the inspiration for the format name, is to
serialize early on in the file data structures that summarize data later
in the file.  Indexed information: IXIN.  The summaries are themselves
data, of course, and some of them can be accessed incrementally as well,
by summarizing their size (on disk, in bytes).


@c ---------------------------------------------------------------------------
@node    Technique
@section Technique

@cindex technique
Discussion about the IXIN file format continues (as of end of 2012) on
the @uref{http://mail.gnu.org/archive/html/help-texinfo/,help-texinfo}
mailing list.

@cindex @samp{mkixin} limitation
@cindex @samp{makeinfo} limitation
Every so often, a set of exploratory utils
(@pxref{Utilities}) and example files,
collectively known as ``IXIN tarballs'' are published on its
@uref{http://www.gnuvola.org/software/ixin/, homepage}.
Ideally, each feature of the file format would be demonstrated by the
utils and example files.  The reality is different, unfortunately
(primarily due to design and implementation limitations in the util
@samp{mkixin} and in old versions of @samp{makeinfo}).
To save you the trouble of looking for something that
can never be found, we explain all such ``vetting gaps'' in footnotes.
Here's a snapshot of the current ``activity'' (to do or decide) list
excerpted from the tarball README:

@include todo.texi

@noindent
@xref{Specification}, for ``‘@qqq{}’ doubts''.

@cindex docfood, eating one's
@cindex artifact, mergeable
Lastly, by exercising various Texinfo features, this document itself
serves as a test for the utils.  As a part of the IXIN tarball, its
changes track the file format as it evolves.  Once finalized, perhaps
the specifcation documented herein can be merged upstream into Texinfo.


@c ---------------------------------------------------------------------------
@node    Terminology
@section Terminology

This section first introduces the fundamental data structure around
which IXIN revolves conceptually, and then defines terms used in the
specification to describe the file format's concrete representations.

@menu
* associative array::       In mind, in memory.
* representations::         On view, on disk.
@end menu

@macro more{x}
@item \x\
@jargonindex \x\
@end macro


@c ---------------------------------------------------------------------------
@node       associative array
@subsection associative array

@strong{NB}: Unlike the other definitions (@pxref{representations} which
describe concrete representations, those in this subsection describe a
conceptual data structure and its related algorithms.

@table @asis
@more associative array
@jargonindex array, associative
A (possibly ordered) set of pairs of objects.
The first in the pair is the @dfn{key}, and the second the @dfn{value}.

@c Unicode line drawing chars lose for PDF output, at present.  :-(
@c  ┌─────┬───────┐
@c  │ KEY │ VALUE │
@c  └─────┴───────┘
@c Maybe someday...
@float Figure, A Key/Value Association
@format
@center @var{key} @result{} @var{value}
@end format
@caption{The association between a @var{key} and a @var{value}.}
@shortcaption{A @var{key}/@var{value} Association}
@end float

A key may appear only once in an array; it is unique.  A value may
appear any number of times.  For example:

@float Figure, Example Associative Array
@format
@center @code{A} @result{} @code{5}
@center @code{B} @result{} @code{4}
@center @code{C} @result{} @code{4}
@center @code{D} @result{} @code{2}
@end format
@caption{An example associative array, with four associations,
showing unique keys (@code{A}, @code{B}, @code{C}, @code{D})
and non-unique values (@code{5}, @code{4}, @code{2}).}
@shortcaption{Example Associative Array}
@end float

@jargonindex alist
@jargonindex dictionary
@jargonindex ordered-map
@jargonindex hash table
Other names for associative array are: alist, dictionary, ordered-map,
hash table.

@more look up
@cindex boolean value
You @dfn{look up} information from an associative array, specifying the
key and obtaining as a result the associated value, or the boolean value
@code{false} if there is no such key.  (@strong{NB}: The file format
never makes use of boolean values, so there is no risk of confusion.)
@end table


@c ---------------------------------------------------------------------------
@node       representations
@subsection representations

@table @asis
@more block
Text that ends with newline (U+0A).
The text may have internal newlines as well.

@more integer
A whole number, possibly negative.  Some examples: -1, 0, 42.
A @dfn{hex integer} is an integer represented using the hexadecimal
digits @samp{0} through @samp{9} and @samp{A} through @samp{F}.

@more node identifier
An integer.  A negative number means ``no such node''.

@more character
A Unicode character.  In this document, @code{U+@var{n}}, where @var{n}
is a hex integer, denotes the character with code point @var{n}.
In this document, @var{n} will always have an even number of digits.
@uref{http://www.unicode.org/}.

@more whitespace
Any non-empty sequence of characters that do not cause ink to be used
when printing.  This includes space (U+20), tab (U+09), newline (U+0A,
also known as ``linefeed''), and some others.

@more string
A sequence of characters, surrounded by @samp{"} (quotation mark, U+22).
In this sequence, a quotation mark character is @dfn{escaped} by
preceding it with @samp{\} (backslash, U+5C).  A backslash is likewise
escaped by doubling.  All other characters appear as themselves.

@more symbol
Similar to ``string'', above, but with some important omissions:
@enumerate
@item no surrounding double-quote
@item no whitespace characters
@item no double-quote or backslash
@item does not ``look like'' an integer
@end enumerate

@more encoding
The on-disk representation of a character, possibly multibyte.
A common encoding is UTF-8: @uref{http://www.utf8everywhere.org/}.

@more byte-length
An integer representing the number of bytes on disk occupied by
some text.  This depends on the encoding.

@item @var{x}@dots{}
One or more @var{x}.

@item [@var{x}]
Zero or one @var{x}.

@more list
A sequence of zero or more elements, each of which may be a string,
symbol, integer, or sub-list.  A list starts with @samp{(} (open
parenthesis, U+28) followed by its elements, followed by @samp{)} (close
paren, U+29).  In other words:

@example
([x@dots{}])
@end example

If two consecutive elements are not lists, they must be
separated by whitespace.

@more SXML
A list of the form:

@example
(NAME (@@ [ATTRIBUTE@dots{}]) [CHILD@dots{}])
@end example

@noindent
where @var{attribute} is a list of the form:

@example
(ATTR-NAME ATTR-VALUE)
@end example

@noindent
and each @var{child} is either a non-empty string or an SXML.
@var{name} and @var{attr-name} are symbols, and @var{attr-value} is a
string.  For example, here is the humble hyperlink as SXML:

@example
(a (@@ (href "http://www.gnu.org"))
   "GNU")
@end example

When there are no attributes, the form has only @code{(@@)} in the
second position.  For example:

@example
@group
(para (@@ (role "continues"))
      (acronym (@@) "IXIN")
      " is a"
      " " (strong (@@)
                 "totally"
                 (emph (@@) " cool"))
      " file format!")
@end group
@end example

@noindent
Here, three SXMLs (@code{acronym}, @code{strong}, @code{emph}) have
attributes, and two (@code{para}, @code{strong}) have SXML children.

@more leaf string
A string child, possibly recursively-accessed.  For instance, using the
previous example (above), the leaf strings for element @code{strong} are:

@example
"totally"  ; @r{direct child}
" cool"    ; @r{(recursively-accessed) child of} emph
@end example

@noindent
Also, @samp{totally} is a leaf string of both
@code{strong} and @code{para}.

@more renderable sequence
A list where each element is either a string or a (possibly nested)
SXML.  Apart from @code{result}, @code{click}, and so on (all of which
``produce'' output), all SXML must have at least one child, and the
innermost children must be strings.  All strings, whether at top-level
or part of an SXML, must be non-empty and must not include newline (or
carriage return, @dots{}) characters.
@end table

The next two definitions distinguish between the different types of
associative arrays (@pxref{associative array}).

@table @asis
@more index
A list that represents an associative array.

@more dts
Acronym that stands for ``document-term set'', i.e., what Texinfo users
call an ``index''.  For example, in this document, instead of ``Concept
Index'' (formed from @code{@@cindex} entries), we say ``Concept DTS''.
@end table

We choose ``dts'' to be purposefully very different from ``index'' to
avoid horrible confusion, and to allow ``dts index'' to have meaning.


@c ---------------------------------------------------------------------------
@node    Specification
@chapter Specification

In the following description, @qqq{} indicates points that are
not very firm in the author's mind.

@menu
* overall::              General characteristics.
* first line::           Magic, version and coding.
* meta::                 Indispensible front matter.
* counts::               Summarize the indices.
* node index::           For the nodes.
* sectioning tree::      Chapters, appendices, etc.
* labels::               For external reference.
* document-term sets::   Zero or more.
* float sets::           Zero or more.
* blobs index::          Images et al.
* node data::            (Almost) SXML.
* blobs::                Opaque octets.
@end menu

@macro vmore{x}
@item \x\
@vindex \x\
@end macro

@macro vmorex{x}
@itemx \x\
@vindex \x\
@end macro


@c ---------------------------------------------------------------------------
@node    overall
@section overall

@cindex text overall
@cindex third-normal form, SXML
Overall, the format is a series of text blocks.  All SXML trees (none of
which appear at the top-level, by the way) are @dfn{third-normal form}:
with abutting character-data sequences coalesced and attributes explicit
in the tree's second position (i.e., @sc{cadr}).
@cindex DTD for SXML
Valid SXML elements and attributes,
except for attribute @code{ixcc} (@pxref{no ixcc in DTD}),
are defined in the Texinfo DTDs with ``public id'':

@example
-//GNU//DTD TexinfoML V5.0//EN
-//GNU//DTD TexinfoML V4.13//EN
@end example

@noindent
@cindex normalization, whitespace, for SXML
Additionally, the SXML leaf strings have the following context-sensitive
properties, all related to ``whitespace normalization''.

@table @asis
@item trimmed whitespace
The initial and final leaf strings of the following elements
@strong{should not} begin with newline and end with whitespace,
respectively.

@example
example     smallexample    verbatim
lisp        smalllisp       quotation
display     smalldisplay    para
format      smallformat     pre
flushleft   flushright      cartouche
@end example

@noindent
@doubtindex trimmed whitespace, other elements?
[@qqq{}  Any others?  Any other way to specify this list?]@*
Internal newlines, or newlines at the end of other elements are OK.

@item @code{s/newline/space/} in @code{para}
@cindex @code{xml:space}, SXML attribute
Leaf strings of the element @code{para}, unless exempted by the
@code{xml:space} attribute of some interevening parent element having
value @samp{preserve}, @strong{should} have newline (U+0A) replaced
with space (U+20).  For example:

@example
@group
(para (@@)
      (b (@@) "foo\n")
      "bar"
      (example (@@ (xml:space "preserve"))
               "zow\n"
               (r (@@) "oop\n")
               "ack\n"))
@end group
@end example

@noindent
Here, @samp{\n} represents a newline character.  Only the one after
@samp{foo} is replaced with space to make the SXML well-formed:

@example
@group
(para (@@)
      (b (@@) "foo ")
      "bar"
      (example (@@ (xml:space "preserve"))
               "zow\n"
               (r (@@) "oop\n")
               "ack\n"))
@end group
@end example

@noindent
The others are protected by the @code{xml:space} attribute of element
@code{example}.
@end table


@c ---------------------------------------------------------------------------
@node    first line
@section first line

@cindex first line
The first line looks like:

@example
ixin VERSION; -*- coding: CODING -*-
@end example

@table @var
@vmore version
The format version number as a character string.
For now: @samp{1} (U+31).

@vmore coding
The coding system used for this file.
It should normally be @code{utf-8}.
@xref{Recognize Coding, how Emacs recognizes file encoding,, emacs,
The GNU Emacs Reference Manual}.
@end table

The rest of the line is exactly as above, with only one space between
tokens, and a @samp{:} (colon) as part of the third token.


@c ---------------------------------------------------------------------------
@node    meta
@section meta

@vindex meta
The list:

@example
(XID VARS SETTINGS COPYING TITLEPAGE TOC)
@end example

@noindent
that comprises all the information prior to the first @code{@@node}.

@menu
* xid::
* vars::
* settings::
* copying::
* titlepage::
* toc::
@end menu


@c ---------------------------------------------------------------------------
@node       xid
@subsection xid

@vindex xid
The list:

@example
(FILENAME LANG TITLE INVITATIONS)
@end example

@noindent
These are from the @code{@@setfilename}, @code{@@documentlanguage},
@code{@@settitle}, @code{@@dircategory} and @code{@@direntry}
commands, respectively.
``XID'' stands for ``external identifiers''.

@table @var
@vmore filename
@vindex @@setfilename
A string, or the symbol @code{-} (hyphen).

@vmore lang
@vindex @@documentlanguage
A symbol or a list of two symbols.
If @code{@@documentlanguage} is unspecified, defaults to @code{(en US)}.

@vmore title
@vindex @@settitle
A string, or a renderable sequence, or the symbol @code{-} (hyphen).

@vmore invitations
@vindex @@dircategory
@vindex @@direntry
If there are no @code{@@dircategory} or @code{@@direntry}
commands@footnote{Although @samp{mkixin} detects @code{direntry} just
fine, @samp{makeinfo} 4.13 and earlier do not propagate this information
to its XML output.}, the symbol @code{-} (hyphen).
@vindex invitation
Otherwise, a list of the form:

@example
(CATEGORY [ENTRY...])
@end example

@noindent
@vindex category, directory
@vindex entry, directory
where @var{category} is a single-line string, or @code{-} (hyphen);
and each @var{entry} has the form:

@example
(TITLE NODE [DESCRIPTION...])
@end example

@table @var
@vmore title
A single-line string.

@vmore node
A single-line string of the form:

@example
(IXIN-FILE-NAME)[NODE-NAME]
@end example

@noindent
@vindex ixin-file-name
@vindex node-name
That is, open-paren, file name, close-paren and the rest, if any, the
name of the node.  A space may appear between the close-paren and the
node name.

@vmore description
Either a string or a renderable sequence.
@end table
@end table


@c ---------------------------------------------------------------------------
@node       vars
@subsection vars

@vindex vars
The list:

@example
((NAME VALUE)...)
@end example

@table @var
@vmore name
A symbol.

@vmore value
A string.
@end table

@vindex @@set
@vindex @@clear
@vindex @@codequoteundirected
@vindex @@codequotebacktick
@vindex @@deftypefnnewline
These derive from @code{@@set} commands.  Such variables are for the
most part opaque to makeinfo, used solely for textual substitution.  The
exceptions, which influence makeinfo processing, all have names that
begin with @samp{txi}.  They are magically converted to the
corresponding setting (@pxref{settings}) according to this table:

@example
txicodequoteundirected     codequoteundirected
txicodequotebacktick       codequotebacktick
txideftypefnnl             deftypefnnewline
@end example

@noindent
The conversion is for both @code{@@set} and @code{@@clear}:

@example
@@set VAR       @@SETTING on
@@clear VAR     @@SETTING off
@end example

@doubtindex @var{meta} @var{vars}, necessity
@qqq{} Maybe we should omit vars altogether,
as they are for purely textual substitution, and the corresponding
@code{@@value} commands are not captured, anyway.  Down w/ bloat!
We would have to move the blurbs re automagically-converted @code{txi*}
vars to settings (@pxref{settings}), of course.


@c ---------------------------------------------------------------------------
@node       settings
@subsection settings

@vindex settings
The list@footnote{@samp{mkixin} detects:

@example
documentlanguage
codequoteundirected
codequotebacktick
deftypefnnewline
@end example

via @code{@@set} commands, only, and only in the pre-node area.}:

@example
((NAME VALUE)...)
@end example

@noindent
@vindex name
@vindex value
where @var{name} is a symbol and the type of @var{value} depends
on @var{name}.  In the following table, the first column is the
@dfn{context} of the setting: @samp{O} means ``once only'' (set in
@code{meta}, prior to the first node), and @samp{A} means ``arbitrary''
(can be set multiple times, also inside a node).

@multitable {c} {@t{setshortcontentsaftertitlepage}} {sym: @t{US-ASCII UTF-8 koi8-r koi8-u}}
@headitem c @tab setting @tab type
@item O
@tab
@doubtindex @samp{novalidate} setting, necessity
 @t{novalidate}
@tab none --- @qqq{} can we omit this?
@item O
@tab @t{fonttextsize}
@tab integer: @t{10 11}
@item O
@tab @t{footnotestyle}
@tab sym: @t{end separate}
@item O
@tab @t{pagesizes}
@tab
@doubtindex @samp{pagesizes} setting, non-integral quantities?
@qqq{} list of @t{(}integer symbol@t{)}

@item O
@tab @t{setchapternewpage}
@tab sym: @t{off on odd}
@item O
@tab @t{setcontentsaftertitlepage}
@tab none
@item O
@tab @t{setshortcontentsaftertitlepage}
@tab none

@item O
@tab @t{everyheading}
@tab
@doubtindex @samp{everyheading} setting, OK?
@qqq{} list of 3 renderable sequences
@item O
@tab @t{everyheadingmarks}
@tab sym: @t{top bottom}
@item O
@tab @t{evenheadingmarks}
@tab sym: @t{top bottom}
@item O
@tab @t{oddheadingmarks}
@tab sym: @t{top bottom}

@item O
@tab @t{everyfooting}
@tab
@doubtindex @samp{everyfooting} setting, OK?
@qqq{} list of 3 renderable sequences
@item O
@tab @t{everyfootingmarks}
@tab sym: @t{top bottom}
@item O
@tab @t{evenfootingmarks}
@tab sym: @t{top bottom}
@item O
@tab @t{oddfootingmarks}
@tab sym: @t{top bottom}

@item A
@tab @t{documentencoding}
@tab sym: @t{US-ASCII UTF-8 koi8-r koi8-u}
@*        @t{ISO-8859-1 ISO-8859-15 ISO-8859-2}

@item A
@tab @t{codequoteundirected}
@tab sym: @t{on off}
@item A
@tab @t{codequotebacktick}
@tab sym: @t{on off}
@item A
@tab @t{deftypefnnewline}
@tab sym: @t{on off}

@item A
@tab @t{exampleindent}
@tab sym: @t{asis} / integer
@item A
@tab @t{paragraphindent}
@tab sym: @t{asis} / integer
@item A
@tab @t{firstparagraphindent}
@tab sym: @t{none insert}

@item A
@tab @t{allowcodebreaks}
@tab sym: @t{false true}
@item A
@tab @t{clickstyle}
@tab
@doubtindex @samp{clickstyle} setting, macros?
@qqq{} renderable sequence

@item A
@tab @t{documentlanguage}
@tab
@doubtindex @samp{documentlanguage} setting, ``upward'' compatible?
@qqq{} symbol / list of two symbols

@item A
@tab @t{frenchspacing}
@tab sym: @t{on off}
@item A
@tab @t{headings}
@tab sym: @t{on off single@ double}
@*        @t{singleafter doubleafter}

@item A
@tab @t{kbdinputstyle}
@tab sym: @t{code example distinct}
@item A
@tab @t{urefbreakstyle}
@tab sym: @t{after before none}
@item A
@tab @t{xrefautomaticsectiontitle}
@tab sym: @t{on off}

@item ?
@tab
@doubtindex settings, missing
@doubtindex missing settings
@qqq{} (others)
@tab ?
@end multitable


@c ---------------------------------------------------------------------------
@node       copying
@subsection copying

@vindex copying
The SXML:

@example
(copying (@@) (para ...)...)
@end example

@noindent
@vindex @@copying
This is the Texinfo @code{@@copying} block.
If there is no such block, @var{copying}
defaults to the symbol @code{-} (hyphen).


@c ---------------------------------------------------------------------------
@node       titlepage
@subsection titlepage

@vindex titlepage
The SXML:

@example
(titlepage (@@) (title ...) ...)
@end example

@noindent
@vindex @@titlepage
This is the Texinfo @code{@@titlepage} block@footnote{For
@samp{makeinfo} 4.13 and earlier, the first child may be
@code{booktitle} instead of @code{title}, and so on.}.


@c ---------------------------------------------------------------------------
@node       toc
@subsection toc

@vindex toc
@vindex @@contents
@vindex @@shortcontents
@vindex @@summarycontents
A list of zero or more symbols of the set: @code{contents},
@code{shortcontents}, @code{summarycontents}.


@c ---------------------------------------------------------------------------
@node    counts
@section counts

@vindex counts
The list:

@example
(INDEX-LEN COUNT S-TREE-LEN LABELS-LEN
 DTS-INDEX FLOSETS-INDEX BLOBS-INDEX-LEN)
@end example

@table @var
@vmore index-len
The byte-length of the node index (@pxref{node index}).

@vmore count
The total number of nodes.

@vmore s-tree-len
The byte-length of the sectioning tree.

@vmore labels-len
The byte-length of the labels block (@pxref{labels}).

@vmore dts-index
A list of entries, each of the form:

@example
(NAME DTS-LEN [NID...])
@end example

@table @var
@vmore name
A symbol, such as @code{cp} or @code{fn}.

@vmore dts-len
The byte-length of this DTS.

@vmore nid
@vindex @@printindex
A node identifier for each node that contains a @code{@@printindex}
command for @var{name}.
@end table

If @var{dts-len} is zero, then there must be at least
one @var{nid}.  This is the case when
there is a @code{printindex} but no entries for it.

@vmore flosets-index
A list of entries, each of the form:

@example
(TYPE FLOSET-LEN [NID...])
@end example

@table @var
@vmore type
A symbol, such as @code{Figure}, or @code{-} to indicate ``untyped''.

@vmore floset-len
The byte-length of this set of floats.

@vmore nid
@vindex @@listoffloats
A node identifer for each node that contains a @code{@@listoffloats}
command for @var{type}.
@end table

If @var{floset-len} is zero, then there must be at least one
@var{nid}.  This is the case when there is a @code{listoffloats} but no
entries for it.

@vmore blobs-index-len
The byte-length of the blobs-index block (@pxref{blobs index}).
@end table


@c ---------------------------------------------------------------------------
@node    node index
@section node index

@vindex node-index
A series of @var{count} blocks (@pxref{counts}), each of the form:

@example
(NAME LENGTH NEXT PREV UP [TWEAKS])
@end example

@table @var
@vmore name
A string, e.g., @code{"Top"}.

@vmore length
The (integer) number of bytes required to read the
raw ``node data'' (@pxref{node data}).

@vmore next
@vmorex prev
@vmorex up
Integers, pointing to other members of the node index.
A value of -1 indicates a missing component (e.g.,
@var{up} and @var{prev} for @code{Top} is typically -1).

@vmore tweaks
The optional@footnote{At present, @samp{mkixin} never produces this.}
list of settings, each having the form:

@example
(NAME VALUE)
@end example

@noindent
@vindex name
@vindex value
As for the original settings (@pxref{meta}).
Only those settings with ``arbitrary'' context can appear here
(@pxref{settings}).
@end table


@c ---------------------------------------------------------------------------
@node    sectioning tree
@section sectioning tree

@vindex sectioning-tree
The single tree of ``sections'', each ``node'' having the form:

@example
(SECTION-ENTRY [SUB...])
@end example

@table @var
@vmore section-entry
The form:

@example
(NID TYPE TITLE...)
@end example

@noindent
@vindex nid
@vindex type
where @var{nid} is the node identifier for the
node ``containing'' that section,
@var{type} is one of:

@example
level 1: top chapter unnumbered appendix
level 2: section unnumberedsec appendixsec
level 3: subsection unnumberedsubsec appendixsubsec
level 4: subsubsection unnumberedsubsubsec appendixsubsubsec
@end example

@noindent
@vindex title
and @var{title} is a renderable sequence.

@vmore sub
An optional (zero or more) list with same format as the sectioning tree,
for subsections.
@end table

Sectioning tree top-level elements have a @var{type} from level 1, their
children from level 2, and so on.


@c ---------------------------------------------------------------------------
@node    labels
@section labels

@vindex labels
@cindex references, for external use
If @var{labels-len} (@pxref{counts}) is non-zero, the list:

@example
(NON-NODE-COUNT [NODE-LABEL...])
@end example

@noindent
followed by a series of @var{non-node-count} lists, each of the form:

@example
(LABEL NID WHAT)
@end example

@table @var
@vmore non-node-count
A non-negative integer.  Zero means only nodes have labels.

@vmore node-label
A string, the node's label, or a symbol.  If the symbol is @code{-}
(hyphen), the node has no label.  If the symbol is @code{=} (equal
sign), the node's label is identical to its name.

@vmore label
@cindex label syntax
A string whose characters are strictly from the set
@code{[-_A-Za-z0-9]}, i.e., the ASCII letters and digits plus @code{-}
(hyphen) and @code{_} (underscore).  Note that this means that the
file's coding (@pxref{first line}) must be compatibile with ASCII.
@xref{HTML Xref,HTML Xref,,texinfo,The GNU Texinfo Manual}, for details.

@vmore nid
A node identifier.

@vmore what
A symbol indicating what has this label, e.g., @code{anchor}.
@end table

@cindex correspondance, order of nodes and labels
The first form's list of node labels correspond (in order) to nodes in
the node index (@pxref{node index}).  As a special case, if the
@code{node-label} values would @strong{all} be @code{-} (hyphen), then
@code{node-label} information is omitted entirely; the first form then
simply lists @var{non-node-count}.


@c ---------------------------------------------------------------------------
@node    document-term sets
@section document-term sets

@vindex document-term-sets
For each element in @var{dts-index} with non-zero @var{dts-len},
a list:

@example
(COUNT FONT)
@end example

@noindent
@vindex count
@vindex entry, dts
followed by @var{count} entries, each of the form:

@example
([-] TERM NID...)
@end example

@table @var
@vmore count
A positive integer.

@vmore font
A symbol, one of @code{r} or @code{code}, specifying the default font
for this DTS.  An entry whose first element is the symbol @code{-}
(hyphen, U+2D) has the ``inverse'' default font.

@vmore term
Either a string or a renderable sequence.

@vmore nid
A node identifer for each node in which @var{term} appears.
@end table

@cindex order, dts entries
The entries in each DTS is sorted alphabetically, case insensitively.


@c ---------------------------------------------------------------------------
@node    float sets
@section float sets

@vindex float-sets
For each element in @var{flosets-index} with non-zero @var{floset-len},
a list:

@example
(COUNT)
@end example

@noindent
followed by @var{count} entries, each of the form:

@example
(NAME SHORT-CAPTION NID)
@end example

@table @var
@vmore count
A positive integer.

@vmore name
A string.

@vmore short-caption
Either a string, or a renderable sequence, or the symbol
@code{-} (hyphen) to indicate no short caption.

@vmore nid
The identifier for the node where this float is found.
@end table


@c ---------------------------------------------------------------------------
@node    blobs index
@section blobs index

@vindex blobs-index
If @var{blobs-index-len} (@pxref{counts}) is non-zero, the list:

@example
(COUNT)
@end example

@noindent
followed by @var{count} entries, each of the form:

@example
(BLOB-LEN ENCODING TYPE FILENAME)
@end example

@table @var
@vmore count
A positive integer.

@vmore blob-len
The byte-length of the blob.

@vmore encoding
A symbol specfiying how the blob is stored on disk.

@table @code
@item base64
@cindex @code{base64} blob encoding
This is the base64 (TODO: XREF RFC3548) encoding, with internal and
terminating newlines (all of which are counted in @var{blob-len}).
@strong{NB}: This is @strong{not} a string.

@item binary
@cindex @code{binary} blob encoding
This means no encoding whatsoever@footnote{@samp{mkixin} never writes
@code{binary}.}.
@doubtindex @code{binary} blob encoding, good idea?
@* @qqq{} Hmm, maybe this is not a good idea.
@end table

@vmore type
A MIME-style (TODO: XREF RFC2045) symbol of the form
@var{major}/@var{minor}, where @var{major} is @code{image}.
If the actual type is unknown, the minor is
@code{unknown}@footnote{@samp{mkixin} produces only:

@example
image/png
image/jpeg
image/unknown
@end example

based on examining the filename extension.}.

@vmore filename
A string.
@end table

@doubtindex other blob @var{major} types
@qqq{} How about allowing also @code{audio} for @var{major}?  Probably
@code{video} would be the logical next step, but that's going a little
too far, no?  We don't want IXIN to be a vector for malware.


@c ---------------------------------------------------------------------------
@node    node data
@section node data

@vindex node-data
A series of @var{count} blocks (@pxref{counts}), each with form:

@example
(ATTRS ELEMENT...)
@end example

@noindent
@vindex attrs
@cindex @var{elements}@dots{} of node data
In other words, a @code{node} SXML sans the initial symbol
@code{node}.  The order is the same as in the node index.

@menu
* references::              Avoiding duplication of forms.
@end menu


@c ---------------------------------------------------------------------------
@node       references
@subsection references

@cindex references, for internal use
@cindex coordinate, cartesian
@cindex cartesian coordinate
@cindex @code{ixcc}
To avoid duplication of forms already expressed in the various indices
(summarized in @ref{counts}), the node data SXML makes use of the
@code{ixcc} (i.e., @dfn{IXIN cartesian coordinate}) attribute, to
reference those forms.  The attribute value is a string (to be proper
SXML) having the form:

@example
"(FAMILY POSITION)"
@end example

@table @var
@vmore family
A single symbol or a list of symbols.
Here are the families:

@table @asis
@item @code{node}
@cindex @code{node}, @code{ixcc} family
Refers to the node index (@pxref{node index}).
@*Found in elements:
@example
menunode ref xref pxref
@end example
@doubtindex @code{node} @code{ixcc}, others?
@qqq{} Others?

@item @code{(dts @var{name})}
@cindex @code{dts} @var{name}, @code{ixcc} family
Refers to the DTS named @var{name} (@pxref{document-term sets}.
Found in element @code{indexterm}.

@item @code{(floset @var{type})}
@cindex @code{floset} @var{type}, @code{ixcc} family
Refers to the floset of type @var{type} (@pxref{float sets}).
Found in element @code{float}.

@item @code{blob}
@cindex @code{blob}, @code{ixcc} family
Refers to the blob index (@pxref{blobs index}).
Found in element @code{image}.
@end table

@vmore position
A non-negative integer.
@end table

@noindent
All @code{ixcc} references are @dfn{internal} (pointing to targets
defined in ``this'' file), allowing the element hosting them to be
abbreviated accordingly.  External references are more verbose.  For
example, here is how @code{@@pxref@{Top@}} (@pxref{Top}) appears:

@example
(pxref (@@ (ixcc "(node 0)")))
@end example

@noindent
whereas @code{@@pxref@{Top,,,emacs@}} (@pxref{Top,,,emacs}) is:

@example
(pxref (@@)
       (xrefnodename (@@) "Top")
       (xrefinfofile (@@) "emacs"))
@end example

@doubtindex @code{ixcc} not in DTD
@qqq{} Should we be excruciatingly correct and add @code{ixcc} to the
DTD?  @anchor{no ixcc in DTD}If not, some validators might complain.  On
the other hand, there really is no point aside from that.  As long as
all the exceptions are fully documented, we should be OK.


@c ---------------------------------------------------------------------------
@node    blobs
@section blobs

@vindex blobs
If @var{blobs-index-len} (@pxref{counts}) is non-zero, a series of
contiguous bytes described in @var{blobs-index} (@pxref{blobs index}).


@c ---------------------------------------------------------------------------
@node    Utilities
@chapter Utilities

@cindex utilities
@cindex programs, utility
@cindex writing
@cindex reading
The IXIN tarballs (@pxref{Technique}) contain some utility programs for
playing with the specified (@pxref{Specification}) file format.  There
are two primary ways to interact with IXIN files: writing and reading.

@menu
Writing --- emulating some future @samp{makeinfo}
* a1-nf3-mixp::    Convert XML to SXML (Guile, Mixp).
* a1-nf3-guile2::  Likewise (Guile 2).
* mkixin::         Convert SXML to IXIN (Guile).

Reading --- emulating some future renderers
* retrieve::       Demonstrate IXIN grokking in various ways (Guile).
* spit.el::        Render IXIN if possible, complain if not (Emacs).
@end menu


@c ---------------------------------------------------------------------------
@node          a1-nf3-mixp
@section @samp{a1-nf3-mixp}

@pindex a1-nf3-mixp
The first step is to get away from XML, which is ugly, to SXML in
third-normal form (@pxref{overall}), which is not exactly beautiful, but
certainly less ugly.  To run it you need to have both
@uref{http://www.gnu.org/software/guile/, Guile} and
@uref{http://www.nongnu.org/mixp/, Mixp} installed.

@cindex @samp{a1-nf3-mixp} invocation
@example
@r{Usage:} a1-nf3-mixp FILENAME
@end example

@noindent
Display the XML file in ``SXML format'' to stdout.
@var{filename} should be produced by @samp{makeinfo --xml}.


@c ---------------------------------------------------------------------------
@node          a1-nf3-guile2
@section @samp{a1-nf3-guile2}

@pindex a1-nf3-guile2
For Guile 2 lovers, this utility is intended to be a replacement for
@samp{a1-nf3-mixp} that does not rely on Mixp (@pxref{a1-nf3-mixp}).
Unfortunately, see below.

@cindex @samp{a1-nf3-guile2} invocation
@example
@r{Usage:} a1-nf3-guile2 FILENAME
@end example

@noindent
Display the XML file in ``SXML format'' to stdout.
@var{filename} should be produced by @samp{makeinfo --xml}.

@strong{NB}: This program is incomplete and does not work; use
@samp{a1-nf3-mixp} instead (@pxref{a1-nf3-mixp}).  We include it in the
distribution, anyway, in hopes that someone will step up to finish/fix it.


@c ---------------------------------------------------------------------------
@node          mkixin
@section @samp{mkixin}

@pindex mkixin
After obtaining SXML (@pxref{a1-nf3-mixp}), the next step is to
transform that to IXIN proper, extracting the various associative arrays
(@pxref{associative array}) and serializing them to disk.

@cindex @samp{mkixin} invocation
@example
@r{Usage:} mkixin FILENAME...
@end example

@noindent
For each @var{filename}, assumed to be @file{@var{stem}.sxml},
create @file{@var{stem}.ixin}.

@heading implementation notes

The @code{(node ...)} form is not identical to the input SXML;
@code{xnode!} removes the element by side-effect.

The upshot is to move name, next, prev and up elements (actually,
their decoded (and re-encoded, for the links) contents) into the
index.

Other elements and attributes are stripped, too.


@c ---------------------------------------------------------------------------
@node          retrieve
@section @samp{retrieve}

@pindex retrieve
We have a file on disk, but is it OK?  Can another program handle it?

@cindex @samp{retrieve} invocation
@example
@r{Usage:} retrieve IXIN [COMMAND [ARGS...]]
@end example

@noindent
@var{ixin} is the name of a file created by @samp{mkixin} (@pxref{mkixin}).
@var{command} (and @var{args}) is one of the following:

@example
dump
dump/abbrev N-BYTES
dump-meta
dump-counts
dump-index
list-dts
dump-dts [TYPE]
dump-s-tree
dump-node
show-node WHICH
show-all-nodes
repl END-CODE
@end example

@var{which} can be a name, like ``Top'', or a number, like ``0''.
If no @var{command} is specified, it is taken as @samp{dump/abbrev 128},
which is like @code{dump}, but truncates the node data to 128 bytes.

For @code{dump-dts}, if @var{type} is specified, dump that particular DTS.
Otherwise, dump all DTSes, each preceded by:

@example
@var{name}: (@var{count} @var{font})
@end example

For @code{repl}, @var{end-code} is a decimal number that specifies the first
character in the two character sequence used to terminate a response.
The second char is always newline (aka @code{\n}).
For example, use @code{12} for formfeed (aka, @code{\f}).

@anchor{retrieve repl mode}
In @code{repl} mode, @samp{retrieve} maintains a ``current node'',
initially id 0 (name @code{Top}), and loops reading a form from stdin and
displaying results to stdout.  Valid forms are:

@example
(where)           -- display current node information
(nav)             -- display next/prev/up links (subset of ‘where’)
(next)            -- move to ‘next’ node, if possible
(prev)            -- move to ‘prev’ node, if possible
(forward)         -- move to "1+ current-node"
(backward)        -- move to "1- current-node"
(up)              -- move to ‘up’ node, if possible
(goto WHICH)      -- jump directly to node WHICH
(show [WHICH])    -- do ‘show-node’ for WHICH or current node
(raw [WHICH])     -- do ‘dump-node’ for WHICH or current node
(dump-meta)       -- as from command-line (above)
(dump-index)      -- likewise
(list-dts)        -- likewise
(dump-dts [TYPE]) -- likewise
(dump-s-tree)     -- likewise
(quit)            -- exit immediately
@end example

@heading implementation notes

The many @samp{~Y} in the format strings (instead of simpler @samp{~S})
forces control through @code{string-xrep} (in @file{c/z-fixed-pp.scm}).
Surprisingly, this is necessary even for Guile 2.  Hmmm.


@c ---------------------------------------------------------------------------
@node          spit.el
@section @samp{spit.el}

@pindex spit.el
@cindex renderer, proof-of-concept
The distribution includes @file{spit.el}, a proof-of-concept renderer
for Emacs (implemented in Emacs Lisp) which uses utility @samp{retrieve}
(@pxref{retrieve repl mode}) to render what it can and complain about
what it can't.

To play, in Emacs first load @file{spit.el} (with @code{load-file}, for
example).  Next, run the command @code{spit}, like so:

@cindex @file{spit.el} invocation
@example
M-x spit RET FILENAME RET
@end example

@noindent
Here, @var{filename} @strong{must} end with @file{.ixin}.  If you have a
fast computer, try @file{d/coreutils.ixin}, otherwise @file{d/rcs.ixin}.
This document itself is available as @file{spec/ixin.ixin}.
After loading, you can @samp{C-h f spit RET}, for more information.


@c ---------------------------------------------------------------------------
@node     GNU FDL
@appendix GNU Free Documentation License

@include fdl.texi


@c ---------------------------------------------------------------------------
@node       List of Figures
@unnumbered List of Figures

@listoffloats Figure


@c ---------------------------------------------------------------------------
@node       Program and Doubt Index
@unnumbered Program and Doubt Index

@printindex doubt


@c ---------------------------------------------------------------------------
@node       Index
@unnumbered Index

@printindex cp

@bye
