\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename ixin.info
@documentencoding UTF-8
@include release.texi
@settitle IXIN Specification @value{VERSION}
@c %**end of header

@copying
This is the IXIN Specification (version @value{VERSION}, @value{UPDATED}).

Copyright @copyright{} 2012 Thien-Thi Nguyen

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the appendix entitled
``GNU Free Documentation License''.
@end quotation
@end copying

@dircategory GNU organization
@direntry
* IXIN: (ixin).                 Indexed Info file format spec.
@end direntry

@titlepage
@title IXIN Specification
@subtitle for version @value{VERSION}, @value{UPDATED}
@author Thien-Thi Nguyen
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top IXIN Specification

@insertcopying
@end ifnottex

@menu
* Introduction::            Design criteria, methods.
* Specification::           How it's gonna be!

* GNU FDL::                 Copying and sharing this documentation.
* Program Index::
* Index::
@end menu


@c ---------------------------------------------------------------------------
@node    Introduction
@chapter Introduction

It's 2012.  People use the info format, but find it increasingly
difficult to express certain desired rendering, such as background
color.  There is talk on some GNU mailing list about designing a
successor.  Someone wonders why the XML output, available since 2004 or
so (Texinfo 4.7 era), has little uptake.  Someone else opines that
perhaps the reason is because XML is ugly, suggests SXML might be easier
on the aesthetic sensibilities, but laments both representations'
impoverished type system.  Someone else suggests that a successor format
would most likely be a mix of SXML and Lisp- (and Scheme-) friendly
sexps.

Out of these frustrated ramblings, IXIN was born.

@menu
* Design::        What makes a good file format?
* Technique::     How do we go about defining it?
@end menu


@c ---------------------------------------------------------------------------
@node    Design
@section Design

@cindex design
Aside from being able to ``set the background color''
(@pxref{Introduction}), we would like a file format that supports
incremental access and runtime (end-user) control of certain display
parameters.  Basically, late-binding for documentation.  This must be
done in cooperation with the @dfn{rendering program}, also known as the
@dfn{processor} or the @dfn{renderer}.

The overall approach, and the inspiration for the format name, is to
serialize early on in the file data structures that summarize data later
in the file.  Indexed information: IXIN.  The summaries are themselves
data, of course, and some of them can be accessed incrementally as well,
by summarizing their size (on disk, in bytes).


@c ---------------------------------------------------------------------------
@node    Technique
@section Technique

@cindex technique
Discussion about the IXIN file format continues (as of end of 2012) on
the @uref{http://mail.gnu.org/archive/html/help-texinfo/,help-texinfo}
mailing list.

@pindex mkixin
@pindex retrieve
Every so often, a set of explortory tools and example files,
collectively known as ``IXIN tarballs'' are published on its homepage:
@uref{http://www.gnuvola.org/software/ixin/}.

Lastly, this document (which lives in project IXIN) serves as a test for
the tools.


@c ---------------------------------------------------------------------------
@node    Specification
@chapter Specification

In the following description, @code{???} indicates points that are
not very firm in the author's mind.

@cindex text overall
Overall, the format is plain UTF-8 text.  With the exception of
the @code{meta} portion, all SXML trees are third-normal form, with
abutting character-data sequences coalesced, attributes explicit in the
tree's CADR, and in the "default" namespace defined in the Texinfo DTD,
version 1.13, 2008/01/31.

@menu
* first line::           Magic, version and coding.
* meta::                 Indispensible front matter.
* counts::               Summarize the indices.
* node index::           For the nodes.
* term indices::         Zero or more.
* section tree::         Chapters, appendices, etc.
* node data::            (Almost) SXML.
@end menu


@c ---------------------------------------------------------------------------
@node    first line
@section first line

The first line looks like:

@example
ixin VERSION; -*- coding: CODING -*-
@end example

@table @var
@item version
The format version number as a character string.
For now: @samp{1} (U+31).

@item coding
The coding system used for this file.
It should normally be @code{utf-8}.
@xref{Recognize Coding, how Emacs recognizes file encoding,, emacs,
The GNU Emacs Reference Manual}.
@end table

The rest of the line is exactly as above, with only one space between
tokens, and a @samp{:} (colon) as part of the third token.  The line
ends with newline.


@c ---------------------------------------------------------------------------
@node    meta
@section meta

The list:

@example
(ATTRS XID VARS SETTINGS COPYING TITLEPAGE ELEMENT...)
@end example

@noindent
that comprise the immediate children of the (input) @code{texinfo} tree,
truncated at the first @code{node}, and reformatted to make client
access less tedious.  A newline ends the @code{meta} portion.

@menu
* attrs::
* xid::
* vars::
* settings::
* copying::
* titlepage::
* meta elements::
@end menu


@c ---------------------------------------------------------------------------
@node       attrs
@subsection attrs

The SXML attributes of the original @code{texinfo} SXML sans
@code{(@@)}, usually:

@example
((xml:lang "en"))
@end example


@c ---------------------------------------------------------------------------
@node       xid
@subsection xid

The list:

@example
(FILENAME TITLE DIRCATEGORY)
@end example

All elements are strings.  These are from the @code{setfilename},
@code{settitle} and @code{dircategory} elements, respectively.  ``XID''
stands for ``external identifiers''.


@c ---------------------------------------------------------------------------
@node       vars
@subsection vars

The list:

@example
((NAME VALUE)...)
@end example

These derive from @code{setvalue} elements.  @var{name} is a
symbol, and @var{value} is a string.

TODO: Mention ``@@set txiFOO'' automagic conversion (verify first!).


@c ---------------------------------------------------------------------------
@node       settings
@subsection settings

The list:

@example
((NAME VALUE)...)
@end example

@var{name} is a symbol, @var{value} type depends on @var{name}.


@c ---------------------------------------------------------------------------
@node       copying
@subsection copying

The SXML:

@example
(copying (@@) (para ...)...)
@end example

This is the Texinfo @code{@@copying} block.


@c ---------------------------------------------------------------------------
@node       titlepage
@subsection titlepage

The SXML-ish (???) element @code{titlepage}.  If the original Texinfo
contains @code{@@insertcopying}, this has the form:

@example
(titlepage (@@ (copying "copying"))
  ...
  "@@insertcopying"
  ...)
@end example

@noindent
Otherwise, it has the form:

@example
(titlepage (@@)
  ...)
@end example

@noindent
That is, there is no @code{copying} attribute, and no @code{@@insertcopying}.
The ``-ish'' is because we're not sure how valid a naked string is.


@c ---------------------------------------------------------------------------
@node       meta elements
@subsection meta elements

These are the rest of the elements after @code{titlepage} but before
the first @code{node}.  Usually:

@example
((contents (@@)))
@end example


@c ---------------------------------------------------------------------------
@node    counts
@section counts

The list:

@example
(INDEX-LENGTH COUNT TOP TLI S-TREE-LENGTH)
@end example

@table @var
@item index-length
The byte-length of the index (described below).

@item count
The total number of nodes.

@item top
The 0-based index of the @code{Top} node,
or -1 if there is no such node.

@item tli
A list of entries, each of the form:

@example
(TYPE TLI-LENGTH TLI-COUNT [NI...])
@end example

@table @var
@item type
The symbolic name of these "two-letter"-named indices
(as called by the Texinfo docs), such as @code{cp} or @code{fn}.

@item tli-length
The byte-length of this TLI.

@item tli-count
The number of entries in this TLI.

@item NI
Zero or more node indexes that contain the @code{printindex}
element for @var{type}.
@end table

Both @var{tli-length} and @var{tli-count} may be zero (concurrently).
In this case there must be at least one @var{ni}.  This is the case when
there is a @code{printindex} but no entries for it.

@item s-tree-length
The byte-length of the section tree.
@end table

@noindent
A newline ends the @code{counts} portion.


@c ---------------------------------------------------------------------------
@node    node index
@section node index

A series of @var{count} lists (@pxref{counts}), each of the form:

@example
(NAME LENGTH NEXT PREV UP)
@end example

@noindent
and each followed by newline.

@table @var
@item name
A string, e.g., @code{"Top"}.

@item length
The (integer) number of bytes required to read the
raw ``node data'' (described below).

@item next
@itemx prev
@itemx up
Integers, pointing to other members of the index.
A value of -1 indicates a missing component (e.g.,
@var{up} and @var{prev} for @code{Top} is typically -1).
@end table


@c ---------------------------------------------------------------------------
@node    term indices
@section term indices

Zero or more series of @var{tli-count} lists, each element of which has
the form:

@example
(TERM NI...)
@end example

@table @var
@item term
Either a string or a list of (possibly-nested) SXML elements and strings.

@item ni
One or more node indices in which @var{term} appears.
@end table

The entries in each TLI is sorted alphabetically, case insensitively.
A newline ends the @code{tli} portion.


@c ---------------------------------------------------------------------------
@node    section tree
@section section tree

The single tree of ``sections'', each ``node'' having the form:

@example
(SECTION-ENTRY [SUB...])
@end example

@table @var
@item section-entry
The form:

@example
(NI TYPE TITLE...)
@end example

@noindent
where @var{ni} is the node index containing that section,
@var{type} is one of:

@example
level 1: top chapter unnumbered appendix
level 2: section unnumberedsec appendixsec
level 3: subsection unnumberedsubsec appendixsubsec
level 4: subsubsection unnumberedsubsubsec appendixsubsubsec
@end example

@noindent
and @var{title} is the list of (possibly-nested) SXML elements or
strings.

@item sub
An optional (zero or more) list with same format as the section tree,
for subsections.
@end table

Section tree top-level elements have a @var{type} from level 1, their
children from level 2, and so on.


@c ---------------------------------------------------------------------------
@node    node data
@section node data

A series of @var{count} forms (@pxref{counts}), each with form:

@example
(ATTRS ELEMENT...)
@end example

@noindent
In other words, a @code{node} element sans the initial symbol
@code{node}, and followed by newline.

The order is the same as in the index portion of the file.


@c ---------------------------------------------------------------------------
@node     GNU FDL
@appendix GNU Free Documentation License

@include fdl.texi


@c ---------------------------------------------------------------------------
@node       Program Index
@unnumbered Program Index

@printindex pg


@c ---------------------------------------------------------------------------
@node       Index
@unnumbered Index

@printindex cp

@bye
