\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename ixin.info
@documentencoding UTF-8
@include release.texi
@settitle IXIN Specification @value{VERSION}
@defindex jargon
@synindex jargon cp
@c %**end of header

@copying
This is the IXIN Specification (version @value{VERSION}, @value{UPDATED}).

Copyright @copyright{} 2012 Thien-Thi Nguyen

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the appendix entitled
``GNU Free Documentation License''.
@end quotation
@end copying

@dircategory GNU organization
@direntry
* IXIN: (ixin).                 Indexed Info file format spec.
@end direntry

@titlepage
@title IXIN Specification
@subtitle for version @value{VERSION}, @value{UPDATED}
@author Thien-Thi Nguyen
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents


@c ---------------------------------------------------------------------------
@ifnottex
@node Top
@top IXIN Specification

@insertcopying
@end ifnottex

@menu
* Introduction::            Design criteria, methods, jargon.
* Specification::           How it's gonna be!

* GNU FDL::                 Copying and sharing this documentation.
* List of Figures::
* Program Index::
* Index::
@end menu


@c ---------------------------------------------------------------------------
@node    Introduction
@chapter Introduction

It's 2012.  People use the info format, but find it increasingly
difficult to express certain desired rendering, such as background
color.  There is talk on some GNU mailing list about designing a
successor.  Someone wonders why the XML output, available since 2004 or
so (Texinfo 4.7 era), has little uptake.  Someone else opines that
perhaps the reason is because XML is ugly, suggests SXML might be easier
on the aesthetic sensibilities, but laments both representations'
impoverished type system.  Someone else suggests that a successor format
would most likely be a mix of SXML and Lisp- (and Scheme-) friendly
sexps.

Out of these frustrated ramblings, IXIN was born.

@menu
* Design::        What makes a good file format?
* Technique::     How do we go about defining it?
* Terminology::   You can't spell dictionary w/o ``diction''.
@end menu

@center @image{logo}


@c ---------------------------------------------------------------------------
@node    Design
@section Design

@cindex design
Aside from being able to ``set the background color''
(@pxref{Introduction}), we would like a file format that supports
incremental access and runtime (end-user) control of certain display
parameters.  Basically, late-binding for documentation.  This must be
done in cooperation with the @dfn{rendering program}, also known as the
@dfn{processor} or the @dfn{renderer}.

The overall approach, and the inspiration for the format name, is to
serialize early on in the file data structures that summarize data later
in the file.  Indexed information: IXIN.  The summaries are themselves
data, of course, and some of them can be accessed incrementally as well,
by summarizing their size (on disk, in bytes).


@c ---------------------------------------------------------------------------
@node    Technique
@section Technique

@cindex technique
Discussion about the IXIN file format continues (as of end of 2012) on
the @uref{http://mail.gnu.org/archive/html/help-texinfo/,help-texinfo}
mailing list.

@pindex mkixin
@pindex retrieve
Every so often, a set of explortory tools and example files,
collectively known as ``IXIN tarballs'' are published on its homepage:
@uref{http://www.gnuvola.org/software/ixin/}.

@cindex docfood, eating one's
@cindex artifact, mergeable
Lastly, by exercising various Texinfo features, this document itself
serves as a test for the tools.  As a part of the IXIN tarball, its
changes track the file format as it evolves.  Once finalized, perhaps
the specifcation documented herein can be merged upstream into Texinfo.

@c ---------------------------------------------------------------------------
@node    Terminology
@section Terminology

This section first introduces the fundamental data structure around
which IXIN revolves conceptually, and then defines terms used in the
specification to describe the file format's concrete representations.

@menu
* associative array::       In mind, in memory.
* representations::         On view, on disk.
@end menu

@macro ji{x}
@jargonindex \x\ (generally)
@end macro

@macro more{x}
@item \x\
@ji \x\
@end macro


@c ---------------------------------------------------------------------------
@node       associative array
@subsection associative array

@strong{NB}: Unlike the other definitions (@pxref{representations} which
describe concrete representations, those in this subsection describe a
conceptual data structure and its related algorithms.

@table @asis
@more associative array
@ji array, associative
A (possibly ordered) set of pairs of objects.
The first in the pair is the @dfn{key}, and the second the @dfn{value}.

@c Unicode line drawing chars lose for PDF output, at present.  :-(
@c  ┌─────┬───────┐
@c  │ KEY │ VALUE │
@c  └─────┴───────┘
@c Maybe someday...
@float Figure, A Key/Value Association
@verbatim
KEY => VALUE
@end verbatim
@caption{The association between a @var{key} and a @var{value}.}
@shortcaption{A @var{key}/@var{value} Association}
@end float

A key may appear only once in an array; it is unique.  A value may
appear any number of times.  For example:

@float Figure, Example Associative Array
@verbatim
A => 5
B => 4
C => 4
D => 2
@end verbatim
@caption{An example associative array, with four associations,
showing unique keys (@code{A}, @code{B}, @code{C}, @code{D})
and non-unique values (@code{5}, @code{4}, @code{2}).}
@shortcaption{Example Associative Array}
@end float

@ji alist
@ji dictionary
@ji ordered-map
@ji hash table
Other names for associative array are: alist, dictionary, ordered-map,
hash table.

@more look up
@cindex boolean value
You @dfn{look up} information from an associative array, specifying the
key and obtaining as a result the associated value, or the boolean value
@code{false} if there is no such key.  (@strong{NB}: The file format
never makes use of boolean values, so there is no risk of confusion.)
@end table


@c ---------------------------------------------------------------------------
@node       representations
@subsection representations

@table @asis
@more integer
A whole number, possibly negative.  Some examples: -1, 0, 42.
A @dfn{hex integer} is an integer represented using the hexadecimal
digits @samp{0} through @samp{9} and @samp{A} through @samp{F}.

@more node identifier
An integer.  A negative number means ``no such node''.

@more character
A Unicode character.  In this document, @code{U+@var{n}}, where @var{n}
is a hex integer, denotes the character with code point @var{n}.
In this document, @var{n} will always have an even number of digits.
@uref{http://www.unicode.org/}.

@more whitespace
Any non-empty sequence of characters that do not cause ink to be used
when printing.  This includes space (U+20), tab (U+09), newline (U+0A,
also known as ``linefeed''), and some others.

@more string
A sequence of characters, surrounded by @samp{"} (quotation mark, U+22).
In this sequence, a quotation mark character is @dfn{escaped} by
preceding it with @samp{\} (backslash, U+5C).  A backslash is likewise
escaped by doubling.  All other characters appear as themselves.

@more symbol
Similar to ``string'', above, but with some important omissions:
@enumerate
@item no surrounding double-quote
@item no whitespace characters
@item no double-quote or backslash
@item does not ``look like'' an integer
@end enumerate

@more encoding
@cindex encoding
The on-disk representation of a character, possibly multibyte.
A common encoding is UTF-8: @uref{http://www.utf8everywhere.org/}.

@more length
An integer representing the number of bytes on disk occupied by
some text.  This depends on the encoding.

@item @var{x}@dots{}
One or more @var{x}.

@item [@var{x}]
Zero or one @var{x}.

@more list
A sequence of zero or more elements, each of which may be a string,
symbol, integer, or sub-list.  A list starts with @samp{(} (open
parenthesis, U+28) followed by its elements, followed by @samp{)} (close
paren, U+29).  In other words:

@example
([x@dots{}])
@end example

If two consecutive elements are not lists, they must be
separated by whitespace.

@more SXML
A list of the form:

@example
(NAME (@@ [ATTRIBUTE@dots{}]) [CHILD@dots{}])
@end example

@noindent
where @var{attribute} is a list of the form:

@example
(ATTR-NAME ATTR-VALUE)
@end example

@noindent
and each @var{child} is either a non-empty string or an SXML.
@var{name} and @var{attr-name} are symbols, and @var{attr-value} is a
string.  For example, here is the humble hyperlink as SXML:

@example
(a (@@ (href "http://www.gnu.org"))
   "GNU")
@end example

When there are no attributes, the form has only @code{(@@)} in the
second position.  For example:

@example
@group
(para (@@ (role "continues"))
      (acronym (@@) "IXIN")
      " is a"
      " " (strong (@@)
                 "totally"
                 (emph (@@) " cool"))
      " file format!")
@end group
@end example

@noindent
Here, three SXMLs (@code{acronym}, @code{strong}, @code{emph}) have
attributes, and two (@code{para}, @code{strong}) have SXML children.

@more A-SXML
Stands for ``anonymous'' (or if you prefer ``almost'') SXML, which is
like SXML, but sans @var{name}:

@example
((@@ [ATTRIBUTE@dots{}]) [CHILD@dots{}])
@end example
@end table


The next two definitions distinguish between the different types of
associative arrays (@pxref{associative array}).

@table @asis
@more index
A list that represents an associative array.

@more dts
Acronym that stands for ``document-term set'', i.e., what Texinfo users
call an ``index''.  For example, in this document, instead of ``Concept
Index'' (formed from @code{@@cindex} entries), we say ``Concept DTS''.
@end table

We choose ``dts'' to be purposefully very different from ``index'' to
avoid horrible confusion, and to allow ``dts index'' to have meaning.

@table @asis
@more block
Text that ends with newline (U+0A).
The text may have internal newlines as well.
@end table

@c ---------------------------------------------------------------------------
@node    Specification
@chapter Specification

In the following description, @code{???} indicates points that are
not very firm in the author's mind.

@cindex text overall
Overall, the format is plain UTF-8 text.  With the exception of
the @code{meta} portion, all SXML trees are third-normal form, with
abutting character-data sequences coalesced, attributes explicit in the
tree's CADR, and in the "default" namespace defined in the Texinfo DTD,
version 1.13, 2008/01/31.

@menu
* first line::           Magic, version and coding.
* meta::                 Indispensible front matter.
* counts::               Summarize the indices.
* node index::           For the nodes.
* section tree::         Chapters, appendices, etc.
* document-term sets::   Zero or more.
* float sets::           Zero or more.
* node data::            (Almost) SXML.
@end menu


@c ---------------------------------------------------------------------------
@node    first line
@section first line

The first line looks like:

@example
ixin VERSION; -*- coding: CODING -*-
@end example

@table @var
@item version
The format version number as a character string.
For now: @samp{1} (U+31).

@item coding
The coding system used for this file.
It should normally be @code{utf-8}.
@xref{Recognize Coding, how Emacs recognizes file encoding,, emacs,
The GNU Emacs Reference Manual}.
@end table

The rest of the line is exactly as above, with only one space between
tokens, and a @samp{:} (colon) as part of the third token.  The line
ends with newline.


@c ---------------------------------------------------------------------------
@node    meta
@section meta

The list:

@example
(ATTRS XID VARS SETTINGS COPYING TITLEPAGE TOC)
@end example

@noindent
that comprise the immediate children of the (input) @code{texinfo} tree,
truncated at the first @code{node}, and reformatted to make client
access less tedious.  A newline ends the @code{meta} portion.

@menu
* attrs::
* xid::
* vars::
* settings::
* copying::
* titlepage::
* toc::
@end menu


@c ---------------------------------------------------------------------------
@node       attrs
@subsection attrs

The SXML attributes of the original @code{texinfo} SXML sans
@code{(@@)}, usually:

@example
((xml:lang "en"))
@end example


@c ---------------------------------------------------------------------------
@node       xid
@subsection xid

The list:

@example
(FILENAME TITLE DIRCATEGORY)
@end example

All elements are strings.  These are from the @code{setfilename},
@code{settitle} and @code{dircategory} elements, respectively.  ``XID''
stands for ``external identifiers''.


@c ---------------------------------------------------------------------------
@node       vars
@subsection vars

The list@footnote{@code{???} Maybe we should omit vars altogether,
as they are for purely textual substitution, and the corresponding
@code{@@value} commands are not captured, anyway.  Down w/ bloat!

We would have to move the blurbs re automagically-converted @code{txi*}
vars to settings (@pxref{settings}), of course.}:

@example
((NAME VALUE)...)
@end example

@table @var
@item name
A symbol.

@item value
A string.
@end table

These derive from @code{setvalue} elements.  Such variables are for the
most part opaque to makeinfo, used solely for textual substitution.  The
exceptions, which influence makeinfo processing, all have names that
begin with @samp{txi}.  They are magically converted to the
corresponding setting (@pxref{settings}) according to this table:

@example
txicodequoteundirected     codequoteundirected
txicodequotebacktick       codequotebacktick
txideftypefnnl             deftypefnnewline
@end example

@noindent
The conversion is for both @code{@@set} and @code{@@clear}:

@example
@@set VAR       @@SETTING on
@@clear VAR     @@SETTING off
@end example


@c ---------------------------------------------------------------------------
@node       settings
@subsection settings

The list:

@example
((NAME VALUE)...)
@end example

@table @var
@item name
A symbol.

@item value
The type depends on @var{name}.
@end table


@c ---------------------------------------------------------------------------
@node       copying
@subsection copying

The SXML:

@example
(copying (@@) (para ...)...)
@end example

This is the Texinfo @code{@@copying} block.


@c ---------------------------------------------------------------------------
@node       titlepage
@subsection titlepage

The SXML with name @code{titlepage}.  If the original Texinfo
contains @code{@@insertcopying}, this has the form:

@example
(titlepage (@@ (copying "copying"))
  ...
  (insertcopying (@@))
  ...)
@end example

@noindent
Otherwise, it has the form:

@example
(titlepage (@@)
  ...)
@end example

@noindent
That is, there is no @code{copying} attribute,
and no @code{insertcopying} child SXML.


@c ---------------------------------------------------------------------------
@node       toc
@subsection toc

A list of zero or more symbols of the set: @code{contents},
@code{shortcontents}, @code{summarycontents}.


@c ---------------------------------------------------------------------------
@node    counts
@section counts

The list:

@example
(INDEX-LENGTH COUNT TOP S-TREE-LENGTH DTS-INDEX FLOSETS-INDEX)
@end example

@table @var
@item index-length
The byte-length of the index (described below).

@item count
The total number of nodes.

@item top
The node identifier of the @code{Top} node.
@*@code{???} If this is always zero, we can omit it.

@item s-tree-length
The byte-length of the section tree.

@item dts-index
A list of entries, each of the form:

@example
(NAME DTS-LENGTH [NID...])
@end example

@table @var
@item name
A symbol, such as @code{cp} or @code{fn}.

@item dts-length
The byte-length of this DTS.

@item nid
A node identifier for each node that contains a @code{printindex}
element for @var{name}.
@end table

If @var{dts-length} is zero, then there must be at least
one @var{nid}.  This is the case when
there is a @code{printindex} but no entries for it.

@item flosets-index
A list of entries, each of the form:

@example
(TYPE FLOSET-LENGTH [NID...])
@end example

@table @var
@item type
A symbol, such as @code{Figure}, or @code{-} to indicate ``untyped''.

@item floset-length
The byte-length of this set of floats.

@item nid
A node identifer for each node that contains a @code{listoffloats}
element for @var{type}.
@end table

If @var{floset-length} is zero, then there must be at least one
@var{nid}.  This is the case when there is a @code{listoffloats} but no
entries for it.
@end table

@noindent
A newline ends the @code{counts} portion.


@c ---------------------------------------------------------------------------
@node    node index
@section node index

A series of @var{count} lists (@pxref{counts}), each of the form:

@example
(NAME LENGTH NEXT PREV UP)
@end example

@noindent
and each followed by newline.

@table @var
@item name
A string, e.g., @code{"Top"}.

@item length
The (integer) number of bytes required to read the
raw ``node data'' (described below).

@item next
@itemx prev
@itemx up
Integers, pointing to other members of the index.
A value of -1 indicates a missing component (e.g.,
@var{up} and @var{prev} for @code{Top} is typically -1).
@end table


@c ---------------------------------------------------------------------------
@node    section tree
@section section tree

The single tree of ``sections'', each ``node'' having the form:

@example
(SECTION-ENTRY [SUB...])
@end example

@table @var
@item section-entry
The form:

@example
(NID TYPE TITLE...)
@end example

@noindent
where @var{nid} is the node identifier for the
node ``containing'' that section,
@var{type} is one of:

@example
level 1: top chapter unnumbered appendix
level 2: section unnumberedsec appendixsec
level 3: subsection unnumberedsubsec appendixsubsec
level 4: subsubsection unnumberedsubsubsec appendixsubsubsec
@end example

@noindent
and @var{title} is the list of (possibly-nested) SXML elements or
strings.

@item sub
An optional (zero or more) list with same format as the section tree,
for subsections.
@end table

Section tree top-level elements have a @var{type} from level 1, their
children from level 2, and so on.


@c ---------------------------------------------------------------------------
@node    document-term sets
@section document-term sets

For each element in @var{dts-index} with non-zero @var{dts-length},
a list:

@example
(COUNT FONT)
@end example

followed by @var{count} entries, each of the form:

@example
([-] TERM NID...)
@end example

@table @var
@item count
A positive integer.

@item font
A symbol, one of @code{r} or @code{code}, specifying the default font
for this DTS.  An entry whose first element is the symbol @code{-}
(hyphen, U+2D) has the ``inverse'' default font.

@item term
Either a string or a list of (possibly-nested) SXML elements and strings.

@item nid
A node identifer for each node in which @var{term} appears.
@end table

The entries in each DTS is sorted alphabetically, case insensitively.
A newline ends the @code{dts} portion.


@c ---------------------------------------------------------------------------
@node    float sets
@section float sets

For each element in @var{flosets-index} with non-zero @var{floset-length},
a list:

@example
(COUNT)
@end example

@noindent
followed by @var{count} entries, each of the form:

@example
(NAME POSITION SHORT-CAPTION NID)
@end example

@table @var
@item count
A positive integer.

@item name
A string.

@item position
The symbol @code{-} (hyphen).  This is a placeholder for some future
file format where position information can be specified in some way.

@item short-caption
Either a string, or a list of (possibly-nested) SXML elements and
strings, or the symbol @code{-} (hyphen) to indicate no short caption.

@item nid
The identifier for the node where this float is found.
@end table


@c ---------------------------------------------------------------------------
@node    node data
@section node data

A series of @var{count} forms (@pxref{counts}), each with form:

@example
(ATTRS ELEMENT...)
@end example

@noindent
In other words, a @code{node} element sans the initial symbol
@code{node}, and followed by newline.

The order is the same as in the index portion of the file.


@c ---------------------------------------------------------------------------
@node     GNU FDL
@appendix GNU Free Documentation License

@include fdl.texi


@c ---------------------------------------------------------------------------
@node       List of Figures
@unnumbered List of Figures

@listoffloats Figure


@c ---------------------------------------------------------------------------
@node       Program Index
@unnumbered Program Index

@printindex pg


@c ---------------------------------------------------------------------------
@node       Index
@unnumbered Index

@printindex cp

@bye
