<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE texinfo PUBLIC "-//GNU//DTD TexinfoML V4.13//EN" "http://www.gnu.org/software/texinfo/dtd/4.13/texinfo.dtd">
<texinfo xml:lang="en">
  <setfilename>rcs.xml</setfilename>
  <setvalue name="UPDATED">20 May 2012</setvalue>
  <setvalue name="UPDATED-MONTH">May 2012</setvalue>
  <setvalue name="EDITION">5.8.157-2ee4</setvalue>
  <setvalue name="VERSION">5.8.157-2ee4</setvalue>
  <settitle>GNU RCS 5.8.157-2ee4</settitle>
<!-- %**end of header -->
  <setvalue name="SUPER">grcs</setvalue>
  <para>This manual is for GNU RCS (version 5.8.157-2ee4, 20 May 2012).</para>
  <para>Copyright &copyright; 2010-2012 Thien-Thi Nguyen</para>
  <quotation>
    <para>Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, with no Front-Cover Texts, and with no Back-Cover Texts.  A copy of the license is included in the appendix entitled &ldquo;GNU Free Documentation License&rdquo;.</para>
  </quotation>
  <dircategory>Version control</dircategory>
  <titlepage>
    <booktitle>GNU RCS</booktitle>
    <booksubtitle>for version 5.8.157-2ee4, 20 May 2012</booksubtitle>
    <author>Thien-Thi Nguyen</author>
    <para>This manual is for GNU RCS (version 5.8.157-2ee4, 20 May 2012).</para>
    <para>Copyright &copyright; 2010-2012 Thien-Thi Nguyen</para>
    <quotation>
      <para>Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, with no Front-Cover Texts, and with no Back-Cover Texts.  A copy of the license is included in the appendix entitled &ldquo;GNU Free Documentation License&rdquo;.</para>
    </quotation>
  </titlepage>
  <contents></contents>
  <node>
    <nodename>Top</nodename>
    <nodenext>Overview</nodenext>
    <nodeup>(dir)</nodeup>
    <unnumbered>
      <title>GNU RCS</title>
      <para>This manual is for GNU RCS (version 5.8.157-2ee4, 20 May 2012).</para>
      <para>Copyright &copyright; 2010-2012 Thien-Thi Nguyen</para>
      <quotation>
        <para>Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, with no Front-Cover Texts, and with no Back-Cover Texts.  A copy of the license is included in the appendix entitled &ldquo;GNU Free Documentation License&rdquo;.</para>
      </quotation>
      <menu>
        <menuentry>
          <menunode>Overview</menunode>
          <menutitle>Overview</menutitle>
          <menucomment>General purpose and information.</menucomment>
        </menuentry>
        <menuentry>
          <menunode>Usage</menunode>
          <menutitle>Usage</menutitle>
          <menucomment>How to use RCS.</menucomment>
        </menuentry>
        <menuentry>
          <menunode>Still missing</menunode>
          <menutitle>Still missing</menutitle>
          <menucomment>What RCS lacks, perhaps perpetually.</menucomment>
        </menuentry>
        <menuentry>
          <menunode>Reporting bugs</menunode>
          <menutitle>Reporting bugs</menutitle>
          <menucomment>Sending bug reports and feature suggestions.</menucomment>
        </menuentry>
        <menuentry>
          <menunode>GNU FDL</menunode>
          <menutitle>GNU FDL</menutitle>
          <menucomment>Copying and sharing this documentation.</menucomment>
        </menuentry>
        <menuentry>
          <menunode>Index</menunode>
          <menutitle>Index</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <detailmenu>
          <para>Overview</para>
          <menuentry>
            <menunode>Credits</menunode>
            <menutitle>Credits</menutitle>
            <menucomment>Who did what, and when.</menucomment>
          </menuentry>
          <menuentry>
            <menunode>Concepts</menunode>
            <menutitle>Concepts</menutitle>
            <menucomment>What is a revision? How can RCS help?</menucomment>
          </menuentry>
          <menuentry>
            <menunode>Quick tour</menunode>
            <menutitle>Quick tour</menutitle>
            <menucomment>A hands-on introduction to using RCS.</menucomment>
          </menuentry>
          <para>Usage</para>
          <menuentry>
            <menunode>Common elements</menunode>
            <menutitle>Common elements</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>ci</menunode>
            <menutitle>ci</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>co</menunode>
            <menutitle>co</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>ident</menunode>
            <menutitle>ident</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>merge</menunode>
            <menutitle>merge</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>rcs</menunode>
            <menutitle>rcs</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>rcsclean</menunode>
            <menutitle>rcsclean</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>rcsdiff</menunode>
            <menutitle>rcsdiff</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>rcsmerge</menunode>
            <menutitle>rcsmerge</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>rlog</menunode>
            <menutitle>rlog</menutitle>
            <menucomment>Common elements</menucomment>
          </menuentry>
          <menuentry>
            <menunode>Revision options</menunode>
            <menutitle>Revision options</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Date option</menunode>
            <menutitle>Date option</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Description option</menunode>
            <menutitle>Description option</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Substitution mode option</menunode>
            <menutitle>Substitution mode option</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Misc common options</menunode>
            <menutitle>Misc common options</menutitle>
            <menucomment></menucomment>
          </menuentry>
          <menuentry>
            <menunode>Environment</menunode>
            <menutitle>Environment</menutitle>
            <menucomment></menucomment>
          </menuentry>
        </detailmenu>
      </menu>
<!--  -->
    </unnumbered>
  </node>
  <node>
    <nodename>Overview</nodename>
    <nodenext>Usage</nodenext>
    <nodeprev>Top</nodeprev>
    <nodeup>Top</nodeup>
    <chapter>
      <title>Overview</title>
      <para><indexterm index="cp">overview</indexterm><indexterm index="cp">comma-v file format</indexterm><indexterm index="cp">license</indexterm> GNU RCS (Revision Control System) manages multiple revisions of files.  RCS can store, retrieve, log, identify, and merge revisions. It is useful for files that are revised frequently, e.g. programs, documentation, graphics, and papers.  It can handle text as well as binary files, although functionality is reduced for the latter.</para>
      <para>A normal installation includes the commands: <b>ci</b>, <b>co</b>, <b>ident</b>, <b>merge</b>, <b>rcs</b>, <b>rcsclean</b>, <b>rcsdiff</b>, <b>rcsmerge</b> and <b>rlog</b> (see <xref><xrefnodename>Usage</xrefnodename></xref>). These are small and fast programs (amenable to scripting) and indeed the distribution also includes the script <b>rcsfreeze</b> showing some of the possibilities.</para>
      <para><indexterm index="cp">projects, related</indexterm>RCS works with versions stored on a single filesystem or machine, edited by one person at a time.  Other version control systems, such as Bazaar (<uref><urefurl>http:///www.gnu.org/software/bazaar</urefurl></uref>), CVS, Subversion, and Git, support distributed access in various ways. Which is more appropriate depends on the task at hand.</para>
      <menu>
        <menuentry>
          <menunode>Credits</menunode>
          <menutitle>Credits</menutitle>
          <menucomment>Who did what, and when.</menucomment>
        </menuentry>
        <menuentry>
          <menunode>Concepts</menunode>
          <menutitle>Concepts</menutitle>
          <menucomment>What is a revision? How can RCS help?</menucomment>
        </menuentry>
        <menuentry>
          <menunode>Quick tour</menunode>
          <menutitle>Quick tour</menutitle>
          <menucomment>A hands-on introduction to using RCS.</menucomment>
        </menuentry>
      </menu>
    </chapter>
  </node>
  <node>
    <nodename>Credits</nodename>
    <nodenext>Concepts</nodenext>
    <nodeup>Overview</nodeup>
    <section>
      <title>Credits</title>
      <para><indexterm index="cp">history</indexterm><indexterm index="cp">credits</indexterm> <indexterm index="cp">Tichy, Walter F.</indexterm>RCS was designed and built by Walter F.&#xa0;Tichy of Purdue University.  RCS version 3 was released in 1983.</para>
      <para>Adam Hammer, Thomas Narten, and Daniel Trinkle of Purdue supported RCS through version 4.3, released in 1990.  Guy Harris of Sun contributed many porting fixes.  Paul Eggert of System Development Corporation contributed bug fixes and tuneups.  Jay Lepreau contributed 4.3BSD support.</para>
      <para>Paul Eggert of Twin Sun wrote the changes for RCS versions 5.5 and 5.6 (1991).  Rich Braun of Kronos and Andy Glew of Intel contributed ideas for new options.  Bill Hahn of Stratus contributed ideas for setuid support.  Ideas for piece tables came from Joe Berkovitz of Stratus and Walter F.&#xa0;Tichy.  Matt Cross of Stratus contributed test case ideas.  Adam Hammer of Purdue QAed.</para>
      <para>Paul Eggert wrote most of the changes for RCS 5.7.  K.&#xa0;Richard Pixley of Cygnus Support contributed several bug fixes.  Robert Lupton of Princeton and Daniel Trinkle contributed ideas for <samp>$Name</samp> expansion.  Brendan Kehoe of Cygnus Support suggested rlog's <option>-N</option> option.  Paul D.&#xa0;Smith of Data General suggested improvements in option and error processing.  Adam Hammer of Purdue QAed.</para>
      <para>Thien-Thi Nguyen is responsibile for RCS 5.8.  He modernized the code base, build system, and manual pages, fixing some bugs on the way.  He added standard <option>--help</option>, <option>--version</option> processing, and wrote the documentation you are reading (gladly taking inspiration from the paper<footnote><para>Source (troff) and several output formats are available from the <uref><urefurl>http://www.gnu.org/software/rcs/</urefurl><urefdesc>RCS homepage</urefdesc></uref>.</para></footnote> and manpages originally written by Walter F.&#xa0;Tichy).</para>
    </section>
  </node>
  <node>
    <nodename>Concepts</nodename>
    <nodenext>Quick tour</nodenext>
    <nodeprev>Credits</nodeprev>
    <nodeup>Overview</nodeup>
    <section>
      <title>Concepts</title>
      <subsection>
        <title>Interaction model</title>
        <para><indexterm index="cp">interaction model</indexterm> <indexterm index="cp">interaction model</indexterm><indexterm index="cp">model, interaction</indexterm>The interaction model is straightforward.  For each working file, you initialize its RCS file once, then enter a cycle of checkout, modification, and checkin operations.  Along the way, you can tweak some of the RCS file's metadata, as well. All of this is done through RCS commands; you need not modify the RCS file directly (and in fact you should probably avoid doing so lest RCS become confused). This model is somewhat analogous to using a library (of books). With a library, you sign up for a library card (initialize), then enter a cycle of taking a book home (checkout), enjoying it (NB: <strong>without</strong> modification, one hopes), and returning it to the library (checkin).</para>
        <para>Furthermore, you can compare revisions in the RCS file against each other, examine the user- (hopefully high) quality descriptions of the changes each revision embodies, merge selected revisions, and so forth.</para>
      </subsection>

      <subsection>
        <title>Working file</title>
        <para><indexterm index="cp">working file, instantiation</indexterm><indexterm index="cp">instantiating a working file</indexterm>RCS commands operate on one pair of files at a time.  The <dfn>working file</dfn> is what you normally view and edit (e.g., a file of C programming language source code named <file>a.c</file>). Because the working file's contents can be extracted from the RCS file (called <dfn>instantiating a working file</dfn>), it can be safely deleted to regain some disk space.</para>
      </subsection>

      <subsection>
        <title>RCS file</title>
        <para><indexterm index="cp">RCS file</indexterm><indexterm index="cp">description of working file</indexterm><indexterm index="cp">working file, description</indexterm>The <dfn>RCS file</dfn> is a separate file, conventionally placed in the subdirectory <file>RCS</file>, wherein RCS commands organize the initial and subsequent <dfn>revisions</dfn> of the working file, associating with each revision a unique revision number along with the remembered particulars of the checkin that produced it.  It also contains a <dfn>description</dfn> of the working file and various other metadata, described below.</para>
        <para>The RCS file is also known (colloquially) as the &ldquo;comma-v file&rdquo;, due to its name often ending in <file>,v</file> (e.g., <file>a.c,v</file>).</para>
        <para><indexterm index="cp">revision number</indexterm><indexterm index="cp">branch number</indexterm><indexterm index="cp">number, revision</indexterm><indexterm index="cp">number, branch</indexterm>A <dfn>revision number</dfn> is a branch number followed by a dot followed by an integer, and a <dfn>branch number</dfn> is an odd number of integers separated by dot.  A revision number with one dot (implying a branch number without any dots) is said to be <dfn>on the trunk</dfn>.  All integers are positive.  For example:</para>
        <example xml:space="preserve">1.1         -- revision number for initial checkin (typically);
               branch number: 1

9.4.1.42    -- more complicated (perhaps after much gnarly hacking);
               branch number: 9.4.1

333.333.333 -- not a valid revision number;
               however, a perfectly valid branch number</example>
        <para role="continues">The <dfn>branch point</dfn> of a non-trunk branch is the revision number formed by removing the branch's trailing integer.  To compute the <dfn>next higher</dfn> branch or revision number, add one to the trailing integer.  The highest-numbered revision on a branch is called the <dfn>tip</dfn> of the branch (or <dfn>branch tip</dfn>).  Continuing the example:</para>
        <example xml:space="preserve">1.1         -- on trunk; no branch point;
               next higher branch number:   2
               next higher revision number: 1.2

9.4.1.42    -- not on trunk; branch point:  9.4
               next higher branch number:   9.4.2
               next higher revision number: 9.4.1.43

333.333.333 -- not on trunk; branch point:  333.333
               next higher branch number:   333.333.334
               next higher revision number: 333.333.333.1</example>
        <para role="continues"><indexterm index="cp">tree of revisions</indexterm><indexterm index="cp">revisions, tree of</indexterm><indexterm index="cp">symbolic names</indexterm><indexterm index="cp">names, symbolic</indexterm>In addition to this &ldquo;tree&rdquo; of thus-linked revisions, the RCS file keeps track of the <dfn>default branch</dfn>, i.e., the branch whose tip corresponds to the most recent checkin; as well as the <dfn>symbolic names</dfn>, a list of associations between a user-supplied (and presumably meaningful) symbol and an underlying branch or revision number.</para>
        <para><indexterm index="cp">access control policy</indexterm>The RCS file contains two pieces of information used to implement its <dfn>access control policy</dfn>.  The first is a list of usernames.  If non-empty, only those users listed can modify the RCS file (via RCS commands).  The second is a list of <dfn>locks</dfn>, i.e., association between a username and a revision number.  If a lock <code><var>username</var>:<var>revno</var></code> exists, that means only <var>username</var> may modify <var>revno</var> (that is, do a checkin operation to deposit the next higher revision, or a higher revision number on the same branch as <var>revno</var>).</para>
        <para><indexterm index="cp">compatability, RCS 2.x</indexterm><indexterm index="cp"><samp>configure --enable-compat2</samp></indexterm><strong>Compatability Note</strong>: RCS files made with RCS 2.x may also contain <dfn>suffix information</dfn>.  If you run into such a file (unlikely, as that file format became obsolete in 1982), you will need to rebuild RCS with <samp>configure --enable-compat2</samp> to be able to read it.  Note that RCS commands never write out suffix information, even with <samp>configure --enable-compat2</samp>.</para>
      </subsection>

      <subsection>
        <title>Fundamental operations</title>
        <para><indexterm index="cp">checkin</indexterm>The <dfn>checkin</dfn> operation records the contents of the working file in the RCS file, assigning it a new (normally the next higher) revision number and recording the username, timestamp, <dfn>state</dfn> (a short symbol), and user-supplied <dfn>log message</dfn> (a textual description of the changes leading to that revision).  It uses <b>diff</b> to find the differences between the tip of the default branch and the working file, thereby writing the minimal amount of information needed to be able to recreate the contents of the previous tip.</para>
        <para><indexterm index="cp">checkout</indexterm>The <dfn>checkout</dfn> operation identifies a specific revision from the RCS file and either displays the content to standard output or instantiates a working file, overwriting any current instantiation with the selected revision.  In either case, the content may undergo <dfn>keyword expansion</dfn>, which replaces text of the form <samp>$Keyword$</samp> with (possibly) different text comprising the keyword and its <dfn>value</dfn>, depending on the current keyword expansion mode (see <xref><xrefnodename>Substitution mode option</xrefnodename></xref>).</para>
      </subsection>

      <subsection>
        <title>Keywords</title>
        <para>The keywords and their values are:</para>
        <para><indexterm index="cp">keywords, table of</indexterm></para>
        <table>
          <tableitem>
            <tableterm><code>Author</code></tableterm>
            <item>
              <para>The login name of the user who checked in the revision.</para>
            </item>
          </tableitem>
          <tableitem>
            <tableterm><code>Date</code></tableterm>
            <item>
              <para>The date and time the revision was checked in. May include an appended timezone offset.</para>
            </item>
          </tableitem>
          <tableitem>
            <tableterm><code>Header</code></tableterm>
            <item>
              <para>A standard header containing the absolute RCS filename, the revision number, the date and time, the author, the state, and the locker (if locked).  May include an appended timezone offset.</para>
            </item>
          </tableitem>
          <tableitem>
            <tableterm><code>Id</code></tableterm>
            <item>
              <para>Same as <samp>Header</samp>, except that only the basename appears (no directory components).</para>
            </item>
          </tableitem>
          <tableitem>
            <tableterm><code>Locker</code></tableterm>
            <item>
              <para>The login name of the user who locked the revision (empty if not locked).</para>
            </item>
          </tableitem>
          <tableitem>
            <tableterm><code>Log</code></tableterm>
            <item>
              <para>The log message supplied during checkin, preceded by a header containing the RCS filename, the revision number, the author, and the date and time.  May include an appended timezone offset.</para>
              <para>Existing log messages are not replaced. Instead, the new log message is inserted after <samp>$Log:...$</samp>. This is useful for accumulating a complete change log in a source file.</para>
              <para>Each inserted line is prefixed by the string that prefixes the <samp>$Log$</samp> line.  For example, if the <samp>$Log$</samp> line is</para>
              <example xml:space="preserve">// $Log: tan.cc $</example>
              <para role="continues">then RCS prefixes each line of the log with <samp>// </samp> (slash, slash, space).  This is useful for languages with comments that go to the end of the line.</para>
              <para>The convention for other languages is to use a <samp> * </samp> (space, asterisk, space) prefix inside a multiline comment.  For example, the initial log comment of a C program conventionally is of the following form:</para>
              <example xml:space="preserve"> /*
  * $Log$
  */</example>
              <para>For backwards compatibility with older versions of RCS, if the log prefix is <samp>/*</samp> or <samp>(*</samp> surrounded by optional white space, inserted log lines contain a space instead of <samp>/</samp> or <samp>(</samp>; however, this usage is obsolescent and should not be relied on.</para>
            </item>
          </tableitem>
          <tableitem>
            <tableterm><code>Name</code></tableterm>
            <item>
              <para>The symbolic name used to check out the revision, if any. For example, <samp>co -rJoe</samp> generates <samp>$Name: Joe $</samp>. Plain <b>co</b> generates just <samp>$Name: $</samp>.</para>
            </item>
          </tableitem>
          <tableitem>
            <tableterm><code>RCSfile</code></tableterm>
            <item>
              <para>The basename of the RCS file.</para>
            </item>
          </tableitem>
          <tableitem>
            <tableterm><code>Revision</code></tableterm>
            <item>
              <para>The revision number assigned to the revision.</para>
            </item>
          </tableitem>
          <tableitem>
            <tableterm><code>Source</code></tableterm>
            <item>
              <para>The absolute RCS filename.</para>
            </item>
          </tableitem>
          <tableitem>
            <tableterm><code>State</code></tableterm>
            <item>
              <para>The state assigned to the revision with the <option>-s</option> option of <b>rcs</b> or <b>ci</b>.</para>
            </item>
          </tableitem>
        </table>
      </subsection>
    </section>
  </node>
  <node>
    <nodename>Quick tour</nodename>
    <nodeprev>Concepts</nodeprev>
    <nodeup>Overview</nodeup>
    <section>
      <title>Quick tour</title>
      <para>This section complements the preceding section (see <xref><xrefnodename>Concepts</xrefnodename></xref>), presenting a handful of RCS commands in quick succession.  For details on individual RCS commands, See <xref><xrefnodename>Usage</xrefnodename></xref>.</para>
      <para>Suppose you have a file <file>f.c</file> that you wish to put under control of RCS.  If you have not already done so, make an <file>RCS</file> directory with the command:</para>
      <example xml:space="preserve">mkdir RCS</example>
      <para role="continues">Then invoke the checkin command:</para>
      <example xml:space="preserve">ci f.c</example>
      <para role="continues">This command creates an RCS file in directory <file>RCS</file>, stores <file>f.c</file> into it as revision 1.1, and deletes <file>f.c</file>.  It also asks you for a description.  The description should be a synopsis of the contents of the file.  All later checkin commands will ask you for a log entry, which should summarize the changes that you made.</para>
      <para>To get back the working file <file>f.c</file> in the previous example, use the checkout command:</para>
      <example xml:space="preserve">co f.c</example>
      <para role="continues">This command extracts the latest revision from the RCS file and writes it into <file>f.c</file>.  If you want to edit <file>f.c</file>, you must lock it as you check it out, with the command:</para>
      <example xml:space="preserve">co -l f.c</example>
      <para role="continues">You can now edit <file>f.c</file>.  Suppose after some editing you want to know what changes that you have made.  The command:</para>
      <example xml:space="preserve">rcsdiff f.c</example>
      <para role="continues">tells you the difference between the most recently checked-in version and the working file.  You can check the file back in by invoking:</para>
      <example xml:space="preserve">ci f.c</example>
      <para role="continues">This increments the revision number properly. If <b>ci</b> complains with the message:</para>
      <example xml:space="preserve">ci error: no lock set by your name</example>
      <para role="continues">then you have tried to check in a file even though you did not lock it when you checked it out.  Of course, it is too late now to do the checkout with locking, because another checkout would overwrite your modifications.  Instead, invoke:</para>
      <example xml:space="preserve">rcs -l f.c</example>
      <para role="continues">This command will lock the latest revision for you, unless somebody else got ahead of you already.  In this case, you'll have to negotiate with that person.</para>
      <para>Locking assures that you, and only you, can check in the next update, and avoids nasty problems if several people work on the same file.  Even if a revision is locked, it can still be checked out for reading, compiling, etc.  All that locking prevents is a checkin by anybody but the locker.</para>
      <para>If your RCS file is private, i.e., if you are the only person who is going to deposit revisions into it, strict locking is not needed and you can turn it off.  If strict locking is turned off, the owner of the RCS file need not have a lock for checkin; all others still do.  Turning strict locking off and on is done with the commands:</para>
      <example xml:space="preserve">rcs -U f.c    # disable strict locking
rcs -L f.c    # enable strict locking</example>
      <para>If you don't want to clutter your working directory with RCS files, create a subdirectory called <file>RCS</file> in your working directory, and move all your RCS files there.  RCS commands will look first into that directory to find needed files.  All the commands discussed above will still work, without any modification.  See <xref><xrefnodename>Common elements</xrefnodename></xref>.</para>
      <para>To avoid the deletion of the working file during checkin (in case you want to continue editing or compiling), invoke one of:</para>
      <example xml:space="preserve">ci -l f.c     # checkin + locked checkout
ci -u f.c     # checkin + unlocked checkout</example>
      <para role="continues">These commands check in <file>f.c</file> as usual, then perform an implicit checkout.  The first form also locks the checked in revision, the second one doesn't.  Thus, these options save you one checkout operation.  The first form is useful if you want to continue editing, the second one if you just want to read the file.  Both update the keyword substitutions in your working file see <xref><xrefnodename>Concepts</xrefnodename></xref>.</para>
      <para>You can give <b>ci</b> the number you want assigned to a checked-in revision.  Assume all your revisions were numbered 1.1, 1.2, 1.3, etc., and you would like to start release 2. Either of the commands:</para>
      <example xml:space="preserve">ci -r2 f.c
ci -r2.1 f.c</example>
      <para role="continues">assigns the number 2.1 to the new revision.  From then on, <b>ci</b> will number the subsequent revisions with 2.2, 2.3, etc.  The corresponding <b>co</b> commands:</para>
      <example xml:space="preserve">co -r2 f.c
co -r2.1 f.c</example>
      <para role="continues">retrieve the latest revision numbered 2.x and the revision 2.1, respectively.  <b>co</b> without a revision number selects the latest revision on the trunk, i.e. the highest revision with a number consisting of two fields.  Numbers with more than two fields are needed for branches.  For example, to start a branch at revision 1.3, invoke:</para>
      <example xml:space="preserve">ci -r1.3.1 f.c</example>
      <para role="continues">This command starts a branch numbered 1 at revision 1.3, and assigns the number 1.3.1.1 to the new revision.  Here is a diagram showing the new revision in relation to its branch and the trunk.</para>
      <example xml:space="preserve">1.1  --  1.2  --  1.3  --  1.4  --  1.5
                   |
                [1.3.1]  --  1.3.1.1</example>
      <para role="continues">For more information about branches, See <xref><xrefnodename>Concepts</xrefnodename></xref>.</para>
<!--  -->
    </section>
  </node>
  <node>
    <nodename>Usage</nodename>
    <nodenext>Still missing</nodenext>
    <nodeprev>Overview</nodeprev>
    <nodeup>Top</nodeup>
    <chapter>
      <title>Usage</title>
      <para>This chapter describes how to invoke RCS commands, including common command-line elements, as well options specific to each command. Starting with RCS 5.9, the special command <b>grcs</b> is the preferred <dfn>dispatch program</dfn> for some of the other commands.</para>
      <menu>
        <menuentry>
          <menunode>grcs</menunode>
          <menutitle>grcs</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Common elements</menunode>
          <menutitle>Common elements</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>ci</menunode>
          <menutitle>ci</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>co</menunode>
          <menutitle>co</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>ident</menunode>
          <menutitle>ident</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>merge</menunode>
          <menutitle>merge</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>rcs</menunode>
          <menutitle>rcs</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>rcsclean</menunode>
          <menutitle>rcsclean</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>rcsdiff</menunode>
          <menutitle>rcsdiff</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>rcsmerge</menunode>
          <menutitle>rcsmerge</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>rlog</menunode>
          <menutitle>rlog</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </chapter>
  </node>
  <node>
    <nodename>grcs</nodename>
    <nodenext>Common elements</nodenext>
    <nodeup>Usage</nodeup>
    <section>
      <title>Invoking <b>grcs</b></title>
      <para><indexterm index="cp"><b>grcs</b> invocation</indexterm><indexterm index="cp">invocation, <b>grcs</b></indexterm></para>
      <example xml:space="preserve">grcs [options] command [command-arg...]</example>
      <para role="continues">The <b>grcs</b> command is a <dfn>dispatch program</dfn> for some of the other commands.  Practically, that means that rather than invoking some command directly from the shell as <var>command</var>, you would instead invoke <b>grcs</b>, specifying <var>command</var> as the first arg, followed by <var>command</var>-specific args.</para>
      <example xml:space="preserve"># standalone
$ rlog <var>filename</var>

# with the dispatch program
$ grcs rlog <var>filename</var></example>
      <para>Although the extra typing is a drawback, using <b>grcs</b> confers some advantages:</para>
      <table>
        <tableitem>
          <tableterm>aliases</tableterm>
          <item>
            <para>In the example above, we could have written</para>
            <example xml:space="preserve">$ grcs log <var>filename</var></example>
            <para role="continues">where <samp>log</samp> is an <dfn>alias</dfn> for <samp>rlog</samp>. See <option>--commands</option> below.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>congruence with conteporary VCSes</tableterm>
          <item>
            <para>These days, version control systems almost universally use a dispatch program of some sort.  Combined with aliases, this can help you slide from RCS to another VCS (and back) more easily.</para>
          </item>
        </tableitem>
      </table>
      <para role="continues">For these reasons, <b>grcs</b> is here to stay.  Perhaps more importantly, commands as standalone programs will be withdrawn in a future RCS release.  The sooner you adapt scripts to use <b>grcs</b> the better.</para>
      <para>Aside from <option>--help</option> and <option>--version</option>, <b>grcs</b> also takes <option>--commands</option>, which displays the available commands (and their aliases) and exits.</para>
    </section>
  </node>
  <node>
    <nodename>Common elements</nodename>
    <nodenext>ci</nodenext>
    <nodeprev>grcs</nodeprev>
    <nodeup>Usage</nodeup>
    <section>
      <title>Common elements</title>
      <para><indexterm index="cp">command help</indexterm><indexterm index="cp">command version</indexterm>All RCS commands accept <option>--help</option> and <option>--version</option>. See <xref><xrefnodename>Command-Line Interfaces</xrefnodename><xrefinfofile>standards</xrefinfofile><xrefprintedname>The GNU Coding Standards</xrefprintedname></xref>.</para>
      <para role="continues">Aside from <option>--help</option> and <option>--version</option>, RCS commands take the form <samp>-<var>letter</var>[<var>arg</var>]</samp>, i.e., a hyphen followed by a single letter, optionally followed by extra information.  The square braces mean that the extra information is optional.  (No square braces means that the extra information is required.)  In any case, when specified, the extra information <strong>must</strong> abut the letter; there can be no intervening whitespace.</para>
      <example xml:space="preserve">co -u 1.4 foo   # wrong, space between -u and 1.4
co -u1.4  foo   # ok</example>
      <para role="continues"><indexterm index="cp">order of options and file names</indexterm>Furthermore, options must appear before file names (if any) on the command line.</para>
      <example xml:space="preserve">ident foo -q    # wrong, option after file name
ident -q foo    # ok</example>
      <para role="continues"><indexterm index="cp">pairing RCS and working files</indexterm><indexterm index="cp">file names on the command-line</indexterm>Lastly, pairs of RCS and working files can be specified in three ways: (a) both are given, (b) only the working file is given, (c) only the RCS file is given.  For (a), both RCS and working files may have arbitrary directory components; RCS commands pair them up intelligently.  For (b), RCS commands will look first into the directory <file>./RCS</file>, if it exists, to find the associated RCS file.</para>
      <menu>
        <menuentry>
          <menunode>Revision options</menunode>
          <menutitle>Revision options</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Date option</menunode>
          <menutitle>Date option</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Description option</menunode>
          <menutitle>Description option</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Substitution mode option</menunode>
          <menutitle>Substitution mode option</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Log message option</menunode>
          <menutitle>Log message option</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Misc common options</menunode>
          <menutitle>Misc common options</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Environment</menunode>
          <menutitle>Environment</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </section>
  </node>
  <node>
    <nodename>Revision options</nodename>
    <nodenext>Date option</nodenext>
    <nodeup>Common elements</nodeup>
    <subsection>
      <title>Revision options</title>
      <para><indexterm index="cp">command-line option to specify a revision</indexterm><indexterm index="cp">specifying a revision</indexterm><indexterm index="cp">revision, specifying</indexterm> As to be expected in a revision control system, many options are of the form <samp>-<var>flag</var>[<var>rev</var>]</samp>, where <var>flag</var> is a single letter (e.g., <samp>r</samp>). If ommitted, <var>rev</var> defaults to the latest revision on the default branch. A revision can be specified in many ways:</para>
      <table>
        <tableitem>
          <tableterm><var>br</var>.<var>n</var></tableterm>
          <item>
            <para>Straightforward dot-notation, where <var>br</var> specifies the branch.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm>.<var>n</var></tableterm>
          <item>
            <para>Like <var>br</var>.<var>n</var>, using the default branch.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><var>br</var></tableterm>
          <item>
            <para>Like <var>br</var>.<var>n</var>, using the a command-specific computation of <var>n</var>, given the current tip <var>i</var>. For <b>ci</b> (see <xref><xrefnodename>ci</xrefnodename></xref>), <var>n</var> would be <code><var>i</var> + 1</code>, while for other commands <var>n</var> would be simply <var>i</var>.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><var>name</var></tableterm>
          <item>
            <para>This is the symbolic name of a revision, as assigned previously by a <command>ci -n</command> or <command>ci -N</command> command.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>$</code></tableterm>
          <item>
            <para>The command computes the effective revision by examining the values of keyword expansions in the working file.</para>
          </item>
        </tableitem>
      </table>
      <para><indexterm index="cp">specifying a range of revisions</indexterm><indexterm index="cp">revision range, specifying</indexterm><indexterm index="cp">range of revisions, specifying</indexterm>For commands that accept a range of revisions, the syntax is generally <code><var>rev1</var>:<var>rev2</var></code>, i.e., two revisions (specified as described above) separated by a colon.</para>
    </subsection>
  </node>
  <node>
    <nodename>Date option</nodename>
    <nodenext>Description option</nodenext>
    <nodeprev>Revision options</nodeprev>
    <nodeup>Common elements</nodeup>
    <subsection>
      <title>Date option</title>
      <para role="continues"><indexterm index="cp">specifying a date</indexterm><indexterm index="cp">specifying a time/date</indexterm><indexterm index="cp">date, specifying</indexterm><indexterm index="cp">time/date, specifying</indexterm><indexterm index="cp">date formats</indexterm><indexterm index="cp">time zone</indexterm> Some commands accept an option of the form <samp>-d<var>date</var></samp> to specify a <dfn>date</dfn>, an absolute point in time (to second resolution), expressed in a <dfn>date format</dfn>.  These also accept <samp>-z<var>zone</var></samp> to specify the timezone.  The special value <samp>LT</samp> stands for the <dfn>local time zone</dfn>.  RCS recognizes many date formats and time zones.  For example, the following dates are equivalent if local time is January 11, 1990, 8pm Pacific Standard Time, eight hours west of Coordinated Universal Time (UTC):</para>
      <example xml:space="preserve">8:00 pm lt
4:00 AM, Jan. 12, 1990           default is UTC
1990-01-12 04:00:00+00           ISO 8601 (UTC)
1990-01-11 20:00:00-08           ISO 8601 (local time)
1990/01/12 04:00:00              traditional RCS format
Thu Jan 11 20:00:00 1990 LT      output of ctime(3) + LT
Thu Jan 11 20:00:00 PST 1990     output of date(1)
Fri Jan 12 04:00:00 GMT 1990
Thu, 11 Jan 1990 20:00:00 -0800  Internet RFC 822
12-January-1990, 04:00 WET</example>
      <para role="continues">Most fields in the date and time can be defaulted.  The default time zone is normally UTC, but this can be overridden by the <option>-z</option> option.  The other defaults are determined in the order year, month, day, hour, minute, and second (most to least significant).  At least one of these fields must be provided.  For omitted fields that are of higher significance than the highest provided field, the time zone's current values are assumed.  For all other omitted fields, the lowest possible values are assumed.  For example, without <option>-z</option>, the date <samp>20, 10:30</samp> defaults to <samp>10:30:00 UTC</samp> of the 20th of the UTC time zone's current month and year.  Note that for the shell, the date/time must be quoted if it contains spaces.</para>
      <para>RCS also accepts some other formats which specify only the date portion (omitting the time portion):</para>
      <table>
        <tableitem>
          <tableterm><code><var>YYYY</var>-<var>DDD</var></code></tableterm>
          <item>
            <para><var>DDD</var> is the day of year, 1-366.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code><var>YYYY</var>-w<var>WW</var>-<var>D</var></code></tableterm>
          <item>
            <para><var>WW</var> is the ISO week number, 0-53 (actually, ISO week numbers are 1-53; week 0 is a GNU RCS extension); and <var>D</var> is the ISO day number, 1-7 (Monday through Sunday).</para>
          </item>
        </tableitem>
      </table>
    </subsection>
  </node>
  <node>
    <nodename>Description option</nodename>
    <nodenext>Substitution mode option</nodenext>
    <nodeprev>Date option</nodeprev>
    <nodeup>Common elements</nodeup>
    <subsection>
      <title>Description option</title>
      <para><indexterm index="cp">specifying description text</indexterm><indexterm index="cp">description text, specifying</indexterm> Some commands accept an option of the form <samp>-t-<var>text</var></samp> or <samp>-t<var>file-name</var></samp>.  This option is to set or update the RCS file description text.  In the first form, <var>text</var> is used directly, excluding the leading hyphen (<samp>-</samp>) that distinguishes the two forms.  In the second form, the description text is taken from the contents of <var>file-name</var>.</para>
    </subsection>
  </node>
  <node>
    <nodename>Substitution mode option</nodename>
    <nodenext>Log message option</nodenext>
    <nodeprev>Description option</nodeprev>
    <nodeup>Common elements</nodeup>
    <subsection>
      <title>Substitution mode option</title>
      <para><indexterm index="cp">specifying substitution mode</indexterm><indexterm index="cp">substitution mode, specifying</indexterm> Some commands accept an option of the form <option>-k<var>subst</var></option>, used to control how keywords (see <xref><xrefnodename>Concepts</xrefnodename></xref>) are expanded in the working file.  In the following table of <var>subst</var> values, the example keyword is <samp>Revision</samp> and its value is <samp>5.13</samp>.</para>
      <table>
        <tableitem>
          <tableterm><code>kv</code></tableterm><indexterm index="cp">substitution mode, default</indexterm><indexterm index="cp">keyword-value substitution mode</indexterm>
          <item>
            <para>Generate <samp>$Revision: 5.13 $</samp> (dollar-sign, keyword, colon, space, value, space, dollar-sign). A locker's name is inserted in the value of the <code>Header</code>, <code>Id</code> and <code>Locker</code> keyword strings only as a file is being locked, i.e., by <command>ci -l</command> and <command>co -l</command>. This is the default substitution mode.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>kvl</code></tableterm><indexterm index="cp">keyword-value-locker substitution mode</indexterm>
          <item>
            <para>Like <option>-kkv</option>, except that a locker's name is always inserted if the given revision is currently locked.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>k</code></tableterm><indexterm index="cp">keyword-only substitution mode</indexterm>
          <item>
            <para>Generate <samp>$Revision$</samp> (dollar-sign, keyword, dollar-sign). This is useful when comparing different revisions of a file.  Log messages are inserted after <code>Log</code> keywords even if <option>-kk</option> is specified, since this tends to be more useful when merging changes.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>o</code></tableterm><indexterm index="cp">old-keyword-value substitution mode</indexterm>
          <item>
            <para>Like <option>-kkv</option>, but use the old value present in the working file just before it was checked in.  This can be useful for file formats that cannot tolerate any changes to substrings that happen to take the form of keyword strings.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>b</code></tableterm><indexterm index="cp">binary-old-keyword-value substitution mode</indexterm>
          <item>
            <para>Like <option>-ko</option>, but do all file i/o in binary mode.  This makes little difference on POSIX and Unix hosts, but on DOS-like hosts one should use <command>rcs -i -kb</command> to initialize an RCS file intended to be used for binary files.  Also, on all hosts, <b>rcsmerge</b> normally refuses to merge files when <option>-kb</option> is in effect.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>v</code></tableterm><indexterm index="cp">value-only substitution mode</indexterm>
          <item>
            <para>Generate <samp>5.13</samp> (value only).  Further keyword substitution cannot be performed once the keyword names are removed, so this should be used with care.  Because of this danger of losing keywords, <option>-kv</option> cannot be combined with <option>-l</option>, and the owner write permission of the working file is turned off; to edit the file later, check it out again without <option>-kv</option>.</para>
          </item>
        </tableitem>
      </table>
    </subsection>
  </node>
  <node>
    <nodename>Log message option</nodename>
    <nodenext>Misc common options</nodenext>
    <nodeprev>Substitution mode option</nodeprev>
    <nodeup>Common elements</nodeup>
    <subsection>
      <title>Log message option</title>
      <para>Both <command>ci</command> and <command>rcs</command> allow a log message to be specified with the <option>-m</option> option. <indexterm index="cp">empty log message</indexterm><indexterm index="cp">log message, empty</indexterm>If the <var>msg</var> argument to this option is empty, RCS uses the default <samp>*** empty log message ***</samp>. This particular message is handled specially (i.e., filtered out) by <command>rlog</command>.</para>
    </subsection>
  </node>
  <node>
    <nodename>Misc common options</nodename>
    <nodenext>Environment</nodenext>
    <nodeprev>Log message option</nodeprev>
    <nodeup>Common elements</nodeup>
    <subsection>
      <title>Misc common options</title>
      <para>Other common options are <option>-I</option>, <option>-q</option>, <option>-s</option>, <option>-T</option>, <option>-V</option>, <option>-w</option>, <option>-x</option>.</para>
      <table>
        <tableitem>
          <tableterm><code>-I</code></tableterm><indexterm index="cp">interactive mode</indexterm>
          <item>
            <para>This option enables <dfn>interactive mode</dfn>. More precisely, it <strong>forces</strong> interactive mode, whereby RCS commands believe that their standard input is a terminal, normally a precondition for displaying a prompt to receive input (such as a log message on checkin). The intention of <option>-I</option> is for scripting situations where standard input is actually not a terminal but you know beforehand (without prompting) that input is needed and you are ready to provide it on standard input anyway.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-q</code></tableterm><indexterm index="cp">quiet mode</indexterm>
          <item>
            <para>This option enables <dfn>quiet mode</dfn>. Commands work silently (unless there is an error condition), and suppress warnings and prompts.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-s<var>state</var></code></tableterm><indexterm index="cp">specifying a state</indexterm><indexterm index="cp">state, specifying</indexterm>
          <item>
            <para>Specify the state to be <var>state</var>.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-T</code></tableterm>
          <item>
            <para>This option controls how commands timestamp the RCS file. Normally, RCS commands set the RCS file's timestamp when modifying it in the &ldquo;natural&rdquo; way (without taking any particular care). With <option>-T</option>, on the other hand, the commands either preserve the timestamp (for standalone lock/unlock operations), or use the timestamp of the working file (for <b>ci</b>).</para>
            <para>This can be useful if the RCS file is found in a makefile target's list of prerequisites (see <xref><xrefnodename>Rule Syntax</xrefnodename><xrefinfofile>make</xrefinfofile><xrefprintedname>The GNU Make Manual</xrefprintedname></xref>), that is, if some target should be rebuilt if the RCS file is newer than it.  In that case, you can do <samp>rcs -u -T</samp>, for example, to unlock a revision in the RCS file without triggering a recompilation.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-V</code></tableterm>
          <item>
            <para>Behave like <option>--version</option>, i.e., display command version information and exit successfully.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-V<var>n</var></code></tableterm><indexterm index="cp">emulation, previous RCS versions</indexterm><indexterm index="cp">RCS version emulation</indexterm>
          <item>
            <para><var>n</var> specifies the RCS (major) version to emulate. Valid values for <var>n</var> are: 3, 4, 5.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-w<var>login</var></code></tableterm><indexterm index="cp">specifying author</indexterm><indexterm index="cp">author, specifying</indexterm>
          <item>
            <para>Some commands accept an option of the form <samp>-w<var>login</var></samp> to specify the login name of the author of a revision, i.e., &ldquo;who&rdquo; is responsible.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-x<var>suff</var></code></tableterm><indexterm index="cp">specifying a suffix list</indexterm><indexterm index="cp">suffix list, specifying</indexterm>
          <item>
            <para>Specify <var>suff</var> as the slash-separated list of file name suffixes used to recognize an RCS file.  The default value is <samp>,v/</samp>, that is, first try with <samp>,v</samp> then try with an empty suffix.</para>
            <para>This <dfn>basename search</dfn> occurs within (i.e., starting from the beginning) the larger <dfn>directory search</dfn> loop, which comprises two candidates: <file>d/RCS</file> and <file>d</file>, where <var>d</var> is the directory component of the working file name.  For example, given the working file <file>a.c</file> in the current directory, RCS tries, in order, these candidates:</para>
            <example xml:space="preserve">./RCS/a.c,v
./RCS/a.c
./a.c,v
./a.c</example>
            <para>Note that the last candidate is impossible (and is in fact discarded), because the working and RCS files cannot have the same name.</para>
          </item>
        </tableitem>
      </table>
    </subsection>
  </node>
  <node>
    <nodename>Environment</nodename>
    <nodeprev>Misc common options</nodeprev>
    <nodeup>Common elements</nodeup>
    <subsection>
      <title>Environment</title>
      <para><indexterm index="cp">environment variables</indexterm>Various environment variables influence how RCS works.</para>
      <definition>
        <definitionterm><indexterm index="cp">RCSINIT</indexterm>
          <defcategory>Environment Variable</defcategory> 
          <defvariable>RCSINIT</defvariable>
        </definitionterm>
        <definitionitem>
          <para>Another way to set common options is with the <samp>RCSINIT</samp> environment variable.  This is a space-separated list of options. Use <samp>\</samp> (backslash) to escape significant space.  For example:</para>
          <example xml:space="preserve"># Set the value; make it available to subsequent commands.
RCSINIT="-q -x/,v -zLT"
export RCSINIT

# Use it (implicitly).
rlog -L foo</example>
          <para role="continues">This example, in Bourne shell syntax, arranges for RCS commands to operate as if each command-line had prepended <samp>-q -x/,v -zLT</samp> to the rest of the command-line.  The effective command-line that <b>rlog</b> sees is thus <samp>-q -x/,v -zLT -L foo</samp>.</para>
        </definitionitem>
      </definition>
      <definition>
        <definitionterm><indexterm index="cp">RCS_MEM_LIMIT</indexterm>
          <defcategory>Environment Variable</defcategory> 
          <defvariable>RCS_MEM_LIMIT</defvariable>
        </definitionterm><indexterm index="cp">memory limit</indexterm>
        <definitionitem>
          <para>Normally, for speed, commands either memory map or copy into memory the RCS file if its size is less than the <dfn>memory limit</dfn>, currently defaulting to 256 kilobytes.  Otherwise the commands fall back to using standard i/o routines.</para>
          <para>You can adjust the memory limit by setting the <samp>RCS_MEM_LIMIT</samp> environment variable to a numeric value (measured in kilobytes). An empty value is silently ignored.</para>
        </definitionitem>
      </definition>
      <definition>
        <definitionterm><indexterm index="cp">TMPDIR</indexterm>
          <defcategory>Environment Variable</defcategory> 
          <defvariable>TMPDIR</defvariable>
        </definitionterm>
        <definitionterm><indexterm index="cp">TMP</indexterm>
          <defcategory>Environment Variable</defcategory> 
          <defvariable>TMP</defvariable>
        </definitionterm>
        <definitionterm><indexterm index="cp">TEMP</indexterm>
          <defcategory>Environment Variable</defcategory> 
          <defvariable>TEMP</defvariable>
        </definitionterm>
        <definitionitem>
          <para>Commands sometimes create temporary files, normally in a system-dependent directory, such as <file>/tmp</file>. You can override this directory by specifying another one as the value of one of the environment variables <code>TMPDIR</code>, <code>TMP</code>, or <code>TEMP</code> (checked in that order).</para>
        </definitionitem>
      </definition>
      <definition>
        <definitionterm><indexterm index="cp">LOGNAME</indexterm>
          <defcategory>Environment Variable</defcategory> 
          <defvariable>LOGNAME</defvariable>
        </definitionterm>
        <definitionterm><indexterm index="cp">USER</indexterm>
          <defcategory>Environment Variable</defcategory> 
          <defvariable>USER</defvariable>
        </definitionterm>
        <definitionitem>
          <para>Absent <option>-w<var>login</var></option>, or when <var>login</var> is omitted (see <xref><xrefnodename>Misc common options</xrefnodename></xref>), commands check environment variables <code>LOGNAME</code> and <code>USER</code> (in that order).  If neither of these are set, RCS queries the host for, and uses, your login.</para>
        </definitionitem>
      </definition>
    </subsection>
  </node>
  <node>
    <nodename>ci</nodename>
    <nodenext>co</nodenext>
    <nodeprev>Common elements</nodeprev>
    <nodeup>Usage</nodeup>
    <section>
      <title>Invoking <b>ci</b></title>
      <para><indexterm index="cp"><b>ci</b> invocation</indexterm><indexterm index="cp">invocation, <b>ci</b></indexterm></para>
      <example xml:space="preserve">ci [options] file ...</example>
      <para role="continues">The <b>ci</b> command adds a revision to the RCS file reflecting the current state of the working file.  This operation is also known as &ldquo;checkin&rdquo;.</para>
      <table>
        <tableitem>
          <tableterm><code>-f[<var>rev</var>]</code></tableterm>
          <item>
            <para>Force new entry, even if no content changed.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-I[<var>rev</var>]</code></tableterm>
          <tableterm><code>-q[<var>rev</var>]</code></tableterm>
          <item>
            <para>See <xref><xrefnodename>Misc common options</xrefnodename></xref>.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-i[<var>rev</var>]</code></tableterm>
          <item>
            <para>Initial checkin; error if the RCS file already exists.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-j[<var>rev</var>]</code></tableterm>
          <item>
            <para>Just checkin, don't initialize; error if the RCS file does not exist.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-k[<var>rev</var>]</code></tableterm>
          <item>
            <para>Compute revision from working file keywords.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-r</code></tableterm>
          <item>
            <para>Release lock and delete working file.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-r<var>rev</var></code></tableterm>
          <item>
            <para>Do normal checkin.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-l[<var>rev</var>]</code></tableterm>
          <item>
            <para>Like <option>-r</option>, but immediately checkout locked (<command>co -l</command>) afterwards.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-u[<var>rev</var>]</code></tableterm>
          <item>
            <para>Like <option>-l</option>, but checkout unlocked (<command>co -u</command>).</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-M[<var>rev</var>]</code></tableterm>
          <item>
            <para>Reset working file mtime (relevant for <option>-l</option>, <option>-u</option>).</para>
          </item>
        </tableitem>
      </table>
      <para role="continues">Multiple flags in <code>-{fiIjklMqru}</code> may be given, except for <option>-r</option>, <option>-l</option>, <option>-u</option>, which are mutually exclusive. For a fully specified revision of the form <code><var>br</var>.<var>n</var></code>, <var>n</var> must be greater than any existing on <var>br</var>, or <var>br</var> must be new. If <var>rev</var> is omitted, compute it from the last lock (<command>co -l</command>), perhaps starting a new branch. If there is no lock, use <code><var>defbr</var>.(L+1)</code>. See <xref><xrefnodename>Revision options</xrefnodename></xref>.</para>
      <table>
        <tableitem>
          <tableterm><code>-d[<var>date</var>]</code></tableterm>
          <tableterm><code>-z<var>zone</var></code></tableterm>
          <item>
            <para>See <xref><xrefnodename>Date option</xrefnodename></xref>.  If no <var>date</var> specified, use the working file modification time.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-m[<var>msg</var>]</code></tableterm>
          <item>
            <para>Use <var>msg</var> as the log message.  See <xref><xrefnodename>Log message option</xrefnodename></xref>.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-n<var>name</var></code></tableterm>
          <tableterm><code>-N<var>name</var></code></tableterm>
          <item>
            <para>Assign symbolic <var>name</var> to the entry. For <option>-n</option>, <var>name</var> must be new (no previous assignment). For <option>-N</option>, overwrite any previous assignment.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-s<var>state</var></code></tableterm>
          <item>
            <para>See <xref><xrefnodename>Misc common options</xrefnodename></xref>.  Set the state.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-t-<var>text</var></code></tableterm>
          <tableterm><code>-t<var>file-name</var></code></tableterm>
          <item>
            <para>See <xref><xrefnodename>Description option</xrefnodename></xref>.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-T</code></tableterm>
          <item>
            <para>Set the RCS file's modification time to the new revision's time if the former precedes the latter and there is a new revision; preserve the RCS file's modification time otherwise.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-w<var>who</var></code></tableterm>
          <item>
            <para>Use <var>who</var> as the author.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-V</code></tableterm>
          <tableterm><code>-V<var>n</var></code></tableterm>
          <tableterm><code>-x<var>suff</var></code></tableterm>
          <item>
            <para>See <xref><xrefnodename>Misc common options</xrefnodename></xref>.</para>
          </item>
        </tableitem>
      </table>
    </section>
  </node>
  <node>
    <nodename>co</nodename>
    <nodenext>ident</nodenext>
    <nodeprev>ci</nodeprev>
    <nodeup>Usage</nodeup>
    <section>
      <title>Invoking <b>co</b></title>
      <para><indexterm index="cp"><b>co</b> invocation</indexterm><indexterm index="cp">invocation, <b>co</b></indexterm></para>
      <example xml:space="preserve">co [options] file ...</example>
      <para role="continues">The <b>co</b> command retrieves a revision from the RCS file, writing a new working file.  This operation is also known as &ldquo;checkout&rdquo;.</para>
      <table>
        <tableitem>
          <tableterm><code>-f[<var>rev</var>]</code></tableterm>
          <item>
            <para>Force overwrite of working file.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-I[<var>rev</var>]</code></tableterm>
          <tableterm><code>-q[<var>rev</var>]</code></tableterm>
          <item>
            <para>See <xref><xrefnodename>Misc common options</xrefnodename></xref>.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-p[<var>rev</var>]</code></tableterm>
          <item>
            <para>Write to stdout instead of the working file.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-r[<var>rev</var>]</code></tableterm>
          <item>
            <para>Normal checkout.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-l[<var>rev</var>]</code></tableterm>
          <item>
            <para>Like <option>-r</option>, but also lock.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-u[<var>rev</var>]</code></tableterm>
          <item>
            <para>Like <option>-l</option>, but unlock.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-M[<var>rev</var>]</code></tableterm>
          <item>
            <para>Reset working file mtime (relevant for <option>-l</option>, <option>-u</option>).</para>
          </item>
        </tableitem>
      </table>
      <para role="continues">Multiple flags in <code>-{fIlMpqru}</code> may be given, except for <option>-r</option>, <option>-l</option>, <option>-u</option>, which are mutually exclusive. See <xref><xrefnodename>Revision options</xrefnodename></xref>.</para>
      <table>
        <tableitem>
          <tableterm><code>-k<var>subst</var></code></tableterm>
          <item>
            <para>See <xref><xrefnodename>Substitution mode option</xrefnodename></xref>.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-d<var>date</var></code></tableterm>
          <tableterm><code>-z<var>zone</var></code></tableterm>
          <item>
            <para>See <xref><xrefnodename>Date option</xrefnodename></xref>. Select latest before or on <var>date</var>.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-j<var>joins</var></code></tableterm>
          <item>
            <para>Merge using <var>joins</var>, a list of <code><var>rev</var>:<var>rev</var></code> pairs. <strong>NB</strong>: This option is obsolete (see <xref><xrefnodename>rcsmerge</xrefnodename></xref>).</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-s<var>state</var></code></tableterm>
          <item>
            <para>See <xref><xrefnodename>Misc common options</xrefnodename></xref>.  Select matching state.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-S</code></tableterm>
          <item>
            <para>Enable "self-same" mode. In this mode, the owner of a lock is unimportant, just that it exists. Effectively, this prevents you from checking out the same revision twice.</para>
            <example xml:space="preserve">$ whoami
ttn

$ co -l -f z
RCS/z,v  --&gt;  z
revision 1.1 (locked)
done

$ co -S -l -f z
RCS/z,v  --&gt;  z
co: RCS/z,v: Revision 1.1 is already locked by ttn.</example>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-T</code></tableterm>
          <item>
            <para>Preserve the modification time on the RCS file even if it changes because a lock is added or removed.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-w<var>who</var></code></tableterm>
          <item>
            <para>Select matching login <var>who</var>.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-V</code></tableterm>
          <tableterm><code>-V<var>n</var></code></tableterm>
          <tableterm><code>-x<var>suff</var></code></tableterm>
          <item>
            <para>See <xref><xrefnodename>Misc common options</xrefnodename></xref>.</para>
          </item>
        </tableitem>
      </table>
    </section>
  </node>
  <node>
    <nodename>ident</nodename>
    <nodenext>merge</nodenext>
    <nodeprev>co</nodeprev>
    <nodeup>Usage</nodeup>
    <section>
      <title>Invoking <b>ident</b></title>
      <para><indexterm index="cp"><b>ident</b> invocation</indexterm><indexterm index="cp">invocation, <b>ident</b></indexterm></para>
      <example xml:space="preserve">ident [options] [file ...]</example>
      <para role="continues">If no <var>file</var> is specified, scan standard input. The <b>ident</b> command scans its input for keywords (see <xref><xrefnodename>Concepts</xrefnodename></xref>), displaying to standard output what it finds.</para>
      <table>
        <tableitem>
          <tableterm><code>-q</code></tableterm>
          <item>
            <para>Normally, if no patterns are found for a file, <b>ident</b> emits a warning.  This option suppresses the warning.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-V</code></tableterm>
          <item>
            <para>See <xref><xrefnodename>Misc common options</xrefnodename></xref>.  Note that <option>-V<var>n</var></option> is <emph>not</emph> a valid option for <b>ident</b>, in contrast to most other RCS commands.</para>
          </item>
        </tableitem>
      </table>
      <para>In addition to the normal keyword pattern, for Subversion 1.2 (and later) compatability<footnote><para>The <dfn>fixed-length keyword syntax</dfn> is described in detail in <uref><urefurl>http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.special.keywords</urefurl><urefreplacement>Version Control with Subversion</urefreplacement></uref>, chapter &ldquo;Advanced Topics&rdquo;, section &ldquo;Keyword Substitution&rdquo;.</para></footnote>, <b>ident</b> also recognizes patterns having one of the forms:</para>
      <example xml:space="preserve">$<var>keyword</var>:: <var>text</var> $
;; two colons and space after keyword
;; space before ending $

$<var>keyword</var>:: <var>text</var>#$
;; two colons and space after keyword
;; hash before ending $</example>
    </section>
  </node>
  <node>
    <nodename>merge</nodename>
    <nodenext>rcs</nodenext>
    <nodeprev>ident</nodeprev>
    <nodeup>Usage</nodeup>
    <section>
      <title>Invoking <b>merge</b></title>
      <para><indexterm index="cp"><b>merge</b> invocation</indexterm><indexterm index="cp">invocation, <b>merge</b></indexterm></para>
      <example xml:space="preserve">merge [options] receiving-sibling parent other-sibling</example>
      <para role="continues">The <b>merge</b> command combines the differences between a the parent and the other sibling, and the differences between the parent and the receiving sibling.  It writes the result to the receiving sibling.</para>
      <table>
        <tableitem>
          <tableterm><code>-A</code></tableterm>
          <tableterm><code>-E</code></tableterm>
          <tableterm><code>-e</code></tableterm>
          <item>
            <para>Use <command>diff3</command> <option>-A</option>, <option>-E</option> (default), or <option>-e</option>, respectively.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-p</code></tableterm>
          <item>
            <para>Write to stdout instead of overwriting <var>receiving-sibling</var>.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-q</code></tableterm>
          <item>
            <para>See <xref><xrefnodename>Misc common options</xrefnodename></xref>.  Suppress conflict warnings.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-L<var>label</var></code></tableterm>
          <item>
            <para>(up to three times) Specify the conflict labels for <var>receiving-sibling</var>, <var>parent</var> and <var>other-sibling</var>, respectively.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-V</code></tableterm>
          <item>
            <para>See <xref><xrefnodename>Misc common options</xrefnodename></xref>.  Note that <option>-V<var>n</var></option> is <emph>not</emph> a valid option for <b>merge</b>, in contrast to most other RCS commands.</para>
          </item>
        </tableitem>
      </table>
    </section>
  </node>
  <node>
    <nodename>rcs</nodename>
    <nodenext>rcsclean</nodenext>
    <nodeprev>merge</nodeprev>
    <nodeup>Usage</nodeup>
    <section>
      <title>Invoking <b>rcs</b></title>
      <para><indexterm index="cp"><b>rcs</b> invocation</indexterm><indexterm index="cp">invocation, <b>rcs</b></indexterm></para>
      <example xml:space="preserve">rcs [options] file ...</example>
      <para role="continues">The <b>rcs</b> command performs various administrative operations on the RCS file, depending on the options given.</para>
      <table>
        <tableitem>
          <tableterm><code>-i</code></tableterm>
          <item>
            <para>Create and initialize a new RCS file.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-L</code></tableterm>
          <item>
            <para>Set strict locking.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-U</code></tableterm>
          <item>
            <para>Set non-strict locking.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-M</code></tableterm>
          <item>
            <para>Don't send mail when breaking someone else's lock.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-T</code></tableterm>
          <item>
            <para>Preserve the modification time on the RCS file unless a revision is removed.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-I</code></tableterm>
          <tableterm><code>-q</code></tableterm>
          <item>
            <para>See <xref><xrefnodename>Misc common options</xrefnodename></xref>.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-a<var>logins</var></code></tableterm>
          <item>
            <para>Append <var>logins</var> (comma-separated list of usernames) to access-list.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-e[<var>logins</var>]</code></tableterm>
          <item>
            <para>Erase <var>logins</var> (comma-separated list of usernames) from access-list. If <var>logins</var> is omitted, clear the access-list.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-A<var>file-name</var></code></tableterm>
          <item>
            <para>Append access-list of <var>file-name</var> to current access-list.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-b[<var>rev</var>]</code></tableterm>
          <item>
            <para>Set default branch to that of <var>rev</var> or highest branch on trunk if <var>rev</var> is omitted.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-l[<var>rev</var>]</code></tableterm>
          <item>
            <para>Lock a revision.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-u[<var>rev</var>]</code></tableterm>
          <item>
            <para>Unlock a revision.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-c<var>string</var></code></tableterm>
          <item>
            <para>Set comment leader to <var>string</var>. <strong>NB</strong>: Don't use; obsolete.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-k<var>subst</var></code></tableterm>
          <item>
            <para>See <xref><xrefnodename>Substitution mode option</xrefnodename></xref>.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-m<var>rev</var>:[<var>msg</var>]</code></tableterm>
          <item>
            <para>Replace log message with <var>msg</var>.  See <xref><xrefnodename>Log message option</xrefnodename></xref>.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-n<var>name</var>[:[<var>rev</var>]]</code></tableterm>
          <item>
            <para>If <var>:rev</var> is omitted, delete symbolic <var>name</var>. Otherwise, associate <var>name</var> with <var>rev</var>; <var>name</var> must be new.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-N<var>name</var>[:[<var>rev</var>]]</code></tableterm>
          <item>
            <para>Like <option>-n</option>, but overwrite any previous assignment.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-o<var>range</var></code></tableterm>
          <item>
            <para>Outdate revisions in <var>range</var>:</para>
            <table>
              <tableitem>
                <tableterm><var>rev</var></tableterm>
                <item>
                  <para>single revision</para>
                </item>
              </tableitem>
              <tableitem>
                <tableterm><var>br</var></tableterm>
                <item>
                  <para>latest revision on branch <var>br</var></para>
                </item>
              </tableitem>
              <tableitem>
                <tableterm><code><var>rev1</var>:<var>rev2</var></code></tableterm>
                <item>
                  <para><var>rev1</var> to <var>rev2</var> on same branch, inclusive</para>
                </item>
              </tableitem>
              <tableitem>
                <tableterm><code>:<var>rev</var></code></tableterm>
                <item>
                  <para>beginning of branch to <var>rev</var></para>
                </item>
              </tableitem>
              <tableitem>
                <tableterm><code><var>rev</var>:</code></tableterm>
                <item>
                  <para><var>rev</var> to end of branch</para>
                </item>
              </tableitem>
            </table>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-s<var>state</var>[:<var>rev</var>]</code></tableterm>
          <item>
            <para>See <xref><xrefnodename>Misc common options</xrefnodename></xref>.  Set state.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-t-<var>text</var></code></tableterm>
          <tableterm><code>-t<var>file-name</var></code></tableterm>
          <item>
            <para>See <xref><xrefnodename>Description option</xrefnodename></xref>.  Replace description.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-V</code></tableterm>
          <tableterm><code>-V<var>n</var></code></tableterm>
          <tableterm><code>-x<var>suff</var></code></tableterm>
          <item>
            <para>See <xref><xrefnodename>Misc common options</xrefnodename></xref>.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-z<var>zone</var></code></tableterm>
          <item>
            <para>No effect; included for compatibility with other commands.</para>
          </item>
        </tableitem>
      </table>
    </section>
  </node>
  <node>
    <nodename>rcsclean</nodename>
    <nodenext>rcsdiff</nodenext>
    <nodeprev>rcs</nodeprev>
    <nodeup>Usage</nodeup>
    <section>
      <title>Invoking <b>rcsclean</b></title>
      <para><indexterm index="cp"><b>rcsclean</b> invocation</indexterm><indexterm index="cp">invocation, <b>rcsclean</b></indexterm></para>
      <example xml:space="preserve">rcsclean [options] [file ...]</example>
      <para role="continues">The <b>rcsclean</b> command removes working files that are not being worked on.  If given <option>-u</option>, it also unlocks and removes working files that are being worked on but have not changed. If no <var>file</var> is specified, operate on all the working files in the current directory.</para>
      <table>
        <tableitem>
          <tableterm><code>-r[<var>rev</var>]</code></tableterm>
          <item>
            <para>Specify revision.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-u[<var>rev</var>]</code></tableterm>
          <item>
            <para>Unlock if is locked and no differences found.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-n[<var>rev</var>]</code></tableterm>
          <item>
            <para>Dry run (no act, don't operate).</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-q[<var>rev</var>]</code></tableterm>
          <item>
            <para>See <xref><xrefnodename>Misc common options</xrefnodename></xref>.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-k<var>subst</var></code></tableterm>
          <item>
            <para>See <xref><xrefnodename>Substitution mode option</xrefnodename></xref>.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-T</code></tableterm>
          <item>
            <para>Preserve the modification time on the RCS file even it changes because a lock is removed.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-V</code></tableterm>
          <tableterm><code>-V<var>n</var></code></tableterm>
          <tableterm><code>-x<var>suff</var></code></tableterm>
          <item>
            <para>See <xref><xrefnodename>Misc common options</xrefnodename></xref>.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-z<var>zone</var></code></tableterm>
          <item>
            <para>See <xref><xrefnodename>Date option</xrefnodename></xref>.</para>
          </item>
        </tableitem>
      </table>
    </section>
  </node>
  <node>
    <nodename>rcsdiff</nodename>
    <nodenext>rcsmerge</nodenext>
    <nodeprev>rcsclean</nodeprev>
    <nodeup>Usage</nodeup>
    <section>
      <title>Invoking <b>rcsdiff</b></title>
      <para><indexterm index="cp"><b>rcsdiff</b> invocation</indexterm><indexterm index="cp">invocation, <b>rcsdiff</b></indexterm></para>
      <example xml:space="preserve">rcsdiff [options] file ...</example>
      <para role="continues">The <b>rcsdiff</b> command runs <b>diff</b> to compare two revisions in an RCS file. See <xref><xrefnodename>Invoking diff</xrefnodename><xrefinfofile>diff</xrefinfofile><xrefprintedname>The GNU Diffutils Manaual</xrefprintedname></xref>.</para>
      <table>
        <tableitem>
          <tableterm><code>-r<var>rev</var></code></tableterm>
          <item>
            <para>(zero, one, or two times) Name a revision. If given two revisions (<samp>-r<var>rev1</var> -r<var>rev2</var></samp>), compare those revisions. If given only one revision (<samp>-r<var>rev</var></samp>), compare the working file with it. If given no revisions, compare the working file with the latest revision on the default branch.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-k<var>subst</var></code></tableterm>
          <item>
            <para>See <xref><xrefnodename>Substitution mode option</xrefnodename></xref>.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-q</code></tableterm>
          <item>
            <para>See <xref><xrefnodename>Misc common options</xrefnodename></xref>.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-V</code></tableterm>
          <tableterm><code>-V<var>n</var></code></tableterm>
          <tableterm><code>-x<var>suff</var></code></tableterm>
          <item>
            <para>See <xref><xrefnodename>Misc common options</xrefnodename></xref>.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-z<var>zone</var></code></tableterm>
          <item>
            <para>See <xref><xrefnodename>Date option</xrefnodename></xref>.</para>
          </item>
        </tableitem>
      </table>
      <para role="continues">Additionally, the following options (and their argument, if any) are passed to the underlying <b>diff</b> command:</para>
      <example xml:space="preserve">-0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -B, -C, -D, -F, -H, -I,
-L, -U, -W, -a, -b, -c, -d, -e, -f, -h, -i, -n, -p, -t, -u, -w, -y,
long options (that start with "--")</example>
      <para role="continues">(Not all of these options are meaningful.)</para>
    </section>
  </node>
  <node>
    <nodename>rcsmerge</nodename>
    <nodenext>rlog</nodenext>
    <nodeprev>rcsdiff</nodeprev>
    <nodeup>Usage</nodeup>
    <section>
      <title>Invoking <b>rcsmerge</b></title>
      <para><indexterm index="cp"><b>rcsmerge</b> invocation</indexterm><indexterm index="cp">invocation, <b>rcsmerge</b></indexterm></para>
      <example xml:space="preserve">rcsmerge [options] file</example>
      <para role="continues">The <b>rcsmerge</b> command incorporates the changes between two revisions of an RCS file into the corresponding working file.</para>
      <table>
        <tableitem>
          <tableterm><code>-p[<var>rev</var>]</code></tableterm>
          <item>
            <para>Write to stdout instead of overwriting the working file.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-q[<var>rev</var>]</code></tableterm>
          <item>
            <para>See <xref><xrefnodename>Misc common options</xrefnodename></xref>.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-r<var>rev</var></code></tableterm>
          <item>
            <para>(one or two times) specify a revision.</para>
          </item>
        </tableitem>
      </table>
      <para role="continues">One or two revisions must be specified (using <option>-p</option>, <option>-q</option>, <option>-r</option>). If only one is specified, the second revision defaults to the latest revision on the default branch.</para>
      <table>
        <tableitem>
          <tableterm><code>-k<var>subst</var></code></tableterm>
          <item>
            <para>See <xref><xrefnodename>Substitution mode option</xrefnodename></xref>.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-V</code></tableterm>
          <tableterm><code>-V<var>n</var></code></tableterm>
          <tableterm><code>-x<var>suff</var></code></tableterm>
          <item>
            <para>See <xref><xrefnodename>Misc common options</xrefnodename></xref>.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-z<var>zone</var></code></tableterm>
          <item>
            <para>See <xref><xrefnodename>Date option</xrefnodename></xref>.</para>
          </item>
        </tableitem>
      </table>
    </section>
  </node>
  <node>
    <nodename>rlog</nodename>
    <nodeprev>rcsmerge</nodeprev>
    <nodeup>Usage</nodeup>
    <section>
      <title>Invoking <b>rlog</b></title>
      <para><indexterm index="cp"><b>rlog</b> invocation</indexterm><indexterm index="cp">invocation, <b>rlog</b></indexterm></para>
      <example xml:space="preserve">rlog [options] file ...</example>
      <para role="continues">The <b>rlog</b> command displays information about RCS files.</para>
      <table>
        <tableitem>
          <tableterm><code>-L</code></tableterm>
          <item>
            <para>Ignore RCS files with no locks set.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-R</code></tableterm>
          <item>
            <para>Print only the name of the RCS file.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-h</code></tableterm>
          <item>
            <para>Print only the &ldquo;header&rdquo; information.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-t</code></tableterm>
          <item>
            <para>Like <option>-h</option>, but also include the description.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-N</code></tableterm>
          <item>
            <para>Omit symbolic names.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-b</code></tableterm>
          <item>
            <para>Select the default branch.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-d<var>dates</var></code></tableterm>
          <item>
            <para>See <xref><xrefnodename>Date option</xrefnodename></xref>.  Select revisions based on timestamp, in the range <var>dates</var>, with spec:</para>
            <table>
              <tableitem>
                <tableterm><var>d</var></tableterm>
                <item>
                  <para>single revision <var>d</var> or earlier</para>
                </item>
              </tableitem>
              <tableitem>
                <tableterm><code><var>d1</var>&lt;<var>d2</var></code></tableterm>
                <tableterm><code><var>d2</var>&gt;<var>d1</var></code></tableterm>
                <item>
                  <para>between <var>d1</var> and <var>d2</var>, exclusive</para>
                </item>
              </tableitem>
              <tableitem>
                <tableterm><code>&lt;<var>d</var></code></tableterm>
                <tableterm><code><var>d</var>&gt;</code></tableterm>
                <item>
                  <para>before <var>d</var></para>
                </item>
              </tableitem>
              <tableitem>
                <tableterm><code>&gt;<var>d</var></code></tableterm>
                <tableterm><code><var>d</var>&lt;</code></tableterm>
                <item>
                  <para>after <var>d</var></para>
                </item>
              </tableitem>
            </table>
            <para>Instead of <samp>&lt;</samp> or <samp>&gt;</samp>, you can use <samp>&lt;=</samp> or <samp>&gt;=</samp>, respectively, to specify inclusive ranges. <var>dates</var> may also be a list of semicolon-separated specs.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-l[<var>who</var>]</code></tableterm>
          <item>
            <para>Select revisions locked by <var>who</var> (comma-separated list of usernames) only, or by anyone if <var>who</var> is omitted.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-r[<var>revs</var>]</code></tableterm>
          <item>
            <para>Select revisions in <var>revs</var>, a comma-separated list of range specs, one of: <var>rev</var>, <code><var>rev</var>:</code>, <code>:<var>rev</var></code>, <code><var>rev1</var>:<var>rev2</var></code>.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-s<var>states</var></code></tableterm>
          <item>
            <para>See <xref><xrefnodename>Misc common options</xrefnodename></xref>. <var>states</var> can also be a comma-separated list of states. Select revisions with specified state(s).</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-w[<var>who</var>]</code></tableterm>
          <item>
            <para>Select revisions checked in by <var>who</var> (comma-separated list of usernames), or by the user if <var>who</var> is omitted.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-V</code></tableterm>
          <tableterm><code>-V<var>n</var></code></tableterm>
          <tableterm><code>-x<var>suff</var></code></tableterm>
          <item>
            <para>See <xref><xrefnodename>Misc common options</xrefnodename></xref>.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-z<var>zone</var></code></tableterm>
          <item>
            <para>See <xref><xrefnodename>Date option</xrefnodename></xref>.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><code>-q</code></tableterm>
          <item>
            <para>No effect, included for consistency with other commands.</para>
          </item>
        </tableitem>
      </table>
<!--  -->
    </section>
  </node>
  <node>
    <nodename>Still missing</nodename>
    <nodenext>Reporting bugs</nodenext>
    <nodeprev>Usage</nodeprev>
    <nodeup>Top</nodeup>
    <chapter>
      <title>Still missing</title>
      <para><indexterm index="cp">features, still missing</indexterm> RCS is still missing some features.  The following is an unordered list of &ldquo;to-do musings&rdquo; kept by the RCS maintainers.  If you would like to hack on an item, See <xref><xrefnodename>Reporting bugs</xrefnodename></xref>.</para>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>Add an option to <b>rcsmerge</b> so that it can use an arbitrary program to do the 3-way merge, instead of the default <b>merge</b>. Likewise for <b>rcsdiff</b> and <b>diff</b>.  It should be possible to pass arbitrary options to these programs, and to the subsidiary <b>co</b> invocations.</para>
        </item>
        <item>
          <para>Add format options for finer control over the output of <b>ident</b> and <b>rlog</b>.  E.g. there should be an easy way for rlog to output lines like <samp>src/main.c 2.4 wft</samp>, one for each locked revision.  <b>rlog</b> options should have three orthogonal types: selecting files, selecting revisions, and selecting rlog format.</para>
        </item>
        <item>
          <para>Add format options for finer control over the output of keyword strings.  E.g. there should be some way to prepend <samp>@(#)</samp>, and there should be some way to change <samp>$</samp> to some other character to disable further substitution.  These options should make the resulting files uneditable, like <samp>-kv</samp>.</para>
        </item>
        <item>
          <para>Add long options, e.g. <option>--keyword-substitution</option>. Unfortunately RCS's option syntax is incompatible with getopt.  Perhaps the best way is to overload <b>rcs</b>, e.g., <samp>rcs diff --keyword-substitution=old file</samp> instead of <samp>rcsdiff -ko file</samp>.</para>
        </item>
        <item>
          <para><command>rlog -rM:N</command> should work even if <var>M</var> and <var>N</var> have different numbers of fields, so long as <var>M</var> is an ancestor of <var>N</var> or vice versa.</para>
        </item>
        <item>
          <para><b>rcs</b> should evaluate options in order; this allows <command>rcs -oS -nS</command>.</para>
        </item>
        <item>
          <para>Be able to redo your most recent checkin with minor changes.</para>
        </item>
        <item>
          <para><command>co -u</command> shouldn't complain about a <samp>+w</samp> working file if contents don't change.</para>
        </item>
        <item>
          <para>Add a <samp>-</samp> option to take the list of file names from standard input.  Perhaps the file names should be null-terminated, not newline-terminated, so that those that contain newlines are handled properly.</para>
        </item>
        <item>
          <para>Permit multiple option&ndash;filename pairs, e.g., <command>co -r1.4 a -r1.5 b</command>.</para>
        </item>
        <item>
          <para>Add an option to break a symbolic link to an RCS file, instead of breaking the hard link that it points to.</para>
        </item>
        <item>
          <para>Add ways to specify the earliest revision, the most recent revision, the earliest or latest revision on a particular branch, and the parent or child of some other revision.</para>
        </item>
        <item>
          <para>If a user has multiple locks, perhaps <b>ci</b> should fall back on the method of <command>ci -k</command> to figure out which revision to use.</para>
        </item>
        <item>
          <para>Add an option to <b>rcsclean</b> to clean directories recursively.</para>
        </item>
        <item>
          <para>Write an <b>rcsck</b> program that repairs corrupted RCS files, much as fsck repairs corrupted file systems.  For example, it should remove stale lock files.</para>
        </item>
        <item>
          <para>Update the date parser to use the more modern <file>getdate.y</file> by Bellovin, Salz, and Berets, or the even more modern <code>getdate</code> by Moraes.  None of these getdate implementations are as robust as RCS's old warhorse in avoiding problems like arithmetic overflow, so they'll have to be fixed first.  (Perhaps we can use gnulib module <code>getdate</code>.)</para>
        </item>
        <item>
          <para>Break up the code into a library so that it's easier to write new programs that manipulate RCS files, and so that useless code is removed from the existing programs.  For example, the <b>rcs</b> command contains unnecessary keyword substitution baggage, and the <b>merge</b> command can be greatly pruned.</para>
        </item>
        <item>
          <para>Make it easier to use your favorite text editor to edit log messages, etc., instead of having to type them in irretrievably at the terminal.</para>
        </item>
        <item>
          <para>Let the user specify a search path for default branches, e.g., to use <var>L</var> as the default branch if it works, and <var>M</var> otherwise.  Let the user require that at least one entry in the search path works.  Let the user say that later entries in the search path are read only, i.e. one cannot check in changes to them. This should be an option settable by <samp>RCSINIT</samp>.</para>
        </item>
        <item>
          <para>Add a way for a user to see which revisions affected which lines.</para>
        </item>
        <item>
          <para>Have <command>rlog -nN F</command> print just the revision number that <var>N</var> translates to.  E.g., <command>rlog -nB. F</command> would print the highest revision on the branch B.  Use this to add an option <option>-bB</option> to rcsbranch, to freeze the named branch.  This should interact well with default branches.</para>
        </item>
        <item>
          <para>Add a <b>co</b> option that prints the revision number before each line, as SCCS's <command>get -m</command> does. [I implemented this for Emacs 22 as a subroutine of <code>vc-annotate</code>, q.v.  &mdash;ttn]</para>
        </item>
      </itemize>
<!--  -->
    </chapter>
  </node>
  <node>
    <nodename>Reporting bugs</nodename>
    <nodenext>GNU FDL</nodenext>
    <nodeprev>Still missing</nodeprev>
    <nodeup>Top</nodeup>
    <chapter>
      <title>Reporting bugs</title>
      <para><indexterm index="cp">bug reporting</indexterm><indexterm index="cp">problems</indexterm><indexterm index="cp">reporting bugs</indexterm> To report bugs or suggest enhancements for GNU RCS, please visit its homepage (<uref><urefurl>http://www.gnu.org/software/rcs/</urefurl></uref>) to find directions on how to &ldquo;file a bug report&rdquo; online, or send electronic mail to <email><emailaddress>help-rcs@gnu.org</emailaddress></email>. (If you use the web interface, you don't need to also send email, since that is done automatically.)</para>
      <para><indexterm index="cp">checklist for bug reports</indexterm>For bug reports, please include enough information for the maintainers to reproduce the problem.  Generally speaking, that means:</para>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>The RCS version, command(s) and manual section(s) involved.</para>
        </item>
        <item>
          <para>Hardware and operating system names and versions.</para>
        </item>
        <item>
          <para>The contents of any input files necessary to reproduce the bug.</para>
        </item>
        <item>
          <para>The expected behavior and/or output.</para>
        </item>
        <item>
          <para>A description of the problem and samples of any erroneous output.</para>
        </item>
        <item>
          <para>Options you gave to <command>configure</command> other than specifying       installation directories.</para>
        </item>
        <item>
          <para>Anything else that you think would be helpful.</para>
        </item>
      </itemize>
      <para>When in doubt whether something is needed or not, include it.  It's better to include too much than to leave out something important.</para>
      <para><indexterm index="cp">patches, contributing</indexterm>Patches are welcome; if possible, please make them with <samp>git format-patch</samp> and include <file>ChangeLog</file> entries (see <xref><xrefnodename>Change Log</xrefnodename><xrefinfofile>emacs</xrefinfofile><xrefprintedname>The GNU Emacs Manual</xrefprintedname></xref>).  Please follow the existing coding style.</para>
<!--  -->
    </chapter>
  </node>
  <node>
    <nodename>GNU FDL</nodename>
    <nodenext>Index</nodenext>
    <nodeprev>Reporting bugs</nodeprev>
    <nodeup>Top</nodeup>
    <appendix>
      <title>GNU Free Documentation License</title>
<!-- The GNU Free Documentation License. -->
      <center>
        <para>Version 1.3, 3 November 2008</para>
      </center>
<!-- This file is intended to be included within another document, -->
<!-- hence no sectioning command or @node. -->
      <display xml:space="preserve">Copyright &copyright; 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
<uref><urefurl>http://fsf.org/</urefurl></uref>

Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.</display>
      <enumerate first="0">
        <item>
          <para>PREAMBLE</para>
          <para>The purpose of this License is to make a manual, textbook, or other functional and useful document <dfn>free</dfn> in the sense of freedom: to assure everyone the effective freedom to copy and redistribute it, with or without modifying it, either commercially or noncommercially. Secondarily, this License preserves for the author and publisher a way to get credit for their work, while not being considered responsible for modifications made by others.</para>
          <para>This License is a kind of &ldquo;copyleft&rdquo;, which means that derivative works of the document must themselves be free in the same sense.  It complements the GNU General Public License, which is a copyleft license designed for free software.</para>
          <para>We have designed this License in order to use it for manuals for free software, because free software needs free documentation: a free program should come with manuals providing the same freedoms that the software does.  But this License is not limited to software manuals; it can be used for any textual work, regardless of subject matter or whether it is published as a printed book.  We recommend this License principally for works whose purpose is instruction or reference.</para>
        </item>
        <item>
          <para>APPLICABILITY AND DEFINITIONS</para>
          <para>This License applies to any manual or other work, in any medium, that contains a notice placed by the copyright holder saying it can be distributed under the terms of this License.  Such a notice grants a world-wide, royalty-free license, unlimited in duration, to use that work under the conditions stated herein.  The &ldquo;Document&rdquo;, below, refers to any such manual or work.  Any member of the public is a licensee, and is addressed as &ldquo;you&rdquo;.  You accept the license if you copy, modify or distribute the work in a way requiring permission under copyright law.</para>
          <para>A &ldquo;Modified Version&rdquo; of the Document means any work containing the Document or a portion of it, either copied verbatim, or with modifications and/or translated into another language.</para>
          <para>A &ldquo;Secondary Section&rdquo; is a named appendix or a front-matter section of the Document that deals exclusively with the relationship of the publishers or authors of the Document to the Document's overall subject (or to related matters) and contains nothing that could fall directly within that overall subject.  (Thus, if the Document is in part a textbook of mathematics, a Secondary Section may not explain any mathematics.)  The relationship could be a matter of historical connection with the subject or with related matters, or of legal, commercial, philosophical, ethical or political position regarding them.</para>
          <para>The &ldquo;Invariant Sections&rdquo; are certain Secondary Sections whose titles are designated, as being those of Invariant Sections, in the notice that says that the Document is released under this License.  If a section does not fit the above definition of Secondary then it is not allowed to be designated as Invariant.  The Document may contain zero Invariant Sections.  If the Document does not identify any Invariant Sections then there are none.</para>
          <para>The &ldquo;Cover Texts&rdquo; are certain short passages of text that are listed, as Front-Cover Texts or Back-Cover Texts, in the notice that says that the Document is released under this License.  A Front-Cover Text may be at most 5 words, and a Back-Cover Text may be at most 25 words.</para>
          <para>A &ldquo;Transparent&rdquo; copy of the Document means a machine-readable copy, represented in a format whose specification is available to the general public, that is suitable for revising the document straightforwardly with generic text editors or (for images composed of pixels) generic paint programs or (for drawings) some widely available drawing editor, and that is suitable for input to text formatters or for automatic translation to a variety of formats suitable for input to text formatters.  A copy made in an otherwise Transparent file format whose markup, or absence of markup, has been arranged to thwart or discourage subsequent modification by readers is not Transparent. An image format is not Transparent if used for any substantial amount of text.  A copy that is not &ldquo;Transparent&rdquo; is called &ldquo;Opaque&rdquo;.</para>
          <para>Examples of suitable formats for Transparent copies include plain ASCII without markup, Texinfo input format, La&tex; input format, SGML or XML using a publicly available DTD, and standard-conforming simple HTML, PostScript or PDF designed for human modification.  Examples of transparent image formats include PNG, XCF and JPG.  Opaque formats include proprietary formats that can be read and edited only by proprietary word processors, SGML or XML for which the DTD and/or processing tools are not generally available, and the machine-generated HTML, PostScript or PDF produced by some word processors for output purposes only.</para>
          <para>The &ldquo;Title Page&rdquo; means, for a printed book, the title page itself, plus such following pages as are needed to hold, legibly, the material this License requires to appear in the title page.  For works in formats which do not have any title page as such, &ldquo;Title Page&rdquo; means the text near the most prominent appearance of the work's title, preceding the beginning of the body of the text.</para>
          <para>The &ldquo;publisher&rdquo; means any person or entity that distributes copies of the Document to the public.</para>
          <para>A section &ldquo;Entitled XYZ&rdquo; means a named subunit of the Document whose title either is precisely XYZ or contains XYZ in parentheses following text that translates XYZ in another language.  (Here XYZ stands for a specific section name mentioned below, such as &ldquo;Acknowledgements&rdquo;, &ldquo;Dedications&rdquo;, &ldquo;Endorsements&rdquo;, or &ldquo;History&rdquo;.)  To &ldquo;Preserve the Title&rdquo; of such a section when you modify the Document means that it remains a section &ldquo;Entitled XYZ&rdquo; according to this definition.</para>
          <para>The Document may include Warranty Disclaimers next to the notice which states that this License applies to the Document.  These Warranty Disclaimers are considered to be included by reference in this License, but only as regards disclaiming warranties: any other implication that these Warranty Disclaimers may have is void and has no effect on the meaning of this License.</para>
        </item>
        <item>
          <para>VERBATIM COPYING</para>
          <para>You may copy and distribute the Document in any medium, either commercially or noncommercially, provided that this License, the copyright notices, and the license notice saying this License applies to the Document are reproduced in all copies, and that you add no other conditions whatsoever to those of this License.  You may not use technical measures to obstruct or control the reading or further copying of the copies you make or distribute.  However, you may accept compensation in exchange for copies.  If you distribute a large enough number of copies you must also follow the conditions in section 3.</para>
          <para>You may also lend copies, under the same conditions stated above, and you may publicly display copies.</para>
        </item>
        <item>
          <para>COPYING IN QUANTITY</para>
          <para>If you publish printed copies (or copies in media that commonly have printed covers) of the Document, numbering more than 100, and the Document's license notice requires Cover Texts, you must enclose the copies in covers that carry, clearly and legibly, all these Cover Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on the back cover.  Both covers must also clearly and legibly identify you as the publisher of these copies.  The front cover must present the full title with all words of the title equally prominent and visible.  You may add other material on the covers in addition. Copying with changes limited to the covers, as long as they preserve the title of the Document and satisfy these conditions, can be treated as verbatim copying in other respects.</para>
          <para>If the required texts for either cover are too voluminous to fit legibly, you should put the first ones listed (as many as fit reasonably) on the actual cover, and continue the rest onto adjacent pages.</para>
          <para>If you publish or distribute Opaque copies of the Document numbering more than 100, you must either include a machine-readable Transparent copy along with each Opaque copy, or state in or with each Opaque copy a computer-network location from which the general network-using public has access to download using public-standard network protocols a complete Transparent copy of the Document, free of added material. If you use the latter option, you must take reasonably prudent steps, when you begin distribution of Opaque copies in quantity, to ensure that this Transparent copy will remain thus accessible at the stated location until at least one year after the last time you distribute an Opaque copy (directly or through your agents or retailers) of that edition to the public.</para>
          <para>It is requested, but not required, that you contact the authors of the Document well before redistributing any large number of copies, to give them a chance to provide you with an updated version of the Document.</para>
        </item>
        <item>
          <para>MODIFICATIONS</para>
          <para>You may copy and distribute a Modified Version of the Document under the conditions of sections 2 and 3 above, provided that you release the Modified Version under precisely this License, with the Modified Version filling the role of the Document, thus licensing distribution and modification of the Modified Version to whoever possesses a copy of it.  In addition, you must do these things in the Modified Version:</para>
          <enumerate first="A">
            <item>
              <para>Use in the Title Page (and on the covers, if any) a title distinct from that of the Document, and from those of previous versions (which should, if there were any, be listed in the History section of the Document).  You may use the same title as a previous version if the original publisher of that version gives permission.</para>
            </item>
            <item>
              <para>List on the Title Page, as authors, one or more persons or entities responsible for authorship of the modifications in the Modified Version, together with at least five of the principal authors of the Document (all of its principal authors, if it has fewer than five), unless they release you from this requirement.</para>
            </item>
            <item>
              <para>State on the Title page the name of the publisher of the Modified Version, as the publisher.</para>
            </item>
            <item>
              <para>Preserve all the copyright notices of the Document.</para>
            </item>
            <item>
              <para>Add an appropriate copyright notice for your modifications adjacent to the other copyright notices.</para>
            </item>
            <item>
              <para>Include, immediately after the copyright notices, a license notice giving the public permission to use the Modified Version under the terms of this License, in the form shown in the Addendum below.</para>
            </item>
            <item>
              <para>Preserve in that license notice the full lists of Invariant Sections and required Cover Texts given in the Document's license notice.</para>
            </item>
            <item>
              <para>Include an unaltered copy of this License.</para>
            </item>
            <item>
              <para>Preserve the section Entitled &ldquo;History&rdquo;, Preserve its Title, and add to it an item stating at least the title, year, new authors, and publisher of the Modified Version as given on the Title Page.  If there is no section Entitled &ldquo;History&rdquo; in the Document, create one stating the title, year, authors, and publisher of the Document as given on its Title Page, then add an item describing the Modified Version as stated in the previous sentence.</para>
            </item>
            <item>
              <para>Preserve the network location, if any, given in the Document for public access to a Transparent copy of the Document, and likewise the network locations given in the Document for previous versions it was based on.  These may be placed in the &ldquo;History&rdquo; section. You may omit a network location for a work that was published at least four years before the Document itself, or if the original publisher of the version it refers to gives permission.</para>
            </item>
            <item>
              <para>For any section Entitled &ldquo;Acknowledgements&rdquo; or &ldquo;Dedications&rdquo;, Preserve the Title of the section, and preserve in the section all the substance and tone of each of the contributor acknowledgements and/or dedications given therein.</para>
            </item>
            <item>
              <para>Preserve all the Invariant Sections of the Document, unaltered in their text and in their titles.  Section numbers or the equivalent are not considered part of the section titles.</para>
            </item>
            <item>
              <para>Delete any section Entitled &ldquo;Endorsements&rdquo;.  Such a section may not be included in the Modified Version.</para>
            </item>
            <item>
              <para>Do not retitle any existing section to be Entitled &ldquo;Endorsements&rdquo; or to conflict in title with any Invariant Section.</para>
            </item>
            <item>
              <para>Preserve any Warranty Disclaimers.</para>
            </item>
          </enumerate>
          <para>If the Modified Version includes new front-matter sections or appendices that qualify as Secondary Sections and contain no material copied from the Document, you may at your option designate some or all of these sections as invariant.  To do this, add their titles to the list of Invariant Sections in the Modified Version's license notice. These titles must be distinct from any other section titles.</para>
          <para>You may add a section Entitled &ldquo;Endorsements&rdquo;, provided it contains nothing but endorsements of your Modified Version by various parties&mdash;for example, statements of peer review or that the text has been approved by an organization as the authoritative definition of a standard.</para>
          <para>You may add a passage of up to five words as a Front-Cover Text, and a passage of up to 25 words as a Back-Cover Text, to the end of the list of Cover Texts in the Modified Version.  Only one passage of Front-Cover Text and one of Back-Cover Text may be added by (or through arrangements made by) any one entity.  If the Document already includes a cover text for the same cover, previously added by you or by arrangement made by the same entity you are acting on behalf of, you may not add another; but you may replace the old one, on explicit permission from the previous publisher that added the old one.</para>
          <para>The author(s) and publisher(s) of the Document do not by this License give permission to use their names for publicity for or to assert or imply endorsement of any Modified Version.</para>
        </item>
        <item>
          <para>COMBINING DOCUMENTS</para>
          <para>You may combine the Document with other documents released under this License, under the terms defined in section 4 above for modified versions, provided that you include in the combination all of the Invariant Sections of all of the original documents, unmodified, and list them all as Invariant Sections of your combined work in its license notice, and that you preserve all their Warranty Disclaimers.</para>
          <para>The combined work need only contain one copy of this License, and multiple identical Invariant Sections may be replaced with a single copy.  If there are multiple Invariant Sections with the same name but different contents, make the title of each such section unique by adding at the end of it, in parentheses, the name of the original author or publisher of that section if known, or else a unique number. Make the same adjustment to the section titles in the list of Invariant Sections in the license notice of the combined work.</para>
          <para>In the combination, you must combine any sections Entitled &ldquo;History&rdquo; in the various original documents, forming one section Entitled &ldquo;History&rdquo;; likewise combine any sections Entitled &ldquo;Acknowledgements&rdquo;, and any sections Entitled &ldquo;Dedications&rdquo;.  You must delete all sections Entitled &ldquo;Endorsements.&rdquo;</para>
        </item>
        <item>
          <para>COLLECTIONS OF DOCUMENTS</para>
          <para>You may make a collection consisting of the Document and other documents released under this License, and replace the individual copies of this License in the various documents with a single copy that is included in the collection, provided that you follow the rules of this License for verbatim copying of each of the documents in all other respects.</para>
          <para>You may extract a single document from such a collection, and distribute it individually under this License, provided you insert a copy of this License into the extracted document, and follow this License in all other respects regarding verbatim copying of that document.</para>
        </item>
        <item>
          <para>AGGREGATION WITH INDEPENDENT WORKS</para>
          <para>A compilation of the Document or its derivatives with other separate and independent documents or works, in or on a volume of a storage or distribution medium, is called an &ldquo;aggregate&rdquo; if the copyright resulting from the compilation is not used to limit the legal rights of the compilation's users beyond what the individual works permit. When the Document is included in an aggregate, this License does not apply to the other works in the aggregate which are not themselves derivative works of the Document.</para>
          <para>If the Cover Text requirement of section 3 is applicable to these copies of the Document, then if the Document is less than one half of the entire aggregate, the Document's Cover Texts may be placed on covers that bracket the Document within the aggregate, or the electronic equivalent of covers if the Document is in electronic form. Otherwise they must appear on printed covers that bracket the whole aggregate.</para>
        </item>
        <item>
          <para>TRANSLATION</para>
          <para>Translation is considered a kind of modification, so you may distribute translations of the Document under the terms of section 4. Replacing Invariant Sections with translations requires special permission from their copyright holders, but you may include translations of some or all Invariant Sections in addition to the original versions of these Invariant Sections.  You may include a translation of this License, and all the license notices in the Document, and any Warranty Disclaimers, provided that you also include the original English version of this License and the original versions of those notices and disclaimers.  In case of a disagreement between the translation and the original version of this License or a notice or disclaimer, the original version will prevail.</para>
          <para>If a section in the Document is Entitled &ldquo;Acknowledgements&rdquo;, &ldquo;Dedications&rdquo;, or &ldquo;History&rdquo;, the requirement (section 4) to Preserve its Title (section 1) will typically require changing the actual title.</para>
        </item>
        <item>
          <para>TERMINATION</para>
          <para>You may not copy, modify, sublicense, or distribute the Document except as expressly provided under this License.  Any attempt otherwise to copy, modify, sublicense, or distribute it is void, and will automatically terminate your rights under this License.</para>
          <para>However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.</para>
          <para>Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.</para>
          <para>Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License.  If your rights have been terminated and not permanently reinstated, receipt of a copy of some or all of the same material does not give you any rights to use it.</para>
        </item>
        <item>
          <para>FUTURE REVISIONS OF THIS LICENSE</para>
          <para>The Free Software Foundation may publish new, revised versions of the GNU Free Documentation License from time to time.  Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.  See <uref><urefurl>http://www.gnu.org/copyleft/</urefurl></uref>.</para>
          <para>Each version of the License is given a distinguishing version number. If the Document specifies that a particular numbered version of this License &ldquo;or any later version&rdquo; applies to it, you have the option of following the terms and conditions either of that specified version or of any later version that has been published (not as a draft) by the Free Software Foundation.  If the Document does not specify a version number of this License, you may choose any version ever published (not as a draft) by the Free Software Foundation.  If the Document specifies that a proxy can decide which future versions of this License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Document.</para>
        </item>
        <item>
          <para>RELICENSING</para>
          <para>&ldquo;Massive Multiauthor Collaboration Site&rdquo; (or &ldquo;MMC Site&rdquo;) means any World Wide Web server that publishes copyrightable works and also provides prominent facilities for anybody to edit those works.  A public wiki that anybody can edit is an example of such a server.  A &ldquo;Massive Multiauthor Collaboration&rdquo; (or &ldquo;MMC&rdquo;) contained in the site means any set of copyrightable works thus published on the MMC site.</para>
          <para>&ldquo;CC-BY-SA&rdquo; means the Creative Commons Attribution-Share Alike 3.0 license published by Creative Commons Corporation, a not-for-profit corporation with a principal place of business in San Francisco, California, as well as future copyleft versions of that license published by that same organization.</para>
          <para>&ldquo;Incorporate&rdquo; means to publish or republish a Document, in whole or in part, as part of another Document.</para>
          <para>An MMC is &ldquo;eligible for relicensing&rdquo; if it is licensed under this License, and if all works that were first published under this License somewhere other than this MMC, and subsequently incorporated in whole or in part into the MMC, (1) had no cover texts or invariant sections, and (2) were thus incorporated prior to November 1, 2008.</para>
          <para>The operator of an MMC Site may republish an MMC contained in the site under CC-BY-SA on the same site at any time before August 1, 2009, provided the MMC is eligible for relicensing.</para>
        </item>
      </enumerate>
      <heading>ADDENDUM: How to use this License for your documents</heading>
      <para>To use this License in a document you have written, include a copy of the License in the document and put the following copyright and license notices just after the title page:</para>
      <smallexample xml:space="preserve"><group>  Copyright (C)  <var>year</var>  <var>your name</var>.
  Permission is granted to copy, distribute and/or modify this document
  under the terms of the GNU Free Documentation License, Version 1.3
  or any later version published by the Free Software Foundation;
  with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
  Texts.  A copy of the license is included in the section entitled ``GNU
  Free Documentation License''.</group></smallexample>
      <para>If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts, replace the &ldquo;with&dots;Texts.&rdquo; line with this:</para>
      <smallexample xml:space="preserve"><group>    with the Invariant Sections being <var>list their titles</var>, with
    the Front-Cover Texts being <var>list</var>, and with the Back-Cover Texts
    being <var>list</var>.</group></smallexample>
      <para>If you have Invariant Sections without Cover Texts, or some other combination of the three, merge those two alternatives to suit the situation.</para>
      <para>If your document contains nontrivial examples of program code, we recommend releasing these examples in parallel under your choice of free software license, such as the GNU General Public License, to permit their use in free software.</para>
<!-- Local Variables: -->
<!-- ispell-local-pdict: "ispell-dict" -->
<!-- End: -->
<!--  -->
    </appendix>
  </node>
  <node>
    <nodename>Index</nodename>
    <nodeprev>GNU FDL</nodeprev>
    <nodeup>Top</nodeup>
    <unnumbered>
      <title>Index</title>
      <printindex>cp</printindex>
    </unnumbered>
  </node>
</texinfo>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-indent-step:1
sgml-indent-data:nil
End:
-->
