<?xml version="1.0"?>
<!DOCTYPE texinfo PUBLIC "-//GNU//DTD TexinfoML V5.00//EN" "http://www.gnu.org/software/texinfo/dtd/5.00/texinfo.dtd">
<texinfo xml:lang="en">
<filename file="coreutils.xml"></filename>
<preamble>\input texinfo
</preamble><!-- c %**start of header -->
<setfilename file="coreutils.info" spaces=" ">coreutils.info</setfilename>
<settitle spaces=" "><sc>gnu</sc> Coreutils</settitle>

<!-- c %**end of header -->

<include spaces=" ">version.texi</include>
<include spaces=" ">constants.texi</include>

<!-- c Define new indices. -->
<defcodeindex value="op" line=" op"></defcodeindex>
<defcodeindex value="fl" line=" fl"></defcodeindex>

<!-- c Put everything in one index (arbitrarily chosen to be the concept index). -->
<syncodeindex from="fl" to="cp" line=" fl cp"></syncodeindex>
<syncodeindex from="fn" to="cp" line=" fn cp"></syncodeindex>
<syncodeindex from="ky" to="cp" line=" ky cp"></syncodeindex>
<syncodeindex from="op" to="cp" line=" op cp"></syncodeindex>
<syncodeindex from="pg" to="cp" line=" pg cp"></syncodeindex>
<syncodeindex from="vr" to="cp" line=" vr cp"></syncodeindex>

<dircategory spaces=" ">Basics</dircategory>
<direntry endspaces=" ">
<menuentry leadingtext="* "><menutitle separator=": ">Coreutils</menutitle><menunode separator=".       ">(coreutils)</menunode><menudescription><pre xml:space="preserve">Core GNU (file, text, shell) utilities.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">Common options</menutitle><menunode separator=".      ">(coreutils)Common options</menunode><menudescription><pre xml:space="preserve">Common options.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">File permissions</menutitle><menunode separator=".  ">(coreutils)File permissions</menunode><menudescription><pre xml:space="preserve">Access modes.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">Date input formats</menutitle><menunode separator=".">(coreutils)Date input formats</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry></direntry>

<!-- c FIXME: the following need documentation -->
<!-- c * [: (coreutils)[ invocation.                   File/string tests. -->
<!-- c * pinky: (coreutils)pinky invocation.           FIXME. -->

<dircategory spaces=" ">Individual utilities</dircategory>
<direntry endspaces=" ">
<menuentry leadingtext="* "><menutitle separator=": ">arch</menutitle><menunode separator=".             ">(coreutils)arch invocation</menunode><menudescription><pre xml:space="preserve">Print machine hardware name.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">base64</menutitle><menunode separator=".         ">(coreutils)base64 invocation</menunode><menudescription><pre xml:space="preserve">Base64 encode/decode data.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">basename</menutitle><menunode separator=".     ">(coreutils)basename invocation</menunode><menudescription><pre xml:space="preserve">Strip directory and suffix.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">cat</menutitle><menunode separator=".               ">(coreutils)cat invocation</menunode><menudescription><pre xml:space="preserve">Concatenate and write files.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">chcon</menutitle><menunode separator=".           ">(coreutils)chcon invocation</menunode><menudescription><pre xml:space="preserve">Change SELinux CTX of files.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">chgrp</menutitle><menunode separator=".           ">(coreutils)chgrp invocation</menunode><menudescription><pre xml:space="preserve">Change file groups.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">chmod</menutitle><menunode separator=".           ">(coreutils)chmod invocation</menunode><menudescription><pre xml:space="preserve">Change file permissions.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">chown</menutitle><menunode separator=".           ">(coreutils)chown invocation</menunode><menudescription><pre xml:space="preserve">Change file owners/groups.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">chroot</menutitle><menunode separator=".         ">(coreutils)chroot invocation</menunode><menudescription><pre xml:space="preserve">Specify the root directory.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">cksum</menutitle><menunode separator=".           ">(coreutils)cksum invocation</menunode><menudescription><pre xml:space="preserve">Print POSIX CRC checksum.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">comm</menutitle><menunode separator=".             ">(coreutils)comm invocation</menunode><menudescription><pre xml:space="preserve">Compare sorted files by line.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">cp</menutitle><menunode separator=".                 ">(coreutils)cp invocation</menunode><menudescription><pre xml:space="preserve">Copy files.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">csplit</menutitle><menunode separator=".         ">(coreutils)csplit invocation</menunode><menudescription><pre xml:space="preserve">Split by context.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">cut</menutitle><menunode separator=".               ">(coreutils)cut invocation</menunode><menudescription><pre xml:space="preserve">Print selected parts of lines.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">date</menutitle><menunode separator=".             ">(coreutils)date invocation</menunode><menudescription><pre xml:space="preserve">Print/set system date and time.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">dd</menutitle><menunode separator=".                 ">(coreutils)dd invocation</menunode><menudescription><pre xml:space="preserve">Copy and convert a file.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">df</menutitle><menunode separator=".                 ">(coreutils)df invocation</menunode><menudescription><pre xml:space="preserve">Report file system disk usage.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">dir</menutitle><menunode separator=".               ">(coreutils)dir invocation</menunode><menudescription><pre xml:space="preserve">List directories briefly.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">dircolors</menutitle><menunode separator=".   ">(coreutils)dircolors invocation</menunode><menudescription><pre xml:space="preserve">Color setup for ls.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">dirname</menutitle><menunode separator=".       ">(coreutils)dirname invocation</menunode><menudescription><pre xml:space="preserve">Strip last file name component.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">du</menutitle><menunode separator=".                 ">(coreutils)du invocation</menunode><menudescription><pre xml:space="preserve">Report on disk usage.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">echo</menutitle><menunode separator=".             ">(coreutils)echo invocation</menunode><menudescription><pre xml:space="preserve">Print a line of text.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">env</menutitle><menunode separator=".               ">(coreutils)env invocation</menunode><menudescription><pre xml:space="preserve">Modify the environment.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">expand</menutitle><menunode separator=".         ">(coreutils)expand invocation</menunode><menudescription><pre xml:space="preserve">Convert tabs to spaces.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">expr</menutitle><menunode separator=".             ">(coreutils)expr invocation</menunode><menudescription><pre xml:space="preserve">Evaluate expressions.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">factor</menutitle><menunode separator=".         ">(coreutils)factor invocation</menunode><menudescription><pre xml:space="preserve">Print prime factors
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">false</menutitle><menunode separator=".           ">(coreutils)false invocation</menunode><menudescription><pre xml:space="preserve">Do nothing, unsuccessfully.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">fmt</menutitle><menunode separator=".               ">(coreutils)fmt invocation</menunode><menudescription><pre xml:space="preserve">Reformat paragraph text.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">fold</menutitle><menunode separator=".             ">(coreutils)fold invocation</menunode><menudescription><pre xml:space="preserve">Wrap long input lines.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">groups</menutitle><menunode separator=".         ">(coreutils)groups invocation</menunode><menudescription><pre xml:space="preserve">Print group names a user is in.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">head</menutitle><menunode separator=".             ">(coreutils)head invocation</menunode><menudescription><pre xml:space="preserve">Output the first part of files.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">hostid</menutitle><menunode separator=".         ">(coreutils)hostid invocation</menunode><menudescription><pre xml:space="preserve">Print numeric host identifier.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">hostname</menutitle><menunode separator=".     ">(coreutils)hostname invocation</menunode><menudescription><pre xml:space="preserve">Print or set system name.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">id</menutitle><menunode separator=".                 ">(coreutils)id invocation</menunode><menudescription><pre xml:space="preserve">Print user identity.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">install</menutitle><menunode separator=".       ">(coreutils)install invocation</menunode><menudescription><pre xml:space="preserve">Copy and change attributes.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">join</menutitle><menunode separator=".             ">(coreutils)join invocation</menunode><menudescription><pre xml:space="preserve">Join lines on a common field.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">kill</menutitle><menunode separator=".             ">(coreutils)kill invocation</menunode><menudescription><pre xml:space="preserve">Send a signal to processes.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">link</menutitle><menunode separator=".             ">(coreutils)link invocation</menunode><menudescription><pre xml:space="preserve">Make hard links between files.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">ln</menutitle><menunode separator=".                 ">(coreutils)ln invocation</menunode><menudescription><pre xml:space="preserve">Make links between files.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">logname</menutitle><menunode separator=".       ">(coreutils)logname invocation</menunode><menudescription><pre xml:space="preserve">Print current login name.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">ls</menutitle><menunode separator=".                 ">(coreutils)ls invocation</menunode><menudescription><pre xml:space="preserve">List directory contents.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">md5sum</menutitle><menunode separator=".         ">(coreutils)md5sum invocation</menunode><menudescription><pre xml:space="preserve">Print or check MD5 digests.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">mkdir</menutitle><menunode separator=".           ">(coreutils)mkdir invocation</menunode><menudescription><pre xml:space="preserve">Create directories.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">mkfifo</menutitle><menunode separator=".         ">(coreutils)mkfifo invocation</menunode><menudescription><pre xml:space="preserve">Create FIFOs (named pipes).
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">mknod</menutitle><menunode separator=".           ">(coreutils)mknod invocation</menunode><menudescription><pre xml:space="preserve">Create special files.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">mktemp</menutitle><menunode separator=".         ">(coreutils)mktemp invocation</menunode><menudescription><pre xml:space="preserve">Create temporary files.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">mv</menutitle><menunode separator=".                 ">(coreutils)mv invocation</menunode><menudescription><pre xml:space="preserve">Rename files.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">nice</menutitle><menunode separator=".             ">(coreutils)nice invocation</menunode><menudescription><pre xml:space="preserve">Modify niceness.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">nl</menutitle><menunode separator=".                 ">(coreutils)nl invocation</menunode><menudescription><pre xml:space="preserve">Number lines and write files.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">nohup</menutitle><menunode separator=".           ">(coreutils)nohup invocation</menunode><menudescription><pre xml:space="preserve">Immunize to hangups.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">nproc</menutitle><menunode separator=".           ">(coreutils)nproc invocation</menunode><menudescription><pre xml:space="preserve">Print the number of processors.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">od</menutitle><menunode separator=".                 ">(coreutils)od invocation</menunode><menudescription><pre xml:space="preserve">Dump files in octal, etc.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">paste</menutitle><menunode separator=".           ">(coreutils)paste invocation</menunode><menudescription><pre xml:space="preserve">Merge lines of files.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">pathchk</menutitle><menunode separator=".       ">(coreutils)pathchk invocation</menunode><menudescription><pre xml:space="preserve">Check file name portability.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">pr</menutitle><menunode separator=".                 ">(coreutils)pr invocation</menunode><menudescription><pre xml:space="preserve">Paginate or columnate files.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">printenv</menutitle><menunode separator=".     ">(coreutils)printenv invocation</menunode><menudescription><pre xml:space="preserve">Print environment variables.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">printf</menutitle><menunode separator=".         ">(coreutils)printf invocation</menunode><menudescription><pre xml:space="preserve">Format and print data.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">ptx</menutitle><menunode separator=".               ">(coreutils)ptx invocation</menunode><menudescription><pre xml:space="preserve">Produce permuted indexes.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">pwd</menutitle><menunode separator=".               ">(coreutils)pwd invocation</menunode><menudescription><pre xml:space="preserve">Print working directory.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">readlink</menutitle><menunode separator=".     ">(coreutils)readlink invocation</menunode><menudescription><pre xml:space="preserve">Print referent of a symlink.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">realpath</menutitle><menunode separator=".     ">(coreutils)readpath invocation</menunode><menudescription><pre xml:space="preserve">Print resolved file names.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">rm</menutitle><menunode separator=".                 ">(coreutils)rm invocation</menunode><menudescription><pre xml:space="preserve">Remove files.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">rmdir</menutitle><menunode separator=".           ">(coreutils)rmdir invocation</menunode><menudescription><pre xml:space="preserve">Remove empty directories.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">runcon</menutitle><menunode separator=".         ">(coreutils)runcon invocation</menunode><menudescription><pre xml:space="preserve">Run in specified SELinux CTX.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">seq</menutitle><menunode separator=".               ">(coreutils)seq invocation</menunode><menudescription><pre xml:space="preserve">Print numeric sequences
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">sha1sum</menutitle><menunode separator=".       ">(coreutils)sha1sum invocation</menunode><menudescription><pre xml:space="preserve">Print or check SHA-1 digests.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">sha2</menutitle><menunode separator=".              ">(coreutils)sha2 utilities</menunode><menudescription><pre xml:space="preserve">Print or check SHA-2 digests.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">shred</menutitle><menunode separator=".           ">(coreutils)shred invocation</menunode><menudescription><pre xml:space="preserve">Remove files more securely.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">shuf</menutitle><menunode separator=".             ">(coreutils)shuf invocation</menunode><menudescription><pre xml:space="preserve">Shuffling text files.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">sleep</menutitle><menunode separator=".           ">(coreutils)sleep invocation</menunode><menudescription><pre xml:space="preserve">Delay for a specified time.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">sort</menutitle><menunode separator=".             ">(coreutils)sort invocation</menunode><menudescription><pre xml:space="preserve">Sort text files.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">split</menutitle><menunode separator=".           ">(coreutils)split invocation</menunode><menudescription><pre xml:space="preserve">Split into pieces.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">stat</menutitle><menunode separator=".             ">(coreutils)stat invocation</menunode><menudescription><pre xml:space="preserve">Report file(system) status.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">stdbuf</menutitle><menunode separator=".         ">(coreutils)stdbuf invocation</menunode><menudescription><pre xml:space="preserve">Modify stdio buffering.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">stty</menutitle><menunode separator=".             ">(coreutils)stty invocation</menunode><menudescription><pre xml:space="preserve">Print/change terminal settings.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">su</menutitle><menunode separator=".                 ">(coreutils)su invocation</menunode><menudescription><pre xml:space="preserve">Modify user and group ID.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">sum</menutitle><menunode separator=".               ">(coreutils)sum invocation</menunode><menudescription><pre xml:space="preserve">Print traditional checksum.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">sync</menutitle><menunode separator=".             ">(coreutils)sync invocation</menunode><menudescription><pre xml:space="preserve">Synchronize memory and disk.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">tac</menutitle><menunode separator=".               ">(coreutils)tac invocation</menunode><menudescription><pre xml:space="preserve">Reverse files.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">tail</menutitle><menunode separator=".             ">(coreutils)tail invocation</menunode><menudescription><pre xml:space="preserve">Output the last part of files.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">tee</menutitle><menunode separator=".               ">(coreutils)tee invocation</menunode><menudescription><pre xml:space="preserve">Redirect to multiple files.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">test</menutitle><menunode separator=".             ">(coreutils)test invocation</menunode><menudescription><pre xml:space="preserve">File/string tests.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">timeout</menutitle><menunode separator=".       ">(coreutils)timeout invocation</menunode><menudescription><pre xml:space="preserve">Run with time limit.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">touch</menutitle><menunode separator=".           ">(coreutils)touch invocation</menunode><menudescription><pre xml:space="preserve">Change file timestamps.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">tr</menutitle><menunode separator=".                 ">(coreutils)tr invocation</menunode><menudescription><pre xml:space="preserve">Translate characters.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">true</menutitle><menunode separator=".             ">(coreutils)true invocation</menunode><menudescription><pre xml:space="preserve">Do nothing, successfully.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">truncate</menutitle><menunode separator=".     ">(coreutils)truncate invocation</menunode><menudescription><pre xml:space="preserve">Shrink/extend size of a file.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">tsort</menutitle><menunode separator=".           ">(coreutils)tsort invocation</menunode><menudescription><pre xml:space="preserve">Topological sort.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">tty</menutitle><menunode separator=".               ">(coreutils)tty invocation</menunode><menudescription><pre xml:space="preserve">Print terminal name.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">uname</menutitle><menunode separator=".           ">(coreutils)uname invocation</menunode><menudescription><pre xml:space="preserve">Print system information.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">unexpand</menutitle><menunode separator=".     ">(coreutils)unexpand invocation</menunode><menudescription><pre xml:space="preserve">Convert spaces to tabs.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">uniq</menutitle><menunode separator=".             ">(coreutils)uniq invocation</menunode><menudescription><pre xml:space="preserve">Uniquify files.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">unlink</menutitle><menunode separator=".         ">(coreutils)unlink invocation</menunode><menudescription><pre xml:space="preserve">Removal via unlink(2).
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">uptime</menutitle><menunode separator=".         ">(coreutils)uptime invocation</menunode><menudescription><pre xml:space="preserve">Print uptime and load.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">users</menutitle><menunode separator=".           ">(coreutils)users invocation</menunode><menudescription><pre xml:space="preserve">Print current user names.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">vdir</menutitle><menunode separator=".             ">(coreutils)vdir invocation</menunode><menudescription><pre xml:space="preserve">List directories verbosely.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">wc</menutitle><menunode separator=".                 ">(coreutils)wc invocation</menunode><menudescription><pre xml:space="preserve">Line, word, and byte counts.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">who</menutitle><menunode separator=".               ">(coreutils)who invocation</menunode><menudescription><pre xml:space="preserve">Print who is logged in.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">whoami</menutitle><menunode separator=".         ">(coreutils)whoami invocation</menunode><menudescription><pre xml:space="preserve">Print effective user ID.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menutitle separator=": ">yes</menutitle><menunode separator=".               ">(coreutils)yes invocation</menunode><menudescription><pre xml:space="preserve">Print a string indefinitely.
</pre></menudescription></menuentry></direntry>

<copying endspaces=" ">
<para>This manual documents version  of the <sc>gnu</sc> core
utilities, including the standard programs for text and file manipulation.
</para>
<para>Copyright &copyright; 1994-1996, 2000-2012 Free Software Foundation, Inc.
</para>
<quotation endspaces=" ">
<para>Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled &textldquo;GNU
Free Documentation License&textrdquo;.
</para></quotation>
</copying>

<titlepage endspaces=" ">
<title spaces=" "><sc>gnu</sc> <code>Coreutils</code></title>
<subtitle spaces=" ">Core GNU utilities</subtitle>
<subtitle spaces=" ">for version , </subtitle>
<author spaces=" ">David MacKenzie et al.</author>

<page></page>
<vskip> 0pt plus 1filll</vskip>
<insertcopying></insertcopying>
</titlepage>
<shortcontents></shortcontents>
<contents></contents>

<node name="Top" spaces=" "><nodename>Top</nodename><nodenext automatic="on">Introduction</nodenext><nodeup automatic="on">(dir)</nodeup></node>
<top spaces=" "><sectiontitle>GNU Coreutils</sectiontitle>

<insertcopying></insertcopying>

<cindex index="cp" spaces=" "><indexterm index="cp">core utilities</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">text utilities</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">shell utilities</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">file utilities</indexterm></cindex>

<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::                 ">Introduction</menunode><menudescription><pre xml:space="preserve">Caveats, overview, and authors
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::               ">Common options</menunode><menudescription><pre xml:space="preserve">Common options
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::       ">Output of entire files</menunode><menudescription><pre xml:space="preserve">cat tac nl od base64
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::     ">Formatting file contents</menunode><menudescription><pre xml:space="preserve">fmt pr fold
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::     ">Output of parts of files</menunode><menudescription><pre xml:space="preserve">head tail split csplit
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">Summarizing files</menunode><menudescription><pre xml:space="preserve">wc sum cksum md5sum sha1sum sha2
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::    ">Operating on sorted files</menunode><menudescription><pre xml:space="preserve">sort shuf uniq comm ptx tsort
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::          ">Operating on fields</menunode><menudescription><pre xml:space="preserve">cut paste join
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::      ">Operating on characters</menunode><menudescription><pre xml:space="preserve">tr expand unexpand
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">Directory listing</menunode><menudescription><pre xml:space="preserve">ls dir vdir dircolors
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">Basic operations</menunode><menudescription><pre xml:space="preserve">cp dd install mv rm shred
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::         ">Special file types</menunode><menudescription><pre xml:space="preserve">mkdir rmdir unlink mkfifo mknod ln link readlink
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::     ">Changing file attributes</menunode><menudescription><pre xml:space="preserve">chgrp chmod chown touch
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::                   ">Disk usage</menunode><menudescription><pre xml:space="preserve">df du stat sync truncate
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::                ">Printing text</menunode><menudescription><pre xml:space="preserve">echo printf yes
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::                   ">Conditions</menunode><menudescription><pre xml:space="preserve">false true test expr
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::                  ">Redirection</menunode><menudescription><pre xml:space="preserve">tee
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::       ">File name manipulation</menunode><menudescription><pre xml:space="preserve">dirname basename pathchk mktemp realpath
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::              ">Working context</menunode><menudescription><pre xml:space="preserve">pwd stty printenv tty
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">User information</menunode><menudescription><pre xml:space="preserve">id logname whoami groups users who
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::               ">System context</menunode><menudescription><pre xml:space="preserve">date arch nproc uname hostname hostid uptime
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::              ">SELinux context</menunode><menudescription><pre xml:space="preserve">chcon runcon
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::  ">Modified command invocation</menunode><menudescription><pre xml:space="preserve">chroot env nice nohup stdbuf su timeout
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::              ">Process control</menunode><menudescription><pre xml:space="preserve">kill
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::                     ">Delaying</menunode><menudescription><pre xml:space="preserve">sleep
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::           ">Numeric operations</menunode><menudescription><pre xml:space="preserve">factor seq
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">File permissions</menunode><menudescription><pre xml:space="preserve">Access modes
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::           ">Date input formats</menunode><menudescription><pre xml:space="preserve">Specifying date strings
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator=":: ">Opening the software toolbox</menunode><menudescription><pre xml:space="preserve">The software tools philosophy
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator=":: ">GNU Free Documentation License</menunode><menudescription><pre xml:space="preserve">Copying and sharing this manual
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::                ">Concept index</menunode><menudescription><pre xml:space="preserve">General index
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
</pre></menucomment><detailmenu endspaces=" ">
<menucomment><pre xml:space="preserve"> &textmdash; The Detailed Node Listing &textmdash;

Common Options

</pre></menucomment><menuentry leadingtext="* "><menunode separator="::                  ">Exit status</menunode><menudescription><pre xml:space="preserve">Indicating program success or failure
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::               ">Backup options</menunode><menudescription><pre xml:space="preserve">Backup options
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::                   ">Block size</menunode><menudescription><pre xml:space="preserve">Block size
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::               ">Floating point</menunode><menudescription><pre xml:space="preserve">Floating point number representation
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::        ">Signal specifications</menunode><menudescription><pre xml:space="preserve">Specifying signals
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator=":: ">Disambiguating names and IDs</menunode><menudescription><pre xml:space="preserve">chgrp and chown owner and group syntax
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::               ">Random sources</menunode><menudescription><pre xml:space="preserve">Sources of random data
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">Target directory</menunode><menudescription><pre xml:space="preserve">Target directory
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">Trailing slashes</menunode><menudescription><pre xml:space="preserve">Trailing slashes
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::          ">Traversing symlinks</menunode><menudescription><pre xml:space="preserve">Traversing symlinks to directories
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::         ">Treating / specially</menunode><menudescription><pre xml:space="preserve">Treating / specially
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::        ">Standards conformance</menunode><menudescription><pre xml:space="preserve">Standards conformance
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
Output of entire files

</pre></menucomment><menuentry leadingtext="* "><menunode separator="::               ">cat invocation</menunode><menudescription><pre xml:space="preserve">Concatenate and write files
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::               ">tac invocation</menunode><menudescription><pre xml:space="preserve">Concatenate and write files in reverse
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::                ">nl invocation</menunode><menudescription><pre xml:space="preserve">Number lines and write files
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::                ">od invocation</menunode><menudescription><pre xml:space="preserve">Write files in octal or other formats
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">base64 invocation</menunode><menudescription><pre xml:space="preserve">Transform data into printable data
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
Formatting file contents

</pre></menucomment><menuentry leadingtext="* "><menunode separator="::               ">fmt invocation</menunode><menudescription><pre xml:space="preserve">Reformat paragraph text
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::                ">pr invocation</menunode><menudescription><pre xml:space="preserve">Paginate or columnate files for printing
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::              ">fold invocation</menunode><menudescription><pre xml:space="preserve">Wrap input lines to fit in specified width
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
Output of parts of files

</pre></menucomment><menuentry leadingtext="* "><menunode separator="::              ">head invocation</menunode><menudescription><pre xml:space="preserve">Output the first part of files
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::              ">tail invocation</menunode><menudescription><pre xml:space="preserve">Output the last part of files
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">split invocation</menunode><menudescription><pre xml:space="preserve">Split a file into fixed-size pieces
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">csplit invocation</menunode><menudescription><pre xml:space="preserve">Split a file into context-determined pieces
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
Summarizing files

</pre></menucomment><menuentry leadingtext="* "><menunode separator="::                ">wc invocation</menunode><menudescription><pre xml:space="preserve">Print newline, word, and byte counts
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::               ">sum invocation</menunode><menudescription><pre xml:space="preserve">Print checksum and block counts
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">cksum invocation</menunode><menudescription><pre xml:space="preserve">Print CRC checksum and byte counts
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">md5sum invocation</menunode><menudescription><pre xml:space="preserve">Print or check MD5 digests
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::           ">sha1sum invocation</menunode><menudescription><pre xml:space="preserve">Print or check SHA-1 digests
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::               ">sha2 utilities</menunode><menudescription><pre xml:space="preserve">Print or check SHA-2 digests
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
Operating on sorted files

</pre></menucomment><menuentry leadingtext="* "><menunode separator="::              ">sort invocation</menunode><menudescription><pre xml:space="preserve">Sort text files
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::              ">shuf invocation</menunode><menudescription><pre xml:space="preserve">Shuffle text files
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::              ">uniq invocation</menunode><menudescription><pre xml:space="preserve">Uniquify files
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::              ">comm invocation</menunode><menudescription><pre xml:space="preserve">Compare two sorted files line by line
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::               ">ptx invocation</menunode><menudescription><pre xml:space="preserve">Produce a permuted index of file contents
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">tsort invocation</menunode><menudescription><pre xml:space="preserve">Topological sort
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
<command>ptx</command>: Produce permuted indexes

</pre></menucomment><menuentry leadingtext="* "><menunode separator="::       ">General options in ptx</menunode><menudescription><pre xml:space="preserve">Options which affect general program behavior
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::     ">Charset selection in ptx</menunode><menudescription><pre xml:space="preserve">Underlying character set considerations
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::      ">Input processing in ptx</menunode><menudescription><pre xml:space="preserve">Input fields, contexts, and keyword selection
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::     ">Output formatting in ptx</menunode><menudescription><pre xml:space="preserve">Types of output format, and sizing the fields
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::         ">Compatibility in ptx</menunode><menudescription><pre xml:space="preserve">The <acronym><acronymword>GNU</acronymword></acronym> extensions to <command>ptx</command>
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
Operating on fields

</pre></menucomment><menuentry leadingtext="* "><menunode separator="::               ">cut invocation</menunode><menudescription><pre xml:space="preserve">Print selected parts of lines
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">paste invocation</menunode><menudescription><pre xml:space="preserve">Merge lines of files
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::              ">join invocation</menunode><menudescription><pre xml:space="preserve">Join lines on a common field
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
Operating on characters

</pre></menucomment><menuentry leadingtext="* "><menunode separator="::                ">tr invocation</menunode><menudescription><pre xml:space="preserve">Translate, squeeze, and/or delete characters
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">expand invocation</menunode><menudescription><pre xml:space="preserve">Convert tabs to spaces
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::          ">unexpand invocation</menunode><menudescription><pre xml:space="preserve">Convert spaces to tabs
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
<command>tr</command>: Translate, squeeze, and/or delete characters

</pre></menucomment><menuentry leadingtext="* "><menunode separator="::               ">Character sets</menunode><menudescription><pre xml:space="preserve">Specifying sets of characters
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::                  ">Translating</menunode><menudescription><pre xml:space="preserve">Changing one set of characters to another
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::                    ">Squeezing</menunode><menudescription><pre xml:space="preserve">Squeezing repeats and deleting
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
Directory listing

</pre></menucomment><menuentry leadingtext="* "><menunode separator="::                ">ls invocation</menunode><menudescription><pre xml:space="preserve">List directory contents
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::               ">dir invocation</menunode><menudescription><pre xml:space="preserve">Briefly list directory contents
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::              ">vdir invocation</menunode><menudescription><pre xml:space="preserve">Verbosely list directory contents
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::         ">dircolors invocation</menunode><menudescription><pre xml:space="preserve">Color setup for <command>ls</command>
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
<command>ls</command>:  List directory contents

</pre></menucomment><menuentry leadingtext="* "><menunode separator="::       ">Which files are listed</menunode><menudescription><pre xml:space="preserve">Which files are listed
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::   ">What information is listed</menunode><menudescription><pre xml:space="preserve">What information is listed
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::           ">Sorting the output</menunode><menudescription><pre xml:space="preserve">Sorting the output
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::   ">Details about version sort</menunode><menudescription><pre xml:space="preserve">More details about version sort
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::    ">General output formatting</menunode><menudescription><pre xml:space="preserve">General output formatting
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::    ">Formatting the file names</menunode><menudescription><pre xml:space="preserve">Formatting the file names
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
Basic operations

</pre></menucomment><menuentry leadingtext="* "><menunode separator="::                ">cp invocation</menunode><menudescription><pre xml:space="preserve">Copy files and directories
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::                ">dd invocation</menunode><menudescription><pre xml:space="preserve">Convert and copy a file
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::           ">install invocation</menunode><menudescription><pre xml:space="preserve">Copy files and set attributes
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::                ">mv invocation</menunode><menudescription><pre xml:space="preserve">Move (rename) files
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::                ">rm invocation</menunode><menudescription><pre xml:space="preserve">Remove files or directories
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">shred invocation</menunode><menudescription><pre xml:space="preserve">Remove files more securely
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
Special file types

</pre></menucomment><menuentry leadingtext="* "><menunode separator="::              ">link invocation</menunode><menudescription><pre xml:space="preserve">Make a hard link via the link syscall
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::                ">ln invocation</menunode><menudescription><pre xml:space="preserve">Make links between files
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">mkdir invocation</menunode><menudescription><pre xml:space="preserve">Make directories
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">mkfifo invocation</menunode><menudescription><pre xml:space="preserve">Make FIFOs (named pipes)
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">mknod invocation</menunode><menudescription><pre xml:space="preserve">Make block or character special files
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::          ">readlink invocation</menunode><menudescription><pre xml:space="preserve">Print value of a symlink or canonical file name
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">rmdir invocation</menunode><menudescription><pre xml:space="preserve">Remove empty directories
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">unlink invocation</menunode><menudescription><pre xml:space="preserve">Remove files via unlink syscall
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
Changing file attributes

</pre></menucomment><menuentry leadingtext="* "><menunode separator="::             ">chown invocation</menunode><menudescription><pre xml:space="preserve">Change file owner and group
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">chgrp invocation</menunode><menudescription><pre xml:space="preserve">Change group ownership
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">chmod invocation</menunode><menudescription><pre xml:space="preserve">Change access permissions
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">touch invocation</menunode><menudescription><pre xml:space="preserve">Change file timestamps
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
Disk usage

</pre></menucomment><menuentry leadingtext="* "><menunode separator="::                ">df invocation</menunode><menudescription><pre xml:space="preserve">Report file system disk space usage
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::                ">du invocation</menunode><menudescription><pre xml:space="preserve">Estimate file space usage
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::              ">stat invocation</menunode><menudescription><pre xml:space="preserve">Report file or file system status
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::              ">sync invocation</menunode><menudescription><pre xml:space="preserve">Synchronize data on disk with memory
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::          ">truncate invocation</menunode><menudescription><pre xml:space="preserve">Shrink or extend the size of a file
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
Printing text

</pre></menucomment><menuentry leadingtext="* "><menunode separator="::              ">echo invocation</menunode><menudescription><pre xml:space="preserve">Print a line of text
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">printf invocation</menunode><menudescription><pre xml:space="preserve">Format and print data
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::               ">yes invocation</menunode><menudescription><pre xml:space="preserve">Print a string until interrupted
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
Conditions

</pre></menucomment><menuentry leadingtext="* "><menunode separator="::             ">false invocation</menunode><menudescription><pre xml:space="preserve">Do nothing, unsuccessfully
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::              ">true invocation</menunode><menudescription><pre xml:space="preserve">Do nothing, successfully
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::              ">test invocation</menunode><menudescription><pre xml:space="preserve">Check file types and compare values
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::              ">expr invocation</menunode><menudescription><pre xml:space="preserve">Evaluate expressions
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
<command>test</command>: Check file types and compare values

</pre></menucomment><menuentry leadingtext="* "><menunode separator="::              ">File type tests</menunode><menudescription><pre xml:space="preserve">File type tests
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::      ">Access permission tests</menunode><menudescription><pre xml:space="preserve">Access permission tests
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::    ">File characteristic tests</menunode><menudescription><pre xml:space="preserve">File characteristic tests
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::                 ">String tests</menunode><menudescription><pre xml:space="preserve">String tests
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::                ">Numeric tests</menunode><menudescription><pre xml:space="preserve">Numeric tests
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
<command>expr</command>: Evaluate expression

</pre></menucomment><menuentry leadingtext="* "><menunode separator="::           ">String expressions</menunode><menudescription><pre xml:space="preserve">+ : match substr index length
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::          ">Numeric expressions</menunode><menudescription><pre xml:space="preserve">+ - * / %
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::           ">Relations for expr</menunode><menudescription><pre xml:space="preserve">| &amp; &lt; &lt;= = == != &gt;= &gt;
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">Examples of expr</menunode><menudescription><pre xml:space="preserve">Examples of using <command>expr</command>
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
Redirection

</pre></menucomment><menuentry leadingtext="* "><menunode separator="::               ">tee invocation</menunode><menudescription><pre xml:space="preserve">Redirect output to multiple files or processes
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
File name manipulation

</pre></menucomment><menuentry leadingtext="* "><menunode separator="::          ">basename invocation</menunode><menudescription><pre xml:space="preserve">Strip directory and suffix from a file name
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::           ">dirname invocation</menunode><menudescription><pre xml:space="preserve">Strip last file name component
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::           ">pathchk invocation</menunode><menudescription><pre xml:space="preserve">Check file name validity and portability
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">mktemp invocation</menunode><menudescription><pre xml:space="preserve">Create temporary file or directory
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::          ">realpath invocation</menunode><menudescription><pre xml:space="preserve">Print resolved file names
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
Working context

</pre></menucomment><menuentry leadingtext="* "><menunode separator="::               ">pwd invocation</menunode><menudescription><pre xml:space="preserve">Print working directory
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::              ">stty invocation</menunode><menudescription><pre xml:space="preserve">Print or change terminal characteristics
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::          ">printenv invocation</menunode><menudescription><pre xml:space="preserve">Print all or some environment variables
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::               ">tty invocation</menunode><menudescription><pre xml:space="preserve">Print file name of terminal on standard input
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
<command>stty</command>: Print or change terminal characteristics

</pre></menucomment><menuentry leadingtext="* "><menunode separator="::                      ">Control</menunode><menudescription><pre xml:space="preserve">Control settings
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::                        ">Input</menunode><menudescription><pre xml:space="preserve">Input settings
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::                       ">Output</menunode><menudescription><pre xml:space="preserve">Output settings
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::                        ">Local</menunode><menudescription><pre xml:space="preserve">Local settings
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::                  ">Combination</menunode><menudescription><pre xml:space="preserve">Combination settings
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::                   ">Characters</menunode><menudescription><pre xml:space="preserve">Special characters
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::                      ">Special</menunode><menudescription><pre xml:space="preserve">Special settings
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
User information

</pre></menucomment><menuentry leadingtext="* "><menunode separator="::                ">id invocation</menunode><menudescription><pre xml:space="preserve">Print user identity
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::           ">logname invocation</menunode><menudescription><pre xml:space="preserve">Print current login name
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">whoami invocation</menunode><menudescription><pre xml:space="preserve">Print effective user ID
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">groups invocation</menunode><menudescription><pre xml:space="preserve">Print group names a user is in
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">users invocation</menunode><menudescription><pre xml:space="preserve">Print login names of users currently logged in
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::               ">who invocation</menunode><menudescription><pre xml:space="preserve">Print who is currently logged in
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
System context

</pre></menucomment><menuentry leadingtext="* "><menunode separator="::              ">arch invocation</menunode><menudescription><pre xml:space="preserve">Print machine hardware name
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::              ">date invocation</menunode><menudescription><pre xml:space="preserve">Print or set system date and time
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">nproc invocation</menunode><menudescription><pre xml:space="preserve">Print the number of processors
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">uname invocation</menunode><menudescription><pre xml:space="preserve">Print system information
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::          ">hostname invocation</menunode><menudescription><pre xml:space="preserve">Print or set system name
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">hostid invocation</menunode><menudescription><pre xml:space="preserve">Print numeric host identifier
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">uptime invocation</menunode><menudescription><pre xml:space="preserve">Print system uptime and load
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
<command>date</command>: Print or set system date and time

</pre></menucomment><menuentry leadingtext="* "><menunode separator="::   ">Time conversion specifiers</menunode><menudescription><pre xml:space="preserve">%[HIklMNpPrRsSTXzZ]
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::   ">Date conversion specifiers</menunode><menudescription><pre xml:space="preserve">%[aAbBcCdDeFgGhjmuUVwWxyY]
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator=":: ">Literal conversion specifiers</menunode><menudescription><pre xml:space="preserve">%[%nt]
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::      ">Padding and other flags</menunode><menudescription><pre xml:space="preserve">Pad with zeros, spaces, etc.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">Setting the time</menunode><menudescription><pre xml:space="preserve">Changing the system clock
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">Options for date</menunode><menudescription><pre xml:space="preserve">Instead of the current time
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::           ">Date input formats</menunode><menudescription><pre xml:space="preserve">Specifying date strings
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">Examples of date</menunode><menudescription><pre xml:space="preserve">Examples
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
SELinux context

</pre></menucomment><menuentry leadingtext="* "><menunode separator="::             ">chcon invocation</menunode><menudescription><pre xml:space="preserve">Change SELinux context of file
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">runcon invocation</menunode><menudescription><pre xml:space="preserve">Run a command in specified SELinux context
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
Modified command invocation

</pre></menucomment><menuentry leadingtext="* "><menunode separator="::            ">chroot invocation</menunode><menudescription><pre xml:space="preserve">Run a command with a different root directory
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::               ">env invocation</menunode><menudescription><pre xml:space="preserve">Run a command in a modified environment
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::              ">nice invocation</menunode><menudescription><pre xml:space="preserve">Run a command with modified niceness
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">nohup invocation</menunode><menudescription><pre xml:space="preserve">Run a command immune to hangups
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">stdbuf invocation</menunode><menudescription><pre xml:space="preserve">Run a command with modified I/O buffering
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::                ">su invocation</menunode><menudescription><pre xml:space="preserve">Run a command with substitute user and group ID
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::           ">timeout invocation</menunode><menudescription><pre xml:space="preserve">Run a command with a time limit
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
Process control

</pre></menucomment><menuentry leadingtext="* "><menunode separator="::              ">kill invocation</menunode><menudescription><pre xml:space="preserve">Sending a signal to processes.
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
Delaying

</pre></menucomment><menuentry leadingtext="* "><menunode separator="::             ">sleep invocation</menunode><menudescription><pre xml:space="preserve">Delay for a specified time
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
Numeric operations

</pre></menucomment><menuentry leadingtext="* "><menunode separator="::            ">factor invocation</menunode><menudescription><pre xml:space="preserve">Print prime factors
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::               ">seq invocation</menunode><menudescription><pre xml:space="preserve">Print numeric sequences
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
File permissions

</pre></menucomment><menuentry leadingtext="* "><menunode separator="::               ">Mode Structure</menunode><menudescription><pre xml:space="preserve">Structure of file mode bits
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::               ">Symbolic Modes</menunode><menudescription><pre xml:space="preserve">Mnemonic representation of file mode bits
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::                ">Numeric Modes</menunode><menudescription><pre xml:space="preserve">File mode bits as octal numbers
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::  ">Directory Setuid and Setgid</menunode><menudescription><pre xml:space="preserve">Set-user-ID and set-group-ID on directories
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
Date input formats

</pre></menucomment><menuentry leadingtext="* "><menunode separator="::          ">General date syntax</menunode><menudescription><pre xml:space="preserve">Common rules
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::          ">Calendar date items</menunode><menudescription><pre xml:space="preserve">19 Dec 1994
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">Time of day items</menunode><menudescription><pre xml:space="preserve">9:20pm
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::              ">Time zone items</menunode><menudescription><pre xml:space="preserve"><sc>est</sc>, <sc>pdt</sc>, <sc>gmt</sc>
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">Day of week items</menunode><menudescription><pre xml:space="preserve">Monday and others
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator=":: ">Relative items in date strings</menunode><menudescription><pre xml:space="preserve">next tuesday, 2 years ago
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator=":: ">Pure numbers in date strings</menunode><menudescription><pre xml:space="preserve">19931219, 1440
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::      ">Seconds since the Epoch</menunode><menudescription><pre xml:space="preserve">&arobase;1078100502
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::   ">Specifying time zone rules</menunode><menudescription><pre xml:space="preserve">TZ=&quot;America/New_York&quot;, TZ=&quot;UTC0&quot;
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::    ">Authors of parse_datetime</menunode><menudescription><pre xml:space="preserve">Bellovin, Eggert, Salz, Berets, et al
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
Opening the software toolbox

</pre></menucomment><menuentry leadingtext="* "><menunode separator="::         ">Toolbox introduction</menunode><menudescription><pre xml:space="preserve">Toolbox introduction
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::              ">I/O redirection</menunode><menudescription><pre xml:space="preserve">I/O redirection
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::              ">The who command</menunode><menudescription><pre xml:space="preserve">The <command>who</command> command
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::              ">The cut command</menunode><menudescription><pre xml:space="preserve">The <command>cut</command> command
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">The sort command</menunode><menudescription><pre xml:space="preserve">The <command>sort</command> command
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">The uniq command</menunode><menudescription><pre xml:space="preserve">The <command>uniq</command> command
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::   ">Putting the tools together</menunode><menudescription><pre xml:space="preserve">Putting the tools together
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
Copying This Manual

</pre></menucomment><menuentry leadingtext="* "><menunode separator="::     ">GNU Free Documentation License</menunode><menudescription><pre xml:space="preserve">Copying and sharing this manual
</pre></menudescription></menuentry><menucomment><pre xml:space="preserve">
</pre></menucomment></detailmenu>
</menu>


</top>
<node name="Introduction" spaces=" "><nodename>Introduction</nodename><nodenext automatic="on">Common options</nodenext><nodeprev automatic="on">Top</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>Introduction</sectiontitle>

<para>This manual is a work in progress: many sections make no attempt to explain
basic concepts in a way suitable for novices.  Thus, if you are interested,
please get involved in improving this manual.  The entire <sc>gnu</sc> community
will benefit.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp"><acronym><acronymword>POSIX</acronymword></acronym></indexterm></cindex>
<para>The <sc>gnu</sc> utilities documented here are mostly compatible with the
<acronym><acronymword>POSIX</acronymword></acronym> standard.
<cindex index="cp" spaces=" "><indexterm index="cp">bugs, reporting</indexterm></cindex>
Please report bugs to <email><emailaddress>bug-coreutils&arobase;gnu.org</emailaddress></email>.  Remember
to include the version number, machine architecture, input files, and
any other information needed to reproduce the bug: your input, what you
expected, what you got, and why it is wrong.  Diffs are welcome, but
please include a description of the problem as well, since this is
sometimes difficult to infer.  <xref><xrefnodename>Bugs</xrefnodename><xrefinfoname spaces=" "></xrefinfoname><xrefprinteddesc spaces=" "></xrefprinteddesc><xrefinfofile spaces=" ">gcc</xrefinfofile><xrefprintedname spaces=" ">Using and Porting GNU CC</xrefprintedname></xref>.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">Berry, K.</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">Paterson, R.</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">Stallman, R.</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">Pinard, F.</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">MacKenzie, D.</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">Meyering, J.</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">Youmans, B.</indexterm></cindex>
<para>This manual was originally derived from the Unix man pages in the
distributions, which were written by David MacKenzie and updated by Jim
Meyering.  What you are reading now is the authoritative documentation
for these utilities; the man pages are no longer being maintained.  The
original <command>fmt</command> man page was written by Ross Paterson.  Fran<accent type="cedil">c</accent>ois
Pinard did the initial conversion to Texinfo format.  Karl Berry did the
indexing, some reorganization, and editing of the results.  Brian
Youmans of the Free Software Foundation office staff combined the
manuals for textutils, fileutils, and sh-utils to produce the present
omnibus manual.  Richard Stallman contributed his usual invaluable
insights to the overall process.
</para>
</chapter>
<node name="Common-options" spaces=" "><nodename>Common options</nodename><nodenext automatic="on">Output of entire files</nodenext><nodeprev automatic="on">Introduction</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>Common options</sectiontitle>

<macro name="optBackup" line=" optBackup">@item -b
@itemx @w{@kbd{--backup}[=@var{method}]}
@opindex -b
@opindex --backup
@vindex VERSION_CONTROL
@cindex backups, making
@xref{Backup options}.
Make a backup of each file that would otherwise be overwritten or removed.
</macro>

<macro name="optBackupSuffix" line=" optBackupSuffix">@item -S @var{suffix}
@itemx --suffix=@var{suffix}
@opindex -S
@opindex --suffix
Append @var{suffix} to each backup file made with @option{-b}.
@xref{Backup options}.
</macro>

<macro name="optTargetDirectory" line=" optTargetDirectory">@item -t @var{directory}
@itemx @w{@kbd{--target-directory}=@var{directory}}
@opindex -t
@opindex --target-directory
@cindex target directory
@cindex destination directory
Specify the destination @var{directory}.
@xref{Target directory}.
</macro>

<macro name="optNoTargetDirectory" line=" optNoTargetDirectory">@item -T
@itemx --no-target-directory
@opindex -T
@opindex --no-target-directory
@cindex target directory
@cindex destination directory
Do not treat the last operand specially when it is a directory or a
symbolic link to a directory.  @xref{Target directory}.
</macro>

<macro name="optNull" line=" optNull{cmd}"><formalarg>cmd</formalarg>@item -0
@opindex -0
@itemx --null
@opindex --null
@cindex output @sc{nul}-byte-terminated lines
Output a zero byte (@acronym{ASCII} @sc{nul}) at the end of each line,
rather than a newline. This option enables other programs to parse the
output of @command{\cmd\} even when that output would contain data
with embedded newlines.
</macro>

<macro name="optSi" line=" optSi">@itemx --si
@opindex --si
@cindex SI output
Append an SI-style abbreviation to each size, such as @samp{M} for
megabytes.  Powers of 1000 are used, not 1024; @samp{M} stands for
1,000,000 bytes.  This option is equivalent to
@option{--block-size=si}.  Use the @option{-h} or
@option{--human-readable} option if
you prefer powers of 1024.
</macro>

<macro name="optHumanReadable" line=" optHumanReadable">@item -h
@itemx --human-readable
@opindex -h
@opindex --human-readable
@cindex human-readable output
Append a size letter to each size, such as @samp{M} for mebibytes.
Powers of 1024 are used, not 1000; @samp{M} stands for 1,048,576 bytes.
This option is equivalent to @option{--block-size=human-readable}.
Use the @option{--si} option if you prefer powers of 1000.
</macro>

<macro name="optStripTrailingSlashes" line=" optStripTrailingSlashes">@itemx @w{@kbd{--strip-trailing-slashes}}
@opindex --strip-trailing-slashes
@cindex stripping trailing slashes
Remove any trailing slashes from each @var{source} argument.
@xref{Trailing slashes}.
</macro>

<macro name="mayConflictWithShellBuiltIn" line=" mayConflictWithShellBuiltIn{cmd}"><formalarg>cmd</formalarg>@cindex conflicts with shell built-ins
@cindex built-in shell commands, conflicts with
Due to shell aliases and built-in @command{\cmd\} functions, using an
unadorned @command{\cmd\} interactively or in a script may get you
different functionality than that described here.  Invoke it via
@command{env} (i.e., @code{env \cmd\ @dots{}}) to avoid interference
from the shell.

</macro>

<macro name="multiplierSuffixes" line=" multiplierSuffixes{varName}"><formalarg>varName</formalarg>@var{\varName\} may be, or may be an integer optionally followed by,
one of the following multiplicative suffixes:
@example
@samp{b}  =&gt;            512 (&quot;blocks&quot;)
@samp{KB} =&gt;           1000 (KiloBytes)
@samp{K}  =&gt;           1024 (KibiBytes)
@samp{MB} =&gt;      1000*1000 (MegaBytes)
@samp{M}  =&gt;      1024*1024 (MebiBytes)
@samp{GB} =&gt; 1000*1000*1000 (GigaBytes)
@samp{G}  =&gt; 1024*1024*1024 (GibiBytes)
@end example
and so on for @samp{T}, @samp{P}, @samp{E}, @samp{Z}, and @samp{Y}.
</macro>

<!-- c FIXME: same as above, but no ``blocks'' line. -->
<macro name="multiplierSuffixesNoBlocks" line=" multiplierSuffixesNoBlocks{varName}"><formalarg>varName</formalarg>@var{\varName\} may be, or may be an integer optionally followed by,
one of the following multiplicative suffixes:
@example
@samp{KB} =&gt;           1000 (KiloBytes)
@samp{K}  =&gt;           1024 (KibiBytes)
@samp{MB} =&gt;      1000*1000 (MegaBytes)
@samp{M}  =&gt;      1024*1024 (MebiBytes)
@samp{GB} =&gt; 1000*1000*1000 (GigaBytes)
@samp{G}  =&gt; 1024*1024*1024 (GibiBytes)
@end example
and so on for @samp{T}, @samp{P}, @samp{E}, @samp{Z}, and @samp{Y}.
</macro>

<cindex index="cp" spaces=" "><indexterm index="cp">common options</indexterm></cindex>

<para>Certain options are available in all of these programs.  Rather than
writing identical descriptions for each of the programs, they are
described here.  (In fact, every <sc>gnu</sc> program accepts (or should accept)
these options.)
</para>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">POSIXLY_CORRECT</indexterm></vindex>
<para>Normally options and operands can appear in any order, and programs act
as if all the options appear before any operands.  For example,
<samp>sort -r passwd -t :</samp> acts like <samp>sort -r -t : passwd</samp>, since
<samp>:</samp> is an option-argument of <option>-t</option>.  However, if the
<env>POSIXLY_CORRECT</env> environment variable is set, options must appear
before operands, unless otherwise specified for a particular command.
</para>
<para>A few programs can usefully have trailing operands with leading
<samp>-</samp>.  With such a program, options must precede operands even if
<env>POSIXLY_CORRECT</env> is not set, and this fact is noted in the
program description.  For example, the <command>env</command> command&textrsquo;s options
must appear before its operands, since in some cases the operands
specify a command that itself contains options.
</para>
<para>Most programs that accept long options recognize unambiguous
abbreviations of those options.  For example, <samp>rmdir
--ignore-fail-on-non-empty</samp> can be invoked as <samp>rmdir
--ignore-fail</samp> or even <samp>rmdir --i</samp>.  Ambiguous options, such as
<samp>ls --h</samp>, are identified as such.
</para>
<para>Some of these programs recognize the <option>--help</option> and <option>--version</option>
options only when one of them is the sole command line argument.  For
these programs, abbreviations of the long options are not always recognized.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">--help</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;help</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">help, online</indexterm></cindex>
<para>Print a usage message listing all available options, then exit successfully.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--version</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;version</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">version number, finding</indexterm></cindex>
<para>Print the version number, then exit successfully.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">option delimiter</indexterm></cindex>
<para>Delimit the option list.  Later arguments, if any, are treated as
operands even if they begin with <samp>-</samp>.  For example, <samp>sort --
-r</samp> reads from the file named <file>-r</file>.
</para>
</tableitem></tableentry></table>

<cindex index="cp" spaces=" "><indexterm index="cp">standard input</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">standard output</indexterm></cindex>
<para>A single <samp>-</samp> operand is not really an option, though it looks like one.  It
stands for standard input, or for standard output if that is clear from
the context.  For example, <samp>sort -</samp> reads from standard input,
and is equivalent to plain <samp>sort</samp>, and <samp>tee -</samp> writes an
extra copy of its input to standard output.  Unless otherwise
specified, <samp>-</samp> can appear as any operand that requires a file
name.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::                 ">Exit status</menunode><menudescription><pre xml:space="preserve">Indicating program success or failure.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::              ">Backup options</menunode><menudescription><pre xml:space="preserve">-b -S, in some programs.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::                  ">Block size</menunode><menudescription><pre xml:space="preserve">BLOCK_SIZE and &textndash;block-size, in some programs.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::              ">Floating point</menunode><menudescription><pre xml:space="preserve">Floating point number representation.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::       ">Signal specifications</menunode><menudescription><pre xml:space="preserve">Specifying signals using the &textndash;signal option.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator=":: ">Disambiguating names and IDs</menunode><menudescription><pre xml:space="preserve">chgrp and chown owner and group syntax
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::              ">Random sources</menunode><menudescription><pre xml:space="preserve">&textndash;random-source, in some programs.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">Target directory</menunode><menudescription><pre xml:space="preserve">Specifying a target directory, in some programs.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">Trailing slashes</menunode><menudescription><pre xml:space="preserve">&textndash;strip-trailing-slashes, in some programs.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::         ">Traversing symlinks</menunode><menudescription><pre xml:space="preserve">-H, -L, or -P, in some programs.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::        ">Treating / specially</menunode><menudescription><pre xml:space="preserve">&textndash;preserve-root and &textndash;no-preserve-root.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::  ">Special built-in utilities</menunode><menudescription><pre xml:space="preserve"><command>break</command>, <command>:</command>, &dots;
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::       ">Standards conformance</menunode><menudescription><pre xml:space="preserve">Conformance to the <acronym><acronymword>POSIX</acronymword></acronym> standard.
</pre></menudescription></menuentry></menu>


<node name="Exit-status" spaces=" "><nodename>Exit status</nodename><nodenext automatic="on">Backup options</nodenext><nodeup automatic="on">Common options</nodeup></node>
<section spaces=" "><sectiontitle>Exit status</sectiontitle>

<macro name="exitstatus" line=" exitstatus">An exit status of zero indicates success,
and a nonzero value indicates failure.
</macro>

<para>Nearly every command invocation yields an integral <dfn>exit status</dfn>
that can be used to change how other commands work.
For the vast majority of commands, an exit status of zero indicates
success.  Failure is indicated by a nonzero value&textmdash;typically
<samp>1</samp>, though it may differ on unusual platforms as <acronym><acronymword>POSIX</acronymword></acronym>
requires only that it be nonzero.
</para>
<para>However, some of the programs documented here do produce
other exit status values and a few associate different
meanings with the values <samp>0</samp> and <samp>1</samp>.
Here are some of the exceptions:
<command>chroot</command>, <command>env</command>, <command>expr</command>, <command>nice</command>,
<command>nohup</command>, <command>printenv</command>, <command>sort</command>, <command>stdbuf</command>,
<command>su</command>, <command>test</command>, <command>timeout</command>, <command>tty</command>.
</para>

</section>
<node name="Backup-options" spaces=" "><nodename>Backup options</nodename><nodenext automatic="on">Block size</nodenext><nodeprev automatic="on">Exit status</nodeprev><nodeup automatic="on">Common options</nodeup></node>
<section spaces=" "><sectiontitle>Backup options</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">backup options</indexterm></cindex>

<para>Some <sc>gnu</sc> programs (at least <command>cp</command>, <command>install</command>,
<command>ln</command>, and <command>mv</command>) optionally make backups of files
before writing new versions.
These options control the details of these backups.  The options are also
briefly mentioned in the descriptions of the particular programs.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-b</itemformat></item>
<itemx spaces=" "><itemformat command="samp"><w><kbd>--backup</kbd>[=<var>method</var>]</w></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-b</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;backup</indexterm></indexcommand>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">VERSION_CONTROL</indexterm></vindex>
<cindex index="cp" spaces=" "><indexterm index="cp">backups, making</indexterm></cindex>
<para>Make a backup of each file that would otherwise be overwritten or removed.
Without this option, the original versions are destroyed.
Use <var>method</var> to determine the type of backups to make.
When this option is used but <var>method</var> is not specified,
then the value of the <env>VERSION_CONTROL</env>
environment variable is used.  And if <env>VERSION_CONTROL</env> is not set,
the default backup type is <samp>existing</samp>.
</para>
<para>Note that the short form of this option, <option>-b</option> does not accept any
argument.  Using <option>-b</option> is equivalent to using <option>--backup=existing</option>.
</para>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">version-control <r>Emacs variable</r></indexterm></vindex>
<para>This option corresponds to the Emacs variable <samp>version-control</samp>;
the values for <var>method</var> are the same as those used in Emacs.
This option also accepts more descriptive names.
The valid <var>method</var>s are (unique abbreviations are accepted):
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">none</itemformat></item>
<itemx spaces=" "><itemformat command="samp">off</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">none <r>backup method</r></indexterm></indexcommand>
<para>Never make backups.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">numbered</itemformat></item>
<itemx spaces=" "><itemformat command="samp">t</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">numbered <r>backup method</r></indexterm></indexcommand>
<para>Always make numbered backups.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">existing</itemformat></item>
<itemx spaces=" "><itemformat command="samp">nil</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">existing <r>backup method</r></indexterm></indexcommand>
<para>Make numbered backups of files that already have them, simple backups
of the others.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">simple</itemformat></item>
<itemx spaces=" "><itemformat command="samp">never</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">simple <r>backup method</r></indexterm></indexcommand>
<para>Always make simple backups.  Please note <samp>never</samp> is not to be
confused with <samp>none</samp>.
</para>
</tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-S <var>suffix</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--suffix=<var>suffix</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-S</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;suffix</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">backup suffix</indexterm></cindex>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">SIMPLE_BACKUP_SUFFIX</indexterm></vindex>
<para>Append <var>suffix</var> to each backup file made with <option>-b</option>.  If this
option is not specified, the value of the <env>SIMPLE_BACKUP_SUFFIX</env>
environment variable is used.  And if <env>SIMPLE_BACKUP_SUFFIX</env> is not
set, the default is <samp>~</samp>, just as in Emacs.
</para>
</tableitem></tableentry></table>

</section>
<node name="Block-size" spaces=" "><nodename>Block size</nodename><nodenext automatic="on">Floating point</nodenext><nodeprev automatic="on">Backup options</nodeprev><nodeup automatic="on">Common options</nodeup></node>
<section spaces=" "><sectiontitle>Block size</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">block size</indexterm></cindex>

<para>Some <sc>gnu</sc> programs (at least <command>df</command>, <command>du</command>, and
<command>ls</command>) display sizes in &textldquo;blocks&textrdquo;.  You can adjust the block size
and method of display to make sizes easier to read.  The block size
used for display is independent of any file system block size.
Fractional block counts are rounded up to the nearest integer.
</para>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;block-size=<var>size</var></indexterm></indexcommand>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">BLOCKSIZE</indexterm></vindex>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">BLOCK_SIZE</indexterm></vindex>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">DF_BLOCK_SIZE</indexterm></vindex>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">DU_BLOCK_SIZE</indexterm></vindex>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">LS_BLOCK_SIZE</indexterm></vindex>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">POSIXLY_CORRECT<r>, and block size</r></indexterm></vindex>

<para>The default block size is chosen by examining the following environment
variables in turn; the first one that is set determines the block size.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="code">DF_BLOCK_SIZE</itemformat></item>
</tableterm><tableitem><para>This specifies the default block size for the <command>df</command> command.
Similarly, <env>DU_BLOCK_SIZE</env> specifies the default for <command>du</command> and
<env>LS_BLOCK_SIZE</env> for <command>ls</command>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">BLOCK_SIZE</itemformat></item>
</tableterm><tableitem><para>This specifies the default block size for all three commands, if the
above command-specific environment variables are not set.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">BLOCKSIZE</itemformat></item>
</tableterm><tableitem><para>This specifies the default block size for all values that are normally
printed as blocks, if neither <env>BLOCK_SIZE</env> nor the above
command-specific environment variables are set.  Unlike the other
environment variables, <env>BLOCKSIZE</env> does not affect values that are
normally printed as byte counts, e.g., the file sizes contained in
<code>ls -l</code> output.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">POSIXLY_CORRECT</itemformat></item>
</tableterm><tableitem><para>If neither <env><var>command</var>_BLOCK_SIZE</env>, nor <env>BLOCK_SIZE</env>, nor
<env>BLOCKSIZE</env> is set, but this variable is set, the block size
defaults to 512.
</para>
</tableitem></tableentry></table>

<para>If none of the above environment variables are set, the block size
currently defaults to 1024 bytes in most contexts, but this number may
change in the future.  For <command>ls</command> file sizes, the block size
defaults to 1 byte.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">human-readable output</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">SI output</indexterm></cindex>

<para>A block size specification can be a positive integer specifying the number
of bytes per block, or it can be <code>human-readable</code> or <code>si</code> to
select a human-readable format.  Integers may be followed by suffixes
that are upward compatible with the
<uref><urefurl>http://www.bipm.org/en/si/si_brochure/chapter3/prefixes.html</urefurl><urefdesc spaces=" ">SI prefixes</urefdesc></uref>
for decimal multiples and with the
<uref><urefurl>http://physics.nist.gov/cuu/Units/binary.html</urefurl><urefdesc spaces=" ">ISO/IEC 80000-13
(formerly IEC 60027-2) prefixes</urefdesc></uref> for binary multiples.
</para>
<para>With human-readable formats, output sizes are followed by a size letter
such as <samp>M</samp> for megabytes.  <code>BLOCK_SIZE=human-readable</code> uses
powers of 1024; <samp>M</samp> stands for 1,048,576 bytes.
<code>BLOCK_SIZE=si</code> is similar, but uses powers of 1000 and appends
<samp>B</samp>; <samp>MB</samp> stands for 1,000,000 bytes.
</para>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">LC_NUMERIC</indexterm></vindex>
<para>A block size specification preceded by <samp>'</samp> causes output sizes to
be displayed with thousands separators.  The <env>LC_NUMERIC</env> locale
specifies the thousands separator and grouping.  For example, in an
American English locale, <samp>--block-size=&quot;'1kB&quot;</samp> would cause a size
of 1234000 bytes to be displayed as <samp>1,234</samp>.  In the default C
locale, there is no thousands separator so a leading <samp>'</samp> has no
effect.
</para>
<para>An integer block size can be followed by a suffix to specify a
multiple of that size.  A bare size letter,
or one followed by <samp>iB</samp>, specifies
a multiple using powers of 1024.  A size letter followed by <samp>B</samp>
specifies powers of 1000 instead.  For example, <samp>1M</samp> and
<samp>1MiB</samp> are equivalent to <samp>1048576</samp>, whereas <samp>1MB</samp> is
equivalent to <samp>1000000</samp>.
</para>
<para>A plain suffix without a preceding integer acts as if <samp>1</samp> were
prepended, except that it causes a size indication to be appended to
the output.  For example, <samp>--block-size=&quot;kB&quot;</samp> displays 3000 as
<samp>3kB</samp>.
</para>
<para>The following suffixes are defined.  Large sizes like <code>1Y</code>
may be rejected by your computer due to limitations of its arithmetic.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">kB</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp">kilobyte, definition of</indexterm></cindex>
<para>kilobyte: <math>10^3 = 1000</math>.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">k</itemformat></item>
<itemx spaces=" "><itemformat command="samp">K</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">KiB</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp">kibibyte, definition of</indexterm></cindex>
<para>kibibyte: <math>2^{10} = 1024</math>.  <samp>K</samp> is special: the SI prefix is
<samp>k</samp> and the ISO/IEC 80000-13 prefix is <samp>Ki</samp>, but tradition and
<acronym><acronymword>POSIX</acronymword></acronym> use <samp>k</samp> to mean <samp>KiB</samp>.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">MB</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp">megabyte, definition of</indexterm></cindex>
<para>megabyte: <math>10^6 = 1,000,000</math>.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">M</itemformat></item>
<itemx spaces=" "><itemformat command="samp">MiB</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp">mebibyte, definition of</indexterm></cindex>
<para>mebibyte: <math>2^{20} = 1,048,576</math>.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">GB</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp">gigabyte, definition of</indexterm></cindex>
<para>gigabyte: <math>10^9 = 1,000,000,000</math>.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">G</itemformat></item>
<itemx spaces=" "><itemformat command="samp">GiB</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp">gibibyte, definition of</indexterm></cindex>
<para>gibibyte: <math>2^{30} = 1,073,741,824</math>.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">TB</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp">terabyte, definition of</indexterm></cindex>
<para>terabyte:  <math>10^{12} = 1,000,000,000,000</math>.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">T</itemformat></item>
<itemx spaces=" "><itemformat command="samp">TiB</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp">tebibyte, definition of</indexterm></cindex>
<para>tebibyte: <math>2^{40} = 1,099,511,627,776</math>.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">PB</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp">petabyte, definition of</indexterm></cindex>
<para>petabyte: <math>10^{15} = 1,000,000,000,000,000</math>.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">P</itemformat></item>
<itemx spaces=" "><itemformat command="samp">PiB</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp">pebibyte, definition of</indexterm></cindex>
<para>pebibyte: <math>2^{50} = 1,125,899,906,842,624</math>.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">EB</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp">exabyte, definition of</indexterm></cindex>
<para>exabyte: <math>10^{18} = 1,000,000,000,000,000,000</math>.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">E</itemformat></item>
<itemx spaces=" "><itemformat command="samp">EiB</itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp">exbibyte, definition of</indexterm></cindex>
<para>exbibyte: <math>2^{60} = 1,152,921,504,606,846,976</math>.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ZB</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp">zettabyte, definition of</indexterm></cindex>
<para>zettabyte: <math>10^{21} = 1,000,000,000,000,000,000,000</math>
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">Z</itemformat></item>
<itemx spaces=" "><itemformat command="samp">ZiB</itemformat></itemx>
</tableterm><tableitem><para><math>2^{70} = 1,180,591,620,717,411,303,424</math>.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">YB</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp">yottabyte, definition of</indexterm></cindex>
<para>yottabyte: <math>10^{24} = 1,000,000,000,000,000,000,000,000</math>.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">Y</itemformat></item>
<itemx spaces=" "><itemformat command="samp">YiB</itemformat></itemx>
</tableterm><tableitem><para><math>2^{80} = 1,208,925,819,614,629,174,706,176</math>.
</para></tableitem></tableentry></table>

<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-k</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-h</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;block-size</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;human-readable</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;si</indexterm></indexcommand>

<para>Block size defaults can be overridden by an explicit
<option>--block-size=<var>size</var></option> option.  The <option>-k</option>
option is equivalent to <option>--block-size=1K</option>, which
is the default unless the <env>POSIXLY_CORRECT</env> environment variable is
set.  The <option>-h</option> or <option>--human-readable</option> option is equivalent to
<option>--block-size=human-readable</option>.  The <option>--si</option> option is
equivalent to <option>--block-size=si</option>.
</para>
</section>
<node name="Floating-point" spaces=" "><nodename>Floating point</nodename><nodenext automatic="on">Signal specifications</nodenext><nodeprev automatic="on">Block size</nodeprev><nodeup automatic="on">Common options</nodeup></node>
<section spaces=" "><sectiontitle>Floating point numbers</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp">floating point</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">IEEE floating point</indexterm></cindex>

<para>Commands that accept or produce floating point numbers employ the
floating point representation of the underlying system, and suffer
from rounding error, overflow, and similar floating-point issues.
Almost all modern systems use IEEE-754 floating point, and it is
typically portable to assume IEEE-754 behavior these days.  IEEE-754
has positive and negative infinity, distinguishes positive from
negative zero, and uses special values called NaNs to represent
invalid computations such as dividing zero by itself.  For more
information, please see David Goldberg&textrsquo;s paper
<uref><urefurl>http://&slashbreak;www.validlab.com/&slashbreak;goldberg/&slashbreak;paper.pdf</urefurl><urefdesc spaces=" ">What Every
Computer Scientist Should Know About Floating-Point Arithmetic</urefdesc></uref>.
</para>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">LC_NUMERIC</indexterm></vindex>
<para>Commands that accept floating point numbers as options, operands or
input use the standard C functions <code>strtod</code> and <code>strtold</code> to
convert from text to floating point numbers.  These floating point
numbers therefore can use scientific notation like <code>1.0e-34</code> and
<code>-10e100</code>.  Modern C implementations also accept hexadecimal
floating point numbers such as <code>-0x.ep-3</code>, which stands for
&minus;14/16 times <math>2^-3</math>, which equals &minus;0.109375.  The
<env>LC_NUMERIC</env> locale determines the decimal-point character.
<xref><xrefnodename>Parsing of Floats</xrefnodename><xrefinfofile spaces=" ">libc</xrefinfofile><xrefprintedname spaces=" ">The GNU C Library Reference Manual</xrefprintedname></xref>.
</para>
</section>
<node name="Signal-specifications" spaces=" "><nodename>Signal specifications</nodename><nodenext automatic="on">Disambiguating names and IDs</nodenext><nodeprev automatic="on">Floating point</nodeprev><nodeup automatic="on">Common options</nodeup></node>
<section spaces=" "><sectiontitle>Signal specifications</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp">signals, specifying</indexterm></cindex>

<para>A <var>signal</var> may be a signal name like <samp>HUP</samp>, or a signal
number like <samp>1</samp>, or an exit status of a process terminated by the
signal.  A signal name can be given in canonical form or prefixed by
<samp>SIG</samp>.  The case of the letters is ignored. The following signal names
and numbers are supported on all <acronym><acronymword>POSIX</acronymword></acronym> compliant systems:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">HUP</itemformat></item>
</tableterm><tableitem><para>1.  Hangup.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">INT</itemformat></item>
</tableterm><tableitem><para>2.  Terminal interrupt.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">QUIT</itemformat></item>
</tableterm><tableitem><para>3.  Terminal quit.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ABRT</itemformat></item>
</tableterm><tableitem><para>6.  Process abort.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">KILL</itemformat></item>
</tableterm><tableitem><para>9.  Kill (cannot be caught or ignored).
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ALRM</itemformat></item>
</tableterm><tableitem><para>14.  Alarm Clock.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">TERM</itemformat></item>
</tableterm><tableitem><para>15.  Termination.
</para></tableitem></tableentry></table>

<noindent></noindent>
<para>Other supported signal names have system-dependent corresponding
numbers.  All systems conforming to <acronym><acronymword>POSIX</acronymword></acronym> 1003.1-2001 also
support the following signals:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">BUS</itemformat></item>
</tableterm><tableitem><para>Access to an undefined portion of a memory object.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">CHLD</itemformat></item>
</tableterm><tableitem><para>Child process terminated, stopped, or continued.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">CONT</itemformat></item>
</tableterm><tableitem><para>Continue executing, if stopped.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">FPE</itemformat></item>
</tableterm><tableitem><para>Erroneous arithmetic operation.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ILL</itemformat></item>
</tableterm><tableitem><para>Illegal Instruction.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">PIPE</itemformat></item>
</tableterm><tableitem><para>Write on a pipe with no one to read it.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">SEGV</itemformat></item>
</tableterm><tableitem><para>Invalid memory reference.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">STOP</itemformat></item>
</tableterm><tableitem><para>Stop executing (cannot be caught or ignored).
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">TSTP</itemformat></item>
</tableterm><tableitem><para>Terminal stop.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">TTIN</itemformat></item>
</tableterm><tableitem><para>Background process attempting read.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">TTOU</itemformat></item>
</tableterm><tableitem><para>Background process attempting write.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">URG</itemformat></item>
</tableterm><tableitem><para>High bandwidth data is available at a socket.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">USR1</itemformat></item>
</tableterm><tableitem><para>User-defined signal 1.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">USR2</itemformat></item>
</tableterm><tableitem><para>User-defined signal 2.
</para></tableitem></tableentry></table>

<noindent></noindent>
<para><acronym><acronymword>POSIX</acronymword></acronym> 1003.1-2001 systems that support the <acronym><acronymword>XSI</acronymword></acronym> extension
also support the following signals:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">POLL</itemformat></item>
</tableterm><tableitem><para>Pollable event.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">PROF</itemformat></item>
</tableterm><tableitem><para>Profiling timer expired.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">SYS</itemformat></item>
</tableterm><tableitem><para>Bad system call.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">TRAP</itemformat></item>
</tableterm><tableitem><para>Trace/breakpoint trap.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">VTALRM</itemformat></item>
</tableterm><tableitem><para>Virtual timer expired.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">XCPU</itemformat></item>
</tableterm><tableitem><para>CPU time limit exceeded.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">XFSZ</itemformat></item>
</tableterm><tableitem><para>File size limit exceeded.
</para></tableitem></tableentry></table>

<noindent></noindent>
<para><acronym><acronymword>POSIX</acronymword></acronym> 1003.1-2001 systems that support the <acronym><acronymword>XRT</acronymword></acronym> extension
also support at least eight real-time signals called <samp>RTMIN</samp>,
<samp>RTMIN+1</samp>, &dots;, <samp>RTMAX-1</samp>, <samp>RTMAX</samp>.
</para>
</section>
<node name="Disambiguating-names-and-IDs" spaces=" "><nodename>Disambiguating names and IDs</nodename><nodenext automatic="on">Random sources</nodenext><nodeprev automatic="on">Signal specifications</nodeprev><nodeup automatic="on">Common options</nodeup></node>
<section spaces=" "><sectiontitle>chown and chgrp: Disambiguating user names and IDs</sectiontitle>
<cindex index="cp" spaces=" "><indexterm index="cp">user names, disambiguating</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">user IDs, disambiguating</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">group names, disambiguating</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">group IDs, disambiguating</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">disambiguating group names and IDs</indexterm></cindex>

<para>Since the <var>owner</var> and <var>group</var> arguments to <command>chown</command> and
<command>chgrp</command> may be specified as names or numeric IDs, there is an
apparent ambiguity.
What if a user or group <emph>name</emph> is a string of digits?
<footnote><para>Using a number as a user name is common in some environments.</para></footnote>
Should the command interpret it as a user name or as an ID?
<acronym><acronymword>POSIX</acronymword></acronym> requires that <command>chown</command> and <command>chgrp</command>
first attempt to resolve the specified string as a name, and
only once that fails, then try to interpret it as an ID.
This is troublesome when you want to specify a numeric ID, say 42,
and it must work even in a pathological situation where
<samp>42</samp> is a user name that maps to some other user ID, say 1000.
Simply invoking <code>chown 42 F</code>, will set <file>F</file>s owner ID to
1000&textmdash;not what you intended.
</para>
<para>GNU <command>chown</command> and <command>chgrp</command> provide a way to work around this,
that at the same time may result in a significant performance improvement
by eliminating a database look-up.
Simply precede each numeric user ID and/or group ID with a <samp>+</samp>,
in order to force its interpretation as an integer:
</para>
<example endspaces=" ">
<pre xml:space="preserve">chown +42 F
chgrp +$numeric_group_id another-file
chown +0:+0 /
</pre></example>

<para>GNU <command>chown</command> and <command>chgrp</command>
skip the name look-up process for each <samp>+</samp>-prefixed string,
because a string containing <samp>+</samp> is never a valid user or group name.
This syntax is accepted on most common Unix systems, but not on Solaris 10.
</para>
</section>
<node name="Random-sources" spaces=" "><nodename>Random sources</nodename><nodenext automatic="on">Target directory</nodenext><nodeprev automatic="on">Disambiguating names and IDs</nodeprev><nodeup automatic="on">Common options</nodeup></node>
<section spaces=" "><sectiontitle>Sources of random data</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">random sources</indexterm></cindex>

<para>The <command>shuf</command>, <command>shred</command>, and <command>sort</command> commands
sometimes need random data to do their work.  For example, <samp>sort
-R</samp> must choose a hash function at random, and it needs random data to
make this selection.
</para>
<para>By default these commands use an internal pseudorandom generator
initialized by a small amount of entropy, but can be directed to use
an external source with the <option>--random-source=<var>file</var></option> option.
An error is reported if <var>file</var> does not contain enough bytes.
</para>
<para>For example, the device file <file>/dev/urandom</file> could be used as the
source of random data.  Typically, this device gathers environmental
noise from device drivers and other sources into an entropy pool, and
uses the pool to generate random bits.  If the pool is short of data,
the device reuses the internal pool to produce more bits, using a
cryptographically secure pseudorandom number generator.  But be aware
that this device is not designed for bulk random data generation
and is relatively slow.
</para>
<para><file>/dev/urandom</file> suffices for most practical uses, but applications
requiring high-value or long-term protection of private data may
require an alternate data source like <file>/dev/random</file> or
<file>/dev/arandom</file>.  The set of available sources depends on your
operating system.
</para>
<para>To reproduce the results of an earlier invocation of a command, you
can save some random data into a file and then use that file as the
random source in earlier and later invocations of the command.
</para>
</section>
<node name="Target-directory" spaces=" "><nodename>Target directory</nodename><nodenext automatic="on">Trailing slashes</nodenext><nodeprev automatic="on">Random sources</nodeprev><nodeup automatic="on">Common options</nodeup></node>
<section spaces=" "><sectiontitle>Target directory</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">target directory</indexterm></cindex>

<para>The <command>cp</command>, <command>install</command>, <command>ln</command>, and <command>mv</command>
commands normally treat the last operand specially when it is a
directory or a symbolic link to a directory.  For example, <samp>cp
source dest</samp> is equivalent to <samp>cp source dest/source</samp> if
<file>dest</file> is a directory.  Sometimes this behavior is not exactly
what is wanted, so these commands support the following options to
allow more fine-grained control:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-T</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--no-target-directory</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;no-target-directory</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">target directory</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">destination directory</indexterm></cindex>
<para>Do not treat the last operand specially when it is a directory or a
symbolic link to a directory.  This can help avoid race conditions in
programs that operate in a shared area.  For example, when the command
<samp>mv /tmp/source /tmp/dest</samp> succeeds, there is no guarantee that
<file>/tmp/source</file> was renamed to <file>/tmp/dest</file>: it could have been
renamed to <file>/tmp/dest/source</file> instead, if some other process
created <file>/tmp/dest</file> as a directory.  However, if <file>mv
-T /tmp/source /tmp/dest</file> succeeds, there is no
question that <file>/tmp/source</file> was renamed to <file>/tmp/dest</file>.
</para>
<para>In the opposite situation, where you want the last operand to be
treated as a directory and want a diagnostic otherwise, you can use
the <option>--target-directory</option> (<option>-t</option>) option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-t <var>directory</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp"><w><kbd>--target-directory</kbd>=<var>directory</var></w></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;target-directory</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">target directory</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">destination directory</indexterm></cindex>
<para>Use <var>directory</var> as the directory component of each destination
file name.
</para>
<para>The interface for most programs is that after processing options and a
finite (possibly zero) number of fixed-position arguments, the remaining
argument list is either expected to be empty, or is a list of items
(usually files) that will all be handled identically.  The <command>xargs</command>
program is designed to work well with this convention.
</para>
<para>The commands in the <command>mv</command>-family are unusual in that they take
a variable number of arguments with a special case at the <emph>end</emph>
(namely, the target directory).  This makes it nontrivial to perform some
operations, e.g., &textldquo;move all files from here to ../d/&textrdquo;, because
<code>mv * ../d/</code> might exhaust the argument space, and <code>ls | xargs ...</code>
doesn&textrsquo;t have a clean way to specify an extra final argument for each
invocation of the subject command.  (It can be done by going through a
shell command, but that requires more human labor and brain power than
it should.)
</para>
<para>The <w><kbd>--target-directory</kbd></w> (<option>-t</option>) option allows the <command>cp</command>,
<command>install</command>, <command>ln</command>, and <command>mv</command> programs to be used
conveniently with <command>xargs</command>.  For example, you can move the files
from the current directory to a sibling directory, <code>d</code> like this:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">ls | xargs mv -t ../d --
</pre></smallexample>

<para>However, this doesn&textrsquo;t move files whose names begin with <samp>.</samp>.
If you use the <sc>gnu</sc> <command>find</command> program, you can move those
files too, with this command:
</para>
<example endspaces=" ">
<pre xml:space="preserve">find . -mindepth 1 -maxdepth 1 \
  | xargs mv -t ../d
</pre></example>

<para>But both of the above approaches fail if there are no files in the
current directory, or if any file has a name containing a blank or
some other special characters.
The following example removes those limitations and requires both
<sc>gnu</sc> <command>find</command> and <sc>gnu</sc> <command>xargs</command>:
</para>
<example endspaces=" ">
<pre xml:space="preserve">find . -mindepth 1 -maxdepth 1 -print0 \
  | xargs --null --no-run-if-empty \
      mv -t ../d
</pre></example>

</tableitem></tableentry></table>

<noindent></noindent>
<para>The <option>--target-directory</option> (<option>-t</option>) and
<option>--no-target-directory</option> (<option>-T</option>)
options cannot be combined.
</para>
</section>
<node name="Trailing-slashes" spaces=" "><nodename>Trailing slashes</nodename><nodenext automatic="on">Traversing symlinks</nodenext><nodeprev automatic="on">Target directory</nodeprev><nodeup automatic="on">Common options</nodeup></node>
<section spaces=" "><sectiontitle>Trailing slashes</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">trailing slashes</indexterm></cindex>

<para>Some <sc>gnu</sc> programs (at least <command>cp</command> and <command>mv</command>) allow you to
remove any trailing slashes from each <var>source</var> argument before
operating on it.  The <w><kbd>--strip-trailing-slashes</kbd></w> option enables
this behavior.
</para>
<para>This is useful when a <var>source</var> argument may have a trailing slash and
<!-- c FIXME: mv's behavior in this case is system-dependent -->
specify a symbolic link to a directory.  This scenario is in fact rather
common because some shells can automatically append a trailing slash when
performing file name completion on such symbolic links.  Without this
option, <command>mv</command>, for example, (via the system&textrsquo;s rename function) must
interpret a trailing slash as a request to dereference the symbolic link
and so must rename the indirectly referenced <emph>directory</emph> and not
the symbolic link.  Although it may seem surprising that such behavior
be the default, it is required by <acronym><acronymword>POSIX</acronymword></acronym> and is consistent with
other parts of that standard.
</para>
</section>
<node name="Traversing-symlinks" spaces=" "><nodename>Traversing symlinks</nodename><nodenext automatic="on">Treating / specially</nodenext><nodeprev automatic="on">Trailing slashes</nodeprev><nodeup automatic="on">Common options</nodeup></node>
<section spaces=" "><sectiontitle>Traversing symlinks</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">symbolic link to directory, controlling traversal of</indexterm></cindex>

<para>The following options modify how <command>chown</command> and <command>chgrp</command>
<!-- c FIXME: note that `du' has these options, too, but they have slightly -->
<!-- c different meaning. -->
traverse a hierarchy when the <option>--recursive</option> (<option>-R</option>)
option is also specified.
If more than one of the following options is specified, only the final
one takes effect.
These options specify whether processing a symbolic link to a directory
entails operating on just the symbolic link or on all files in the
hierarchy rooted at that directory.
</para>
<para>These options are independent of <option>--dereference</option> and
<option>--no-dereference</option> (<option>-h</option>), which control whether to modify
a symlink or its referent.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
<macro name="choptH" line=" choptH">@item -H
@opindex -H
@cindex symbolic link to directory, traverse if on the command line
If @option{--recursive} (@option{-R}) is specified and
a command line argument is a symbolic link to a directory, traverse it.
</macro>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-H</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-H</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">symbolic link to directory, traverse if on the command line</indexterm></cindex>
<para>If <option>--recursive</option> (<option>-R</option>) is specified and
a command line argument is a symbolic link to a directory, traverse it.
</para>
<macro name="choptL" line=" choptL">@item -L
@opindex -L
@cindex symbolic link to directory, traverse each that is encountered
In a recursive traversal, traverse every symbolic link to a directory
that is encountered.
</macro>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-L</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-L</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">symbolic link to directory, traverse each that is encountered</indexterm></cindex>
<para>In a recursive traversal, traverse every symbolic link to a directory
that is encountered.
</para>
<macro name="choptP" line=" choptP">@item -P
@opindex -P
@cindex symbolic link to directory, never traverse
Do not traverse any symbolic links.
This is the default if none of @option{-H}, @option{-L},
or @option{-P} is specified.
</macro>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-P</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-P</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">symbolic link to directory, never traverse</indexterm></cindex>
<para>Do not traverse any symbolic links.
This is the default if none of <option>-H</option>, <option>-L</option>,
or <option>-P</option> is specified.
</para>
</tableitem></tableentry></table>


</section>
<node name="Treating-_002f-specially" spaces=" "><nodename>Treating / specially</nodename><nodenext automatic="on">Special built-in utilities</nodenext><nodeprev automatic="on">Traversing symlinks</nodeprev><nodeup automatic="on">Common options</nodeup></node>
<section spaces=" "><sectiontitle>Treating <file>/</file> specially</sectiontitle>

<para>Certain commands can operate destructively on entire hierarchies.
For example, if a user with appropriate privileges mistakenly runs
<samp>rm -rf / tmp/junk</samp>, that may remove
all files on the entire system.  Since there are so few
legitimate uses for such a command,
<sc>gnu</sc> <command>rm</command> normally declines to operate on any directory
that resolves to <file>/</file>.  If you really want to try to remove all
the files on your system, you can use the <option>--no-preserve-root</option>
option, but the default behavior, specified by the
<option>--preserve-option</option>, is safer for most purposes.
</para>
<para>The commands <command>chgrp</command>, <command>chmod</command> and <command>chown</command>
can also operate destructively on entire hierarchies, so they too
support these options.  Although, unlike <command>rm</command>, they don&textrsquo;t
actually unlink files, these commands are arguably more dangerous
when operating recursively on <file>/</file>, since they often work much
more quickly, and hence damage more files before an alert user can
interrupt them.  Tradition and <acronym><acronymword>POSIX</acronymword></acronym> require these commands
to operate recursively on <file>/</file>, so they default to
<option>--no-preserve-root</option>, but using the <option>--preserve-root</option>
option makes them safer for most purposes.  For convenience you can
specify <option>--preserve-root</option> in an alias or in a shell function.
</para>
<para>Note that the <option>--preserve-root</option> option also ensures
that <command>chgrp</command> and <command>chown</command> do not modify <file>/</file>
even when dereferencing a symlink pointing to <file>/</file>.
</para>
</section>
<node name="Special-built_002din-utilities" spaces=" "><nodename>Special built-in utilities</nodename><nodenext automatic="on">Standards conformance</nodenext><nodeprev automatic="on">Treating / specially</nodeprev><nodeup automatic="on">Common options</nodeup></node>
<section spaces=" "><sectiontitle>Special built-in utilities</sectiontitle>

<para>Some programs like <command>nice</command> can invoke other programs; for
example, the command <samp>nice cat file</samp> invokes the program
<command>cat</command> by executing the command <samp>cat file</samp>.  However,
<dfn>special built-in utilities</dfn> like <command>exit</command> cannot be invoked
this way.  For example, the command <samp>nice exit</samp> does not have a
well-defined behavior: it may generate an error message instead of
exiting.
</para>
<para>Here is a list of the special built-in utilities that are standardized
by <acronym><acronymword>POSIX</acronymword></acronym> 1003.1-2004.
</para>
<quotation endspaces=" ">
<para><t>.&noeos; : break continue eval exec exit export readonly
return set shift times trap unset</t>
</para></quotation>

<para>For example, because <samp>.</samp>, <samp>:</samp>, and <samp>exec</samp> are special,
the commands <samp>nice . foo.sh</samp>, <samp>nice :</samp>, and <samp>nice exec
pwd</samp> do not work as you might expect.
</para>
<para>Many shells extend this list.  For example, Bash has several extra
special built-in utilities like <command>history</command>, and
<command>suspend</command>, and with Bash the command <samp>nice suspend</samp>
generates an error message instead of suspending.
</para>
</section>
<node name="Standards-conformance" spaces=" "><nodename>Standards conformance</nodename><nodeprev automatic="on">Special built-in utilities</nodeprev><nodeup automatic="on">Common options</nodeup></node>
<section spaces=" "><sectiontitle>Standards conformance</sectiontitle>

<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">POSIXLY_CORRECT</indexterm></vindex>
<para>In a few cases, the <sc>gnu</sc> utilities&textrsquo; default behavior is
incompatible with the <acronym><acronymword>POSIX</acronymword></acronym> standard.  To suppress these
incompatibilities, define the <env>POSIXLY_CORRECT</env> environment
variable.  Unless you are checking for <acronym><acronymword>POSIX</acronymword></acronym> conformance, you
probably do not need to define <env>POSIXLY_CORRECT</env>.
</para>
<para>Newer versions of <acronym><acronymword>POSIX</acronymword></acronym> are occasionally incompatible with older
versions.  For example, older versions of <acronym><acronymword>POSIX</acronymword></acronym> required the
command <samp>sort +1</samp> to sort based on the second and succeeding
fields in each input line, but starting with <acronym><acronymword>POSIX</acronymword></acronym> 1003.1-2001
the same command is required to sort the file named <file>+1</file>, and you
must instead use the command <samp>sort -k 2</samp> to get the field-based
sort.
</para>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">_POSIX2_VERSION</indexterm></vindex>
<para>The <sc>gnu</sc> utilities normally conform to the version of <acronym><acronymword>POSIX</acronymword></acronym>
that is standard for your system.  To cause them to conform to a
different version of <acronym><acronymword>POSIX</acronymword></acronym>, define the <env>_POSIX2_VERSION</env>
environment variable to a value of the form <var>yyyymm</var> specifying
the year and month the standard was adopted.  Three values are currently
supported for <env>_POSIX2_VERSION</env>: <samp>199209</samp> stands for
<acronym><acronymword>POSIX</acronymword></acronym> 1003.2-1992, <samp>200112</samp> stands for <acronym><acronymword>POSIX</acronymword></acronym>
1003.1-2001, and <samp>200809</samp> stands for <acronym><acronymword>POSIX</acronymword></acronym> 1003.1-2008.
For example, if you have a newer system but are running software
that assumes an older version of <acronym><acronymword>POSIX</acronymword></acronym> and uses <samp>sort +1</samp>
or <samp>tail +10</samp>, you can work around any compatibility problems by setting
<samp>_POSIX2_VERSION=199209</samp> in your environment.
</para>
</section>
</chapter>
<node name="Output-of-entire-files" spaces=" "><nodename>Output of entire files</nodename><nodenext automatic="on">Formatting file contents</nodenext><nodeprev automatic="on">Common options</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>Output of entire files</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">output of entire files</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">entire files, output of</indexterm></cindex>

<para>These commands read and write entire files, possibly transforming them
in some way.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::              ">cat invocation</menunode><menudescription><pre xml:space="preserve">Concatenate and write files.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::              ">tac invocation</menunode><menudescription><pre xml:space="preserve">Concatenate and write files in reverse.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::               ">nl invocation</menunode><menudescription><pre xml:space="preserve">Number lines and write files.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::               ">od invocation</menunode><menudescription><pre xml:space="preserve">Write files in octal or other formats.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::           ">base64 invocation</menunode><menudescription><pre xml:space="preserve">Transform data into printable data.
</pre></menudescription></menuentry></menu>

<node name="cat-invocation" spaces=" "><nodename>cat invocation</nodename><nodenext automatic="on">tac invocation</nodenext><nodeup automatic="on">Output of entire files</nodeup></node>
<section spaces=" "><sectiontitle><command>cat</command>: Concatenate and write files</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">cat</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">concatenate and write files</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">copying files</indexterm></cindex>

<para><command>cat</command> copies each <var>file</var> (<samp>-</samp> means standard input), or
standard input if none are given, to standard output.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">cat [<var>option</var>] [<var>file</var>]&dots;
</pre></example>

<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-A</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--show-all</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-A</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;show-all</indexterm></indexcommand>
<para>Equivalent to <option>-vET</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-b</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--number-nonblank</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-b</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;number-nonblank</indexterm></indexcommand>
<para>Number all nonempty output lines, starting with 1.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-e</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-e</indexterm></indexcommand>
<para>Equivalent to <option>-vE</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-E</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--show-ends</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-E</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;show-ends</indexterm></indexcommand>
<para>Display a <samp>$</samp> after the end of each line.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-n</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--number</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-n</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;number</indexterm></indexcommand>
<para>Number all output lines, starting with 1.  This option is ignored
if <option>-b</option> is in effect.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-s</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--squeeze-blank</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-s</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;squeeze-blank</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">squeezing empty lines</indexterm></cindex>
<para>Suppress repeated adjacent empty lines; output just one empty line
instead of several.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-t</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-t</indexterm></indexcommand>
<para>Equivalent to <option>-vT</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-T</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--show-tabs</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-T</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;show-tabs</indexterm></indexcommand>
<para>Display TAB characters as <samp>^I</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-u</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-u</indexterm></indexcommand>
<para>Ignored; for <acronym><acronymword>POSIX</acronymword></acronym> compatibility.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-v</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--show-nonprinting</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-v</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;show-nonprinting</indexterm></indexcommand>
<para>Display control characters except for LFD and TAB using
<samp>^</samp> notation and precede characters that have the high bit set with
<samp>M-</samp>.
</para>
</tableitem></tableentry></table>

<para>On systems like MS-DOS that distinguish between text and binary files,
<command>cat</command> normally reads and writes in binary mode.  However,
<command>cat</command> reads in text mode if one of the options
<option>-bensAE</option> is used or if <command>cat</command> is reading from standard
input and standard input is a terminal.  Similarly, <command>cat</command>
writes in text mode if one of the options <option>-bensAE</option> is used or
if standard output is a terminal.
</para>
<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>
<para>Examples:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve"># Output f's contents, then standard input, then g's contents.
cat f - g

# Copy standard input to standard output.
cat
</pre></smallexample>


</section>
<node name="tac-invocation" spaces=" "><nodename>tac invocation</nodename><nodenext automatic="on">nl invocation</nodenext><nodeprev automatic="on">cat invocation</nodeprev><nodeup automatic="on">Output of entire files</nodeup></node>
<section spaces=" "><sectiontitle><command>tac</command>: Concatenate and write files in reverse</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">tac</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">reversing files</indexterm></cindex>

<para><command>tac</command> copies each <var>file</var> (<samp>-</samp> means standard input), or
standard input if none are given, to standard output, reversing the
records (lines by default) in each separately.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">tac [<var>option</var>]&dots; [<var>file</var>]&dots;
</pre></example>

<para><dfn>Records</dfn> are separated by instances of a string (newline by
default).  By default, this separator string is attached to the end of
the record that it follows in the file.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-b</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--before</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-b</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;before</indexterm></indexcommand>
<para>The separator is attached to the beginning of the record that it
precedes in the file.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-r</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--regex</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-r</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;regex</indexterm></indexcommand>
<para>Treat the separator string as a regular expression.  Users of <command>tac</command>
on MS-DOS/MS-Windows should note that, since <command>tac</command> reads files in
binary mode, each line of a text file might end with a CR/LF pair
instead of the Unix-style LF.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-s <var>separator</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--separator=<var>separator</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-s</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;separator</indexterm></indexcommand>
<para>Use <var>separator</var> as the record separator, instead of newline.
</para>
</tableitem></tableentry></table>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="nl-invocation" spaces=" "><nodename>nl invocation</nodename><nodenext automatic="on">od invocation</nodenext><nodeprev automatic="on">tac invocation</nodeprev><nodeup automatic="on">Output of entire files</nodeup></node>
<section spaces=" "><sectiontitle><command>nl</command>: Number lines and write files</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">nl</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">numbering lines</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">line numbering</indexterm></cindex>

<para><command>nl</command> writes each <var>file</var> (<samp>-</samp> means standard input), or
standard input if none are given, to standard output, with line numbers
added to some or all of the lines.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">nl [<var>option</var>]&dots; [<var>file</var>]&dots;
</pre></example>

<cindex index="cp" spaces=" "><indexterm index="cp">logical pages, numbering on</indexterm></cindex>
<para><command>nl</command> decomposes its input into (logical) pages; by default, the
line number is reset to 1 at the top of each logical page.  <command>nl</command>
treats all of the input files as a single document; it does not reset
line numbers or logical pages between files.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">headers, numbering</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">body, numbering</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">footers, numbering</indexterm></cindex>
<para>A logical page consists of three sections: header, body, and footer.
Any of the sections can be empty.  Each can be numbered in a different
style from the others.
</para>
<para>The beginnings of the sections of logical pages are indicated in the
input file by a line containing exactly one of these delimiter strings:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">\:\:\:</itemformat></item>
</tableterm><tableitem><para>start of header;
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">\:\:</itemformat></item>
</tableterm><tableitem><para>start of body;
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">\:</itemformat></item>
</tableterm><tableitem><para>start of footer.
</para></tableitem></tableentry></table>

<para>The two characters from which these strings are made can be changed from
<samp>\</samp> and <samp>:</samp> via options (see below), but the pattern and
length of each string cannot be changed.
</para>
<para>A section delimiter is replaced by an empty line on output.  Any text
that comes before the first section delimiter string in the input file
is considered to be part of a body section, so <command>nl</command> treats a
file that contains no section delimiters as a single body section.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-b <var>style</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--body-numbering=<var>style</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-b</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;body-numbering</indexterm></indexcommand>
<para>Select the numbering style for lines in the body section of each
logical page.  When a line is not numbered, the current line number
is not incremented, but the line number separator character is still
prepended to the line.  The styles are:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">a</itemformat></item>
</tableterm><tableitem><para>number all lines,
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">t</itemformat></item>
</tableterm><tableitem><para>number only nonempty lines (default for body),
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">n</itemformat></item>
</tableterm><tableitem><para>do not number lines (default for header and footer),
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">p<var>bre</var></itemformat></item>
</tableterm><tableitem><para>number only lines that contain a match for the basic regular
expression <var>bre</var>.
<xref><xrefnodename>Regular Expressions</xrefnodename><xrefinfoname spaces=" "></xrefinfoname><xrefprinteddesc spaces=" ">Regular Expressions</xrefprinteddesc><xrefinfofile spaces=" ">grep</xrefinfofile><xrefprintedname spaces=" ">The GNU Grep Manual</xrefprintedname></xref>.
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-d <var>cd</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--section-delimiter=<var>cd</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-d</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;section-delimiter</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">section delimiters of pages</indexterm></cindex>
<para>Set the section delimiter characters to <var>cd</var>; default is
<samp>\:</samp>.  If only <var>c</var> is given, the second remains <samp>:</samp>.
(Remember to protect <samp>\</samp> or other metacharacters from shell
expansion with quotes or extra backslashes.)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-f <var>style</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--footer-numbering=<var>style</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-f</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;footer-numbering</indexterm></indexcommand>
<para>Analogous to <option>--body-numbering</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-h <var>style</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--header-numbering=<var>style</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-h</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;header-numbering</indexterm></indexcommand>
<para>Analogous to <option>--body-numbering</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-i <var>number</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--line-increment=<var>number</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-i</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;line-increment</indexterm></indexcommand>
<para>Increment line numbers by <var>number</var> (default 1).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-l <var>number</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--join-blank-lines=<var>number</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-l</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;join-blank-lines</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">empty lines, numbering</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">blank lines, numbering</indexterm></cindex>
<para>Consider <var>number</var> (default 1) consecutive empty lines to be one
logical line for numbering, and only number the last one.  Where fewer
than <var>number</var> consecutive empty lines occur, do not number them.
An empty line is one that contains no characters, not even spaces
or tabs.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-n <var>format</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--number-format=<var>format</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-n</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;number-format</indexterm></indexcommand>
<para>Select the line numbering format (default is <code>rn</code>):
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">ln</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">ln <r>format for <command>nl</command></r></indexterm></indexcommand>
<para>left justified, no leading zeros;
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">rn</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">rn <r>format for <command>nl</command></r></indexterm></indexcommand>
<para>right justified, no leading zeros;
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">rz</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">rz <r>format for <command>nl</command></r></indexterm></indexcommand>
<para>right justified, leading zeros.
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-p</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--no-renumber</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-p</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;no-renumber</indexterm></indexcommand>
<para>Do not reset the line number at the start of a logical page.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-s <var>string</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--number-separator=<var>string</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-s</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;number-separator</indexterm></indexcommand>
<para>Separate the line number from the text line in the output with
<var>string</var> (default is the TAB character).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-v <var>number</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--starting-line-number=<var>number</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-v</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;starting-line-number</indexterm></indexcommand>
<para>Set the initial line number on each logical page to <var>number</var> (default 1).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-w <var>number</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--number-width=<var>number</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-w</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;number-width</indexterm></indexcommand>
<para>Use <var>number</var> characters for line numbers (default 6).
</para>
</tableitem></tableentry></table>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="od-invocation" spaces=" "><nodename>od invocation</nodename><nodenext automatic="on">base64 invocation</nodenext><nodeprev automatic="on">nl invocation</nodeprev><nodeup automatic="on">Output of entire files</nodeup></node>
<section spaces=" "><sectiontitle><command>od</command>: Write files in octal or other formats</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">od</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">octal dump of files</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">hex dump of files</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">ASCII dump of files</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">file contents, dumping unambiguously</indexterm></cindex>

<para><command>od</command> writes an unambiguous representation of each <var>file</var>
(<samp>-</samp> means standard input), or standard input if none are given.
Synopses:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">od [<var>option</var>]&dots; [<var>file</var>]&dots;
od [-abcdfilosx]&dots; [<var>file</var>] [[+]<var>offset</var>[.][b]]
od [<var>option</var>]&dots; --traditional [<var>file</var>]<!-- c -->
 [[+]<var>offset</var>[.][b] [[+]<var>label</var>[.][b]]]
</pre></smallexample>

<para>Each line of output consists of the offset in the input, followed by
groups of data from the file.  By default, <command>od</command> prints the offset in
octal, and each group of file data is a C <code>short int</code>&textrsquo;s worth of input
printed as a single octal number.
</para>
<para>If <var>offset</var> is given, it specifies how many input bytes to skip
before formatting and writing.  By default, it is interpreted as an
octal number, but the optional trailing decimal point causes it to be
interpreted as decimal.  If no decimal is specified and the offset
begins with <samp>0x</samp> or <samp>0X</samp> it is interpreted as a hexadecimal
number.  If there is a trailing <samp>b</samp>, the number of bytes skipped
will be <var>offset</var> multiplied by 512.
</para>
<para>If a command is of both the first and second forms, the second form is
assumed if the last operand begins with <samp>+</samp> or (if there are two
operands) a digit.  For example, in <samp>od foo 10</samp> and <samp>od +10</samp>
the <samp>10</samp> is an offset, whereas in <samp>od 10</samp> the <samp>10</samp> is a
file name.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-A <var>radix</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--address-radix=<var>radix</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-A</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;address-radix</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">radix for file offsets</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">file offset radix</indexterm></cindex>
<para>Select the base in which file offsets are printed.  <var>radix</var> can
be one of the following:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">d</itemformat></item>
</tableterm><tableitem><para>decimal;
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">o</itemformat></item>
</tableterm><tableitem><para>octal;
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">x</itemformat></item>
</tableterm><tableitem><para>hexadecimal;
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">n</itemformat></item>
</tableterm><tableitem><para>none (do not print offsets).
</para></tableitem></tableentry></table>

<para>The default is octal.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-j <var>bytes</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--skip-bytes=<var>bytes</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-j</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;skip-bytes</indexterm></indexcommand>
<para>Skip <var>bytes</var> input bytes before formatting and writing.  If
<var>bytes</var> begins with <samp>0x</samp> or <samp>0X</samp>, it is interpreted in
hexadecimal; otherwise, if it begins with <samp>0</samp>, in octal; otherwise,
in decimal.
<var>bytes</var> may be, or may be an integer optionally followed by,
one of the following multiplicative suffixes:
</para><example endspaces=" ">
<pre xml:space="preserve"><samp>b</samp>  =&gt;            512 (&quot;blocks&quot;)
<samp>KB</samp> =&gt;           1000 (KiloBytes)
<samp>K</samp>  =&gt;           1024 (KibiBytes)
<samp>MB</samp> =&gt;      1000*1000 (MegaBytes)
<samp>M</samp>  =&gt;      1024*1024 (MebiBytes)
<samp>GB</samp> =&gt; 1000*1000*1000 (GigaBytes)
<samp>G</samp>  =&gt; 1024*1024*1024 (GibiBytes)
</pre></example>
<para>and so on for <samp>T</samp>, <samp>P</samp>, <samp>E</samp>, <samp>Z</samp>, and <samp>Y</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-N <var>bytes</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--read-bytes=<var>bytes</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-N</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;read-bytes</indexterm></indexcommand>
<para>Output at most <var>bytes</var> bytes of the input.  Prefixes and suffixes on
<code>bytes</code> are interpreted as for the <option>-j</option> option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-S <var>bytes</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--strings[=<var>bytes</var>]</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-S</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;strings</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">string constants, outputting</indexterm></cindex>
<para>Instead of the normal output, output only <dfn>string constants</dfn>: at
least <var>bytes</var> consecutive <acronym><acronymword>ASCII</acronymword></acronym> graphic characters,
followed by a zero byte (<acronym><acronymword>ASCII</acronymword></acronym> <sc>nul</sc>).
Prefixes and suffixes on <var>bytes</var> are interpreted as for the
<option>-j</option> option.
</para>
<para>If <var>n</var> is omitted with <option>--strings</option>, the default is 3.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-t <var>type</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--format=<var>type</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-t</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;format</indexterm></indexcommand>
<para>Select the format in which to output the file data.  <var>type</var> is a
string of one or more of the below type indicator characters.  If you
include more than one type indicator character in a single <var>type</var>
string, or use this option more than once, <command>od</command> writes one copy
of each output line using each of the data types that you specified,
in the order that you specified.
</para>
<para>Adding a trailing &textldquo;z&textrdquo; to any type specification appends a display
of the <acronym><acronymword>ASCII</acronymword></acronym> character representation of the printable characters
to the output line generated by the type specification.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">a</itemformat></item>
</tableterm><tableitem><para>named character, ignoring high-order bit
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">c</itemformat></item>
</tableterm><tableitem><para><acronym><acronymword>ASCII</acronymword></acronym> character or backslash escape,
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">d</itemformat></item>
</tableterm><tableitem><para>signed decimal
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">f</itemformat></item>
</tableterm><tableitem><para>floating point (<pxref><xrefnodename>Floating point</xrefnodename></pxref>)
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">o</itemformat></item>
</tableterm><tableitem><para>octal
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">u</itemformat></item>
</tableterm><tableitem><para>unsigned decimal
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">x</itemformat></item>
</tableterm><tableitem><para>hexadecimal
</para></tableitem></tableentry></table>

<para>The type <code>a</code> outputs things like <samp>sp</samp> for space, <samp>nl</samp> for
newline, and <samp>nul</samp> for a zero byte.  Only the least significant
seven bits of each byte is used; the high-order bit is ignored.
Type <code>c</code> outputs
<samp> </samp>, <samp>\n</samp>, and <code>\0</code>, respectively.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">type size</indexterm></cindex>
<para>Except for types <samp>a</samp> and <samp>c</samp>, you can specify the number
of bytes to use in interpreting each number in the given data type
by following the type indicator character with a decimal integer.
Alternately, you can specify the size of one of the C compiler&textrsquo;s
built-in data types by following the type indicator character with
one of the following characters.  For integers (<samp>d</samp>, <samp>o</samp>,
<samp>u</samp>, <samp>x</samp>):
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">C</itemformat></item>
</tableterm><tableitem><para>char
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">S</itemformat></item>
</tableterm><tableitem><para>short
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">I</itemformat></item>
</tableterm><tableitem><para>int
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">L</itemformat></item>
</tableterm><tableitem><para>long
</para></tableitem></tableentry></table>

<para>For floating point (<code>f</code>):
</para>
<table commandarg="asis" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="asis">F</itemformat></item>
</tableterm><tableitem><para>float
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis">D</itemformat></item>
</tableterm><tableitem><para>double
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis">L</itemformat></item>
</tableterm><tableitem><para>long double
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-v</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--output-duplicates</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-v</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;output-duplicates</indexterm></indexcommand>
<para>Output consecutive lines that are identical.  By default, when two or
more consecutive output lines would be identical, <command>od</command> outputs only
the first line, and puts just an asterisk on the following line to
indicate the elision.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-w[<var>n</var>]</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--width[=<var>n</var>]</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-w</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;width</indexterm></indexcommand>
<para>Dump <code>n</code> input bytes per output line.  This must be a multiple of
the least common multiple of the sizes associated with the specified
output types.
</para>
<para>If this option is not given at all, the default is 16.  If <var>n</var> is
omitted, the default is 32.
</para>
</tableitem></tableentry></table>

<para>The next several options are shorthands for format specifications.
<sc>gnu</sc> <command>od</command> accepts any combination of shorthands and format
specification options.  These options accumulate.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-a</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-a</indexterm></indexcommand>
<para>Output as named characters.  Equivalent to <samp>-t a</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-b</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-b</indexterm></indexcommand>
<para>Output as octal bytes.  Equivalent to <samp>-t o1</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-c</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-c</indexterm></indexcommand>
<para>Output as <acronym><acronymword>ASCII</acronymword></acronym> characters or backslash escapes.  Equivalent to
<samp>-t c</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-d</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-d</indexterm></indexcommand>
<para>Output as unsigned decimal two-byte units.  Equivalent to <samp>-t u2</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-f</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-f</indexterm></indexcommand>
<para>Output as floats.  Equivalent to <samp>-t fF</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-i</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-i</indexterm></indexcommand>
<para>Output as decimal ints.  Equivalent to <samp>-t dI</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-l</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-l</indexterm></indexcommand>
<para>Output as decimal long ints.  Equivalent to <samp>-t dL</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-o</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-o</indexterm></indexcommand>
<para>Output as octal two-byte units.  Equivalent to <option>-t o2</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-s</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-s</indexterm></indexcommand>
<para>Output as decimal two-byte units.  Equivalent to <option>-t d2</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-x</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-x</indexterm></indexcommand>
<para>Output as hexadecimal two-byte units.  Equivalent to <samp>-t x2</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--traditional</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;traditional</indexterm></indexcommand>
<para>Recognize the non-option label argument that traditional <command>od</command>
accepted.  The following syntax:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">od --traditional [<var>file</var>] [[+]<var>offset</var>[.][b] [[+]<var>label</var>[.][b]]]
</pre></smallexample>

<noindent></noindent>
<para>can be used to specify at most one file and optional arguments
specifying an offset and a pseudo-start address, <var>label</var>.
The <var>label</var> argument is interpreted
just like <var>offset</var>, but it specifies an initial pseudo-address.  The
pseudo-addresses are displayed in parentheses following any normal
address.
</para>
</tableitem></tableentry></table>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>
</section>
<node name="base64-invocation" spaces=" "><nodename>base64 invocation</nodename><nodeprev automatic="on">od invocation</nodeprev><nodeup automatic="on">Output of entire files</nodeup></node>
<section spaces=" "><sectiontitle><command>base64</command>: Transform data into printable data</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">base64</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">base64 encoding</indexterm></cindex>

<para><command>base64</command> transforms data read from a file, or standard input,
into (or from) base64 encoded form.  The base64 encoded form uses
printable <acronym><acronymword>ASCII</acronymword></acronym> characters to represent binary data.
Synopses:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">base64 [<var>option</var>]&dots; [<var>file</var>]
base64 --decode [<var>option</var>]&dots; [<var>file</var>]
</pre></smallexample>

<para>The base64 encoding expands data to roughly 133% of the original.
The format conforms to
<uref><urefurl>ftp://ftp.rfc-editor.org/in-notes/rfc4648.txt</urefurl><urefdesc spaces=" ">RFC 4648</urefdesc></uref>.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-w <var>cols</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--wrap=<var>cols</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-w</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;wrap</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">wrap data</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">column to wrap data after</indexterm></cindex>
<para>During encoding, wrap lines after <var>cols</var> characters.  This must be
a positive number.
</para>
<para>The default is to wrap after 76 characters.  Use the value 0 to
disable line wrapping altogether.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-d</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--decode</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-d</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;decode</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">Decode base64 data</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">Base64 decoding</indexterm></cindex>
<para>Change the mode of operation, from the default of encoding data, to
decoding data.  Input is expected to be base64 encoded data, and the
output will be the original data.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-i</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--ignore-garbage</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-i</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;ignore-garbage</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">Ignore garbage in base64 stream</indexterm></cindex>
<para>When decoding, newlines are always accepted.
During decoding, ignore unrecognized bytes,
to permit distorted data to be decoded.
</para>
</tableitem></tableentry></table>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
</chapter>
<node name="Formatting-file-contents" spaces=" "><nodename>Formatting file contents</nodename><nodenext automatic="on">Output of parts of files</nodenext><nodeprev automatic="on">Output of entire files</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>Formatting file contents</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">formatting file contents</indexterm></cindex>

<para>These commands reformat the contents of files.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::              ">fmt invocation</menunode><menudescription><pre xml:space="preserve">Reformat paragraph text.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::               ">pr invocation</menunode><menudescription><pre xml:space="preserve">Paginate or columnate files for printing.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">fold invocation</menunode><menudescription><pre xml:space="preserve">Wrap input lines to fit in specified width.
</pre></menudescription></menuentry></menu>


<node name="fmt-invocation" spaces=" "><nodename>fmt invocation</nodename><nodenext automatic="on">pr invocation</nodenext><nodeup automatic="on">Formatting file contents</nodeup></node>
<section spaces=" "><sectiontitle><command>fmt</command>: Reformat paragraph text</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">fmt</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">reformatting paragraph text</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">paragraphs, reformatting</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">text, reformatting</indexterm></cindex>

<para><command>fmt</command> fills and joins lines to produce output lines of (at most)
a given number of characters (75 by default).  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">fmt [<var>option</var>]&dots; [<var>file</var>]&dots;
</pre></example>

<para><command>fmt</command> reads from the specified <var>file</var> arguments (or standard
input if none are given), and writes to standard output.
</para>
<para>By default, blank lines, spaces between words, and indentation are
preserved in the output; successive input lines with different
indentation are not joined; tabs are expanded on input and introduced on
output.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">line-breaking</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">sentences and line-breaking</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">Knuth, Donald E.</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">Plass, Michael F.</indexterm></cindex>
<para><command>fmt</command> prefers breaking lines at the end of a sentence, and tries to
avoid line breaks after the first word of a sentence or before the last
word of a sentence.  A <dfn>sentence break</dfn> is defined as either the end
of a paragraph or a word ending in any of <samp>.?!</samp>, followed by two
spaces or end of line, ignoring any intervening parentheses or quotes.
Like &tex;, <command>fmt</command> reads entire &textldquo;paragraphs&textrdquo; before choosing line
breaks; the algorithm is a variant of that given by Donald E. Knuth
and Michael F. Plass in &textldquo;Breaking Paragraphs Into Lines&textrdquo;,
<cite>Software&textmdash;Practice &amp; Experience</cite> <b>11</b>, 11 (November 1981),
1119&textndash;1184.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-c</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--crown-margin</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-c</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;crown-margin</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">crown margin</indexterm></cindex>
<para><dfn>Crown margin</dfn> mode: preserve the indentation of the first two
lines within a paragraph, and align the left margin of each subsequent
line with that of the second line.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-t</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--tagged-paragraph</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-t</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;tagged-paragraph</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">tagged paragraphs</indexterm></cindex>
<para><dfn>Tagged paragraph</dfn> mode: like crown margin mode, except that if
indentation of the first line of a paragraph is the same as the
indentation of the second, the first line is treated as a one-line
paragraph.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-s</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--split-only</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-s</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;split-only</indexterm></indexcommand>
<para>Split lines only.  Do not join short lines to form longer ones.  This
prevents sample lines of code, and other such &textldquo;formatted&textrdquo; text from
being unduly combined.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-u</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--uniform-spacing</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-u</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;uniform-spacing</indexterm></indexcommand>
<para>Uniform spacing.  Reduce spacing between words to one space, and spacing
between sentences to two spaces.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-<var>width</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">-w <var>width</var></itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--width=<var>width</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-<var>width</var></indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-w</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;width</indexterm></indexcommand>
<para>Fill output lines up to <var>width</var> characters (default 75).  <command>fmt</command>
initially tries to make lines about 7% shorter than this, to give it
room to balance line lengths.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-p <var>prefix</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--prefix=<var>prefix</var></itemformat></itemx>
</tableterm><tableitem><para>Only lines beginning with <var>prefix</var> (possibly preceded by whitespace)
are subject to formatting.  The prefix and any preceding whitespace are
stripped for the formatting and then re-attached to each formatted output
line.  One use is to format certain kinds of program comments, while
leaving the code unchanged.
</para>
</tableitem></tableentry></table>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="pr-invocation" spaces=" "><nodename>pr invocation</nodename><nodenext automatic="on">fold invocation</nodenext><nodeprev automatic="on">fmt invocation</nodeprev><nodeup automatic="on">Formatting file contents</nodeup></node>
<section spaces=" "><sectiontitle><command>pr</command>: Paginate or columnate files for printing</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">pr</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">printing, preparing files for</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">multicolumn output, generating</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">merging files in parallel</indexterm></cindex>

<para><command>pr</command> writes each <var>file</var> (<samp>-</samp> means standard input), or
standard input if none are given, to standard output, paginating and
optionally outputting in multicolumn format; optionally merges all
<var>file</var>s, printing all in parallel, one per column.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">pr [<var>option</var>]&dots; [<var>file</var>]&dots;
</pre></example>

<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">LC_MESSAGES</indexterm></vindex>
<para>By default, a 5-line header is printed at each page: two blank lines;
a line with the date, the file name, and the page count; and two more
blank lines.  A footer of five blank lines is also printed.
The default <var>page_length</var> is 66
lines.  The default number of text lines is therefore 56.
The text line of the header takes the form
<samp><var>date</var> <var>string</var> <var>page</var></samp>, with spaces inserted around
<var>string</var> so that the line takes up the full <var>page_width</var>.  Here,
<var>date</var> is the date (see the <option>-D</option> or <option>--date-format</option>
option for details), <var>string</var> is the centered header string, and
<var>page</var> identifies the page number.  The <env>LC_MESSAGES</env> locale
category affects the spelling of <var>page</var>; in the default C locale, it
is <samp>Page <var>number</var></samp> where <var>number</var> is the decimal page
number.
</para>
<para>Form feeds in the input cause page breaks in the output.  Multiple form
feeds produce empty pages.
</para>
<para>Columns are of equal width, separated by an optional string (default
is <samp>space</samp>).  For multicolumn output, lines will always be truncated to
<var>page_width</var> (default 72), unless you use the <option>-J</option> option.
For single
column output no line truncation occurs by default.  Use <option>-W</option> option to
truncate lines in that case.
</para>
<para>The following changes were made in version 1.22i and apply to later
versions of <command>pr</command>:
<!-- c FIXME: this whole section here sounds very awkward to me. I -->
<!-- c made a few small changes, but really it all needs to be redone. - Brian -->
<!-- c OK, I fixed another sentence or two, but some of it I just don't understand. -->
<spacecmd type="spc"/>- Brian
</para><itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet" /></itemprepend>
<beforefirstitem>
</beforefirstitem><listitem><prepend>&bullet;</prepend>
<para>Some small <var>letter options</var> (<option>-s</option>, <option>-w</option>) have been
redefined for better <acronym><acronymword>POSIX</acronymword></acronym> compliance.  The output of some further
cases has been adapted to other Unix systems.  These changes are not
compatible with earlier versions of the program.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Some <var>new capital letter</var> options (<option>-J</option>, <option>-S</option>, <option>-W</option>)
have been introduced to turn off unexpected interferences of small letter
options.  The <option>-N</option> option and the second argument <var>last_page</var>
of <samp>+FIRST_PAGE</samp> offer more flexibility.  The detailed handling of
form feeds set in the input files requires the <option>-T</option> option.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Capital letter options override small letter ones.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Some of the option-arguments (compare <option>-s</option>, <option>-e</option>,
<option>-i</option>, <option>-n</option>) cannot be specified as separate arguments from the
preceding option letter (already stated in the <acronym><acronymword>POSIX</acronymword></acronym> specification).
</para></listitem></itemize>

<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">+<var>first_page</var>[:<var>last_page</var>]</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--pages=<var>first_page</var>[:<var>last_page</var>]</itemformat></itemx>
</tableterm><tableitem><!-- c The two following @opindex lines evoke warnings because they contain `:' -->
<!-- c The `info' spec does not permit that.  If we use those lines, we end -->
<!-- c up with truncated index entries that don't work. -->
<!-- c @opindex +@var{first_page}[:@var{last_page}] -->
<!-- c @opindex -pages=@var{first_page}[:@var{last_page}] -->
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">+<var>page_range</var></indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;pages=<var>page_range</var></indexterm></indexcommand>
<para>Begin printing with page <var>first_page</var> and stop with <var>last_page</var>.
Missing <samp>:<var>last_page</var></samp> implies end of file.  While estimating
the number of skipped pages each form feed in the input file results
in a new page.  Page counting with and without <samp>+<var>first_page</var></samp>
is identical.  By default, counting starts with the first page of input
file (not first page printed).  Line numbering may be altered by <option>-N</option>
option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-<var>column</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--columns=<var>column</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-<var>column</var></indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;columns</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">down columns</indexterm></cindex>
<para>With each single <var>file</var>, produce <var>column</var> columns of output
(default is 1) and print columns down, unless <option>-a</option> is used.  The
column width is automatically decreased as <var>column</var> increases; unless
you use the <option>-W/-w</option> option to increase <var>page_width</var> as well.
This option might well cause some lines to be truncated.  The number of
lines in the columns on each page are balanced.  The options <option>-e</option>
and <option>-i</option> are on for multiple text-column output.  Together with
<option>-J</option> option column alignment and line truncation is turned off.
Lines of full length are joined in a free field format and <option>-S</option>
option may set field separators.  <option>-<var>column</var></option> may not be used
with <option>-m</option> option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-a</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--across</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-a</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;across</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">across columns</indexterm></cindex>
<para>With each single <var>file</var>, print columns across rather than down.  The
<option>-<var>column</var></option> option must be given with <var>column</var> greater than one.
If a line is too long to fit in a column, it is truncated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-c</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--show-control-chars</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-c</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;show-control-chars</indexterm></indexcommand>
<para>Print control characters using hat notation (e.g., <samp>^G</samp>); print
other nonprinting characters in octal backslash notation.  By default,
nonprinting characters are not changed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-d</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--double-space</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-d</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;double-space</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">double spacing</indexterm></cindex>
<para>Double space the output.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-D <var>format</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--date-format=<var>format</var></itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp">time formats</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">formatting times</indexterm></cindex>
<para>Format header dates using <var>format</var>, using the same conventions as
for the command <samp>date +<var>format</var></samp>; <xref><xrefnodename>date invocation</xrefnodename></xref>.
Except for directives, which start with
<samp>%</samp>, characters in <var>format</var> are printed unchanged.  You can use
this option to specify an arbitrary string in place of the header date,
e.g., <option>--date-format=&quot;Monday morning&quot;</option>.
</para>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">POSIXLY_CORRECT</indexterm></vindex>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">LC_TIME</indexterm></vindex>
<para>The default date format is <samp>%Y-%m-%d %H:%M</samp> (for example,
<samp>2001-12-04 23:59</samp>);
but if the <env>POSIXLY_CORRECT</env> environment variable is set
and the <env>LC_TIME</env> locale category specifies the <acronym><acronymword>POSIX</acronymword></acronym>
locale, the default is <samp>%b %e %H:%M %Y</samp> (for example,
<samp>Dec<spacecmd type="spc"/><spacecmd type="spc"/>4 23:59 2001</samp>.
</para>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">TZ</indexterm></vindex>
<para>Time stamps are listed according to the time zone rules specified by
the <env>TZ</env> environment variable, or by the system default rules if
<env>TZ</env> is not set.  <xref><xrefnodename>TZ Variable</xrefnodename><xrefprinteddesc spaces=" ">Specifying the Time Zone
with <env>TZ</env></xrefprinteddesc><xrefinfofile spaces=" ">libc</xrefinfofile><xrefprintedname spaces=" ">The GNU C Library Reference Manual</xrefprintedname></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-e[<var>in-tabchar</var>[<var>in-tabwidth</var>]]</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--expand-tabs[=<var>in-tabchar</var>[<var>in-tabwidth</var>]]</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-e</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;expand-tabs</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">input tabs</indexterm></cindex>
<para>Expand <var>tab</var>s to spaces on input.  Optional argument <var>in-tabchar</var> is
the input tab character (default is the TAB character).  Second optional
argument <var>in-tabwidth</var> is the input tab character&textrsquo;s width (default
is 8).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-f</itemformat></item>
<itemx spaces=" "><itemformat command="samp">-F</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--form-feed</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-F</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-f</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;form-feed</indexterm></indexcommand>
<para>Use a form feed instead of newlines to separate output pages.  This does
not alter the default page length of 66 lines.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-h <var>header</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--header=<var>header</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-h</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;header</indexterm></indexcommand>
<para>Replace the file name in the header with the centered string <var>header</var>.
When using the shell, <var>header</var> should be quoted and should be
separated from <option>-h</option> by a space.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-i[<var>out-tabchar</var>[<var>out-tabwidth</var>]]</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--output-tabs[=<var>out-tabchar</var>[<var>out-tabwidth</var>]]</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-i</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;output-tabs</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">output tabs</indexterm></cindex>
<para>Replace spaces with <var>tab</var>s on output.  Optional argument <var>out-tabchar</var>
is the output tab character (default is the TAB character).  Second optional
argument <var>out-tabwidth</var> is the output tab character&textrsquo;s width (default
is 8).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-J</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--join-lines</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-J</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;join-lines</indexterm></indexcommand>
<para>Merge lines of full length.  Used together with the column options
<option>-<var>column</var></option>, <option>-a -<var>column</var></option> or <option>-m</option>.  Turns off
<option>-W/-w</option> line truncation;
no column alignment used; may be used with
<option>--sep-string[=<var>string</var>]</option>.  <option>-J</option> has been introduced
(together with <option>-W</option> and <option>--sep-string</option>)
to disentangle the old (<acronym><acronymword>POSIX</acronymword></acronym>-compliant) options <option>-w</option> and
<option>-s</option> along with the three column options.
</para>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-l <var>page_length</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--length=<var>page_length</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-l</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;length</indexterm></indexcommand>
<para>Set the page length to <var>page_length</var> (default 66) lines, including
the lines of the header [and the footer].  If <var>page_length</var> is less
than or equal to 10, the header and footer are omitted, as if the
<option>-t</option> option had been given.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-m</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--merge</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-m</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;merge</indexterm></indexcommand>
<para>Merge and print all <var>file</var>s in parallel, one in each column.  If a
line is too long to fit in a column, it is truncated, unless the <option>-J</option>
option is used.  <option>--sep-string[=<var>string</var>]</option> may be used.
Empty pages in
some <var>file</var>s (form feeds set) produce empty columns, still marked
by <var>string</var>.  The result is a continuous line numbering and column
marking throughout the whole merged file.  Completely empty merged pages
show no separators or line numbers.  The default header becomes
<samp><var>date</var> <var>page</var></samp> with spaces inserted in the middle; this
may be used with the <option>-h</option> or <option>--header</option> option to fill up
the middle blank part.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-n[<var>number-separator</var>[<var>digits</var>]]</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--number-lines[=<var>number-separator</var>[<var>digits</var>]]</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-n</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;number-lines</indexterm></indexcommand>
<para>Provide <var>digits</var> digit line numbering (default for <var>digits</var> is
5).  With multicolumn output the number occupies the first <var>digits</var>
column positions of each text column or only each line of <option>-m</option>
output.  With single column output the number precedes each line just as
<option>-m</option> does.  Default counting of the line numbers starts with the
first line of the input file (not the first line printed, compare the
<option>--page</option> option and <option>-N</option> option).
Optional argument <var>number-separator</var> is the character appended to
the line number to separate it from the text followed.  The default
separator is the TAB character.  In a strict sense a TAB is always
printed with single column output only.  The TAB width varies
with the TAB position, e.g., with the left <var>margin</var> specified
by <option>-o</option> option.  With multicolumn output priority is given to
<samp>equal width of output columns</samp> (a <acronym><acronymword>POSIX</acronymword></acronym> specification).
The TAB width is fixed to the value of the first column and does
not change with different values of left <var>margin</var>.  That means a
fixed number of spaces is always printed in the place of the
<var>number-separator</var> TAB.  The tabification depends upon the output
position.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-N <var>line_number</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--first-line-number=<var>line_number</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-N</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;first-line-number</indexterm></indexcommand>
<para>Start line counting with the number <var>line_number</var> at first line of
first page printed (in most cases not the first line of the input file).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-o <var>margin</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--indent=<var>margin</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-o</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;indent</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">indenting lines</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">left margin</indexterm></cindex>
<para>Indent each line with a margin <var>margin</var> spaces wide (default is zero).
The total page width is the size of the margin plus the <var>page_width</var>
set with the <option>-W/-w</option> option.  A limited overflow may occur with
numbered single column output (compare <option>-n</option> option).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-r</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--no-file-warnings</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-r</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;no-file-warnings</indexterm></indexcommand>
<para>Do not print a warning message when an argument <var>file</var> cannot be
opened.  (The exit status will still be nonzero, however.)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-s[<var>char</var>]</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--separator[=<var>char</var>]</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-s</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;separator</indexterm></indexcommand>
<para>Separate columns by a single character <var>char</var>.  The default for
<var>char</var> is the TAB character without <option>-w</option> and <samp>no
character</samp> with <option>-w</option>.  Without <option>-s</option> the default separator
<samp>space</samp> is set.  <option>-s[char]</option> turns off line truncation of all
three column options (<option>-COLUMN</option>|<option>-a -COLUMN</option>|<option>-m</option>) unless
<option>-w</option> is set.  This is a <acronym><acronymword>POSIX</acronymword></acronym>-compliant formulation.
</para>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-S<var>string</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--sep-string[=<var>string</var>]</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-S</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;sep-string</indexterm></indexcommand>
<para>Use <var>string</var> to separate output columns.  The <option>-S</option> option doesn&textrsquo;t
affect the <option>-W/-w</option> option, unlike the <option>-s</option> option which does.  It
does not affect line truncation or column alignment.
Without <option>-S</option>, and with <option>-J</option>, <command>pr</command> uses the default output
separator, TAB&eosperiod;
Without <option>-S</option> or <option>-J</option>, <command>pr</command> uses a <samp>space</samp>
(same as <option>-S&quot;<w> </w>&quot;</option>).  <option>--sep-string</option> with no
<samp>=<var>string</var></samp> is equivalent to <option>--sep-string=&quot;&quot;</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-t</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--omit-header</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-t</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;omit-header</indexterm></indexcommand>
<para>Do not print the usual header [and footer] on each page, and do not fill
out the bottom of pages (with blank lines or a form feed).  No page
structure is produced, but form feeds set in the input files are retained.
The predefined pagination is not changed.  <option>-t</option> or <option>-T</option> may be
useful together with other options; e.g.: <option>-t -e4</option>, expand TAB characters
in the input file to 4 spaces but don&textrsquo;t make any other changes.  Use of
<option>-t</option> overrides <option>-h</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-T</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--omit-pagination</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-T</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;omit-pagination</indexterm></indexcommand>
<para>Do not print header [and footer].  In addition eliminate all form feeds
set in the input files.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-v</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--show-nonprinting</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-v</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;show-nonprinting</indexterm></indexcommand>
<para>Print nonprinting characters in octal backslash notation.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-w <var>page_width</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--width=<var>page_width</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-w</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;width</indexterm></indexcommand>
<para>Set page width to <var>page_width</var> characters for multiple text-column
output only (default for <var>page_width</var> is 72).  <option>-s[CHAR]</option> turns
off the default page width and any line truncation and column alignment.
Lines of full length are merged, regardless of the column options
set.  No <var>page_width</var> setting is possible with single column output.
A <acronym><acronymword>POSIX</acronymword></acronym>-compliant formulation.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-W <var>page_width</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--page_width=<var>page_width</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-W</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;page_width</indexterm></indexcommand>
<para>Set the page width to <var>page_width</var> characters.  That&textrsquo;s valid with and
without a column option.  Text lines are truncated, unless <option>-J</option>
is used.  Together with one of the three column options
(<option>-<var>column</var></option>, <option>-a -<var>column</var></option> or <option>-m</option>) column
alignment is always used.  The separator options <option>-S</option> or <option>-s</option>
don&textrsquo;t affect the <option>-W</option> option.  Default is 72 characters.  Without
<option>-W <var>page_width</var></option> and without any of the column options NO line
truncation is used (defined to keep downward compatibility and to meet
most frequent tasks).  That&textrsquo;s equivalent to <option>-W 72 -J</option>.  The header
line is never truncated.
</para>
</tableitem></tableentry></table>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="fold-invocation" spaces=" "><nodename>fold invocation</nodename><nodeprev automatic="on">pr invocation</nodeprev><nodeup automatic="on">Formatting file contents</nodeup></node>
<section spaces=" "><sectiontitle><command>fold</command>: Wrap input lines to fit in specified width</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">fold</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">wrapping long input lines</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">folding long input lines</indexterm></cindex>

<para><command>fold</command> writes each <var>file</var> (<option>-</option> means standard input), or
standard input if none are given, to standard output, breaking long
lines.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">fold [<var>option</var>]&dots; [<var>file</var>]&dots;
</pre></example>

<para>By default, <command>fold</command> breaks lines wider than 80 columns.  The output
is split into as many lines as necessary.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">screen columns</indexterm></cindex>
<para><command>fold</command> counts screen columns by default; thus, a tab may count more
than one column, backspace decreases the column count, and carriage
return sets the column to zero.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-b</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--bytes</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-b</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;bytes</indexterm></indexcommand>
<para>Count bytes rather than columns, so that tabs, backspaces, and carriage
returns are each counted as taking up one column, just like other
characters.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-s</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--spaces</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-s</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;spaces</indexterm></indexcommand>
<para>Break at word boundaries: the line is broken after the last blank before
the maximum line length.  If the line contains no such blanks, the line
is broken at the maximum line length as usual.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-w <var>width</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--width=<var>width</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-w</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;width</indexterm></indexcommand>
<para>Use a maximum line length of <var>width</var> columns instead of 80.
</para>
<para>For compatibility <command>fold</command> supports an obsolete option syntax
<option>-<var>width</var></option>.  New scripts should use <option>-w <var>width</var></option>
instead.
</para>
</tableitem></tableentry></table>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
</chapter>
<node name="Output-of-parts-of-files" spaces=" "><nodename>Output of parts of files</nodename><nodenext automatic="on">Summarizing files</nodenext><nodeprev automatic="on">Formatting file contents</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>Output of parts of files</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">output of parts of files</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">parts of files, output of</indexterm></cindex>

<para>These commands output pieces of the input.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::             ">head invocation</menunode><menudescription><pre xml:space="preserve">Output the first part of files.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">tail invocation</menunode><menudescription><pre xml:space="preserve">Output the last part of files.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">split invocation</menunode><menudescription><pre xml:space="preserve">Split a file into pieces.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::           ">csplit invocation</menunode><menudescription><pre xml:space="preserve">Split a file into context-determined pieces.
</pre></menudescription></menuentry></menu>

<node name="head-invocation" spaces=" "><nodename>head invocation</nodename><nodenext automatic="on">tail invocation</nodenext><nodeup automatic="on">Output of parts of files</nodeup></node>
<section spaces=" "><sectiontitle><command>head</command>: Output the first part of files</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">head</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">initial part of files, outputting</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">first part of files, outputting</indexterm></cindex>

<para><command>head</command> prints the first part (10 lines by default) of each
<var>file</var>; it reads from standard input if no files are given or
when given a <var>file</var> of <option>-</option>.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">head [<var>option</var>]&dots; [<var>file</var>]&dots;
</pre></example>

<para>If more than one <var>file</var> is specified, <command>head</command> prints a
one-line header consisting of:
</para>
<example endspaces=" ">
<pre xml:space="preserve">==&gt; <var>file name</var> &lt;==
</pre></example>

<noindent></noindent>
<para>before the output for each <var>file</var>.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-c <var>k</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--bytes=<var>k</var></itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-c</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;bytes</indexterm></indexcommand>
<para>Print the first <var>k</var> bytes, instead of initial lines.
However, if <var>k</var> starts with a <samp>-</samp>,
print all but the last <var>k</var> bytes of each file.
<var>k</var> may be, or may be an integer optionally followed by,
one of the following multiplicative suffixes:
</para><example endspaces=" ">
<pre xml:space="preserve"><samp>b</samp>  =&gt;            512 (&quot;blocks&quot;)
<samp>KB</samp> =&gt;           1000 (KiloBytes)
<samp>K</samp>  =&gt;           1024 (KibiBytes)
<samp>MB</samp> =&gt;      1000*1000 (MegaBytes)
<samp>M</samp>  =&gt;      1024*1024 (MebiBytes)
<samp>GB</samp> =&gt; 1000*1000*1000 (GigaBytes)
<samp>G</samp>  =&gt; 1024*1024*1024 (GibiBytes)
</pre></example>
<para>and so on for <samp>T</samp>, <samp>P</samp>, <samp>E</samp>, <samp>Z</samp>, and <samp>Y</samp>.
</para>
<itemx spaces=" "><itemformat command="samp">-n <var>k</var></itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--lines=<var>k</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-n</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;lines</indexterm></indexcommand>
<para>Output the first <var>k</var> lines.
However, if <var>k</var> starts with a <samp>-</samp>,
print all but the last <var>k</var> lines of each file.
Size multiplier suffixes are the same as with the <option>-c</option> option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-q</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--quiet</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--silent</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-q</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;quiet</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;silent</indexterm></indexcommand>
<para>Never print file name headers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-v</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--verbose</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-v</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;verbose</indexterm></indexcommand>
<para>Always print file name headers.
</para>
</tableitem></tableentry></table>

<para>For compatibility <command>head</command> also supports an obsolete option syntax
<option>-<var>count</var><var>options</var></option>, which is recognized only if it is
specified first.  <var>count</var> is a decimal number optionally followed
by a size letter (<samp>b</samp>, <samp>k</samp>, <samp>m</samp>) as in <option>-c</option>, or
<samp>l</samp> to mean count by lines, or other option letters (<samp>cqv</samp>).
Scripts intended for standard hosts should use <option>-c <var>count</var></option>
or <option>-n <var>count</var></option> instead.  If your script must also run on
hosts that support only the obsolete syntax, it is usually simpler to
avoid <command>head</command>, e.g., by using <samp>sed 5q</samp> instead of
<samp>head -5</samp>.
</para>
<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="tail-invocation" spaces=" "><nodename>tail invocation</nodename><nodenext automatic="on">split invocation</nodenext><nodeprev automatic="on">head invocation</nodeprev><nodeup automatic="on">Output of parts of files</nodeup></node>
<section spaces=" "><sectiontitle><command>tail</command>: Output the last part of files</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">tail</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">last part of files, outputting</indexterm></cindex>

<para><command>tail</command> prints the last part (10 lines by default) of each
<var>file</var>; it reads from standard input if no files are given or
when given a <var>file</var> of <samp>-</samp>.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">tail [<var>option</var>]&dots; [<var>file</var>]&dots;
</pre></example>

<para>If more than one <var>file</var> is specified, <command>tail</command> prints a
one-line header consisting of:
</para>
<example endspaces=" ">
<pre xml:space="preserve">==&gt; <var>file name</var> &lt;==
</pre></example>

<noindent></noindent>
<para>before the output for each <var>file</var>.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">BSD <command>tail</command></indexterm></cindex>
<para><sc>gnu</sc> <command>tail</command> can output any amount of data (some other versions of
<command>tail</command> cannot).  It also has no <option>-r</option> option (print in
reverse), since reversing a file is really a different job from printing
the end of a file; BSD <command>tail</command> (which is the one with <option>-r</option>) can
only reverse files that are at most as large as its buffer, which is
typically 32 KiB&eosperiod;  A more reliable and versatile way to reverse files is
the <sc>gnu</sc> <command>tac</command> command.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-c <var>k</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--bytes=<var>k</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-c</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;bytes</indexterm></indexcommand>
<para>Output the last <var>k</var> bytes, instead of final lines.
However, if <var>k</var> starts with a <samp>+</samp>, start printing with the
<var>k</var>th byte from the start of each file, instead of from the end.
<var>k</var> may be, or may be an integer optionally followed by,
one of the following multiplicative suffixes:
</para><example endspaces=" ">
<pre xml:space="preserve"><samp>b</samp>  =&gt;            512 (&quot;blocks&quot;)
<samp>KB</samp> =&gt;           1000 (KiloBytes)
<samp>K</samp>  =&gt;           1024 (KibiBytes)
<samp>MB</samp> =&gt;      1000*1000 (MegaBytes)
<samp>M</samp>  =&gt;      1024*1024 (MebiBytes)
<samp>GB</samp> =&gt; 1000*1000*1000 (GigaBytes)
<samp>G</samp>  =&gt; 1024*1024*1024 (GibiBytes)
</pre></example>
<para>and so on for <samp>T</samp>, <samp>P</samp>, <samp>E</samp>, <samp>Z</samp>, and <samp>Y</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-f</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--follow[=<var>how</var>]</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-f</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;follow</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">growing files</indexterm></cindex>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">name <r>follow option</r></indexterm></vindex>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">descriptor <r>follow option</r></indexterm></vindex>
<para>Loop forever trying to read more characters at the end of the file,
presumably because the file is growing.
If more than one file is given, <command>tail</command> prints a header whenever it
gets output from a different file, to indicate which file that output is
from.
</para>
<para>There are two ways to specify how you&textrsquo;d like to track files with this option,
but that difference is noticeable only when a followed file is removed or
renamed.
If you&textrsquo;d like to continue to track the end of a growing file even after
it has been unlinked, use <option>--follow=descriptor</option>.  This is the default
behavior, but it is not useful if you&textrsquo;re tracking a log file that may be
rotated (removed or renamed, then reopened).  In that case, use
<option>--follow=name</option> to track the named file, perhaps by reopening it
periodically to see if it has been removed and recreated by some other program.
Note that the inotify-based implementation handles this case without
the need for any periodic reopening.
</para>
<para>No matter which method you use, if the tracked file is determined to have
shrunk, <command>tail</command> prints a message saying the file has been truncated
and resumes tracking the end of the file from the newly-determined endpoint.
</para>
<para>When a file is removed, <command>tail</command>&textrsquo;s behavior depends on whether it is
following the name or the descriptor.  When following by name, tail can
detect that a file has been removed and gives a message to that effect,
and if <option>--retry</option> has been specified it will continue checking
periodically to see if the file reappears.
When following a descriptor, tail does not detect that the file has
been unlinked or renamed and issues no message;  even though the file
may no longer be accessible via its original name, it may still be
growing.
</para>
<para>The option values <samp>descriptor</samp> and <samp>name</samp> may be specified only
with the long form of the option, not with <option>-f</option>.
</para>
<para>The <option>-f</option> option is ignored if
no <var>file</var> operand is specified and standard input is a FIFO or a pipe.
Likewise, the <option>-f</option> option has no effect for any
operand specified as <samp>-</samp>, when standard input is a FIFO or a pipe.
</para>
<para>With kernel inotify support, output is triggered by file changes
and is generally very prompt.
Otherwise, <command>tail</command> sleeps for one second between checks&textmdash;
use <option>--sleep-interval=<var>n</var></option> to change that default&textmdash;which can
make the output appear slightly less responsive or bursty.
When using tail without inotify support, you can make it more responsive
by using a sub-second sleep interval, e.g., via an alias like this:
</para>
<example endspaces=" ">
<pre xml:space="preserve">alias tail='tail -s.1'
</pre></example>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-F</itemformat></item>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-F</indexterm></indexcommand>
<para>This option is the same as <option>--follow=name --retry</option>.  That is, tail
will attempt to reopen a file when it is removed.  Should this fail, tail
will keep trying until it becomes accessible again.
</para>
<itemx spaces=" "><itemformat command="samp">--retry</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;retry</indexterm></indexcommand>
<para>This option is useful mainly when following by name (i.e., with
<option>--follow=name</option>).
Without this option, when tail encounters a file that doesn&textrsquo;t
exist or is otherwise inaccessible, it reports that fact and
never checks it again.
</para>
<itemx spaces=" "><itemformat command="samp">--sleep-interval=<var>number</var></itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;sleep-interval</indexterm></indexcommand>
<para>Change the number of seconds to wait between iterations (the default is 1.0).
During one iteration, every specified file is checked to see if it has
changed size.
Historical implementations of <command>tail</command> have required that
<var>number</var> be an integer.  However, GNU <command>tail</command> accepts
an arbitrary floating point number.  <xref><xrefnodename>Floating point</xrefnodename></xref>.
When <command>tail</command> uses inotify, this polling-related option
is usually ignored.  However, if you also specify <option>--pid=<var>p</var></option>,
<command>tail</command> checks whether process <var>p</var> is alive at least
every <var>number</var> seconds.
</para>
<itemx spaces=" "><itemformat command="samp">--pid=<var>pid</var></itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;pid</indexterm></indexcommand>
<para>When following by name or by descriptor, you may specify the process ID,
<var>pid</var>, of the sole writer of all <var>file</var> arguments.  Then, shortly
after that process terminates, tail will also terminate.  This will
work properly only if the writer and the tailing process are running on
the same machine.  For example, to save the output of a build in a file
and to watch the file grow, if you invoke <command>make</command> and <command>tail</command>
like this then the tail process will stop when your build completes.
Without this option, you would have had to kill the <code>tail -f</code>
process yourself.
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ make &gt;&amp; makerr &amp; tail --pid=$! -f makerr
</pre></example>

<para>If you specify a <var>pid</var> that is not in use or that does not correspond
to the process that is writing to the tailed files, then <command>tail</command>
may terminate long before any <var>file</var>s stop growing or it may not
terminate until long after the real writer has terminated.
Note that <option>--pid</option> cannot be supported on some systems; <command>tail</command>
will print a warning if this is the case.
</para>
<itemx spaces=" "><itemformat command="samp">--max-unchanged-stats=<var>n</var></itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;max-unchanged-stats</indexterm></indexcommand>
<para>When tailing a file by name, if there have been <var>n</var> (default
n=) consecutive
iterations for which the file has not changed, then
<code>open</code>/<code>fstat</code> the file to determine if that file name is
still associated with the same device/inode-number pair as before.
When following a log file that is rotated, this is approximately the
number of seconds between when tail prints the last pre-rotation lines
and when it prints the lines that have accumulated in the new log file.
This option is meaningful only when polling (i.e., without inotify)
and when following by name.
</para>
<itemx spaces=" "><itemformat command="samp">-n <var>k</var></itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--lines=<var>k</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-n</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;lines</indexterm></indexcommand>
<para>Output the last <var>k</var> lines.
However, if <var>k</var> starts with a <samp>+</samp>, start printing with the
<var>k</var>th line from the start of each file, instead of from the end.
Size multiplier suffixes are the same as with the <option>-c</option> option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-q</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--quiet</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--silent</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-q</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;quiet</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;silent</indexterm></indexcommand>
<para>Never print file name headers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-v</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--verbose</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-v</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;verbose</indexterm></indexcommand>
<para>Always print file name headers.
</para>
</tableitem></tableentry></table>

<para>For compatibility <command>tail</command> also supports an obsolete usage
<samp>tail -[<var>count</var>][bcl][f] [<var>file</var>]</samp>, which is recognized
only if it does not conflict with the usage described
above.  This obsolete form uses exactly one option and at most one
file.  In the option, <var>count</var> is an optional decimal number optionally
followed by a size letter (<samp>b</samp>, <samp>c</samp>, <samp>l</samp>) to mean count
by 512-byte blocks, bytes, or lines, optionally followed by <samp>f</samp>
which has the same meaning as <option>-f</option>.
</para>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">_POSIX2_VERSION</indexterm></vindex>
<para>On older systems, the leading <samp>-</samp> can be replaced by <samp>+</samp> in
the obsolete option syntax with the same meaning as in counts, and
obsolete usage overrides normal usage when the two conflict.
This obsolete behavior can be enabled or disabled with the
<env>_POSIX2_VERSION</env> environment variable (<pxref><xrefnodename>Standards
conformance</xrefnodename></pxref>).
</para>
<para>Scripts intended for use on standard hosts should avoid obsolete
syntax and should use <option>-c <var>count</var>[b]</option>, <option>-n
<var>count</var></option>, and/or <option>-f</option> instead.  If your script must also
run on hosts that support only the obsolete syntax, you can often
rewrite it to avoid problematic usages, e.g., by using <samp>sed -n
'$p'</samp> rather than <samp>tail -1</samp>.  If that&textrsquo;s not possible, the script
can use a test like <samp>if tail -c +1 &lt;/dev/null &gt;/dev/null 2&gt;&amp;1;
then &dots;</samp> to decide which syntax to use.
</para>
<para>Even if your script assumes the standard behavior, you should still
beware usages whose behaviors differ depending on the <acronym><acronymword>POSIX</acronymword></acronym>
version.  For example, avoid <samp>tail - main.c</samp>, since it might be
interpreted as either <samp>tail main.c</samp> or as <samp>tail -- -
main.c</samp>; avoid <samp>tail -c 4</samp>, since it might mean either <samp>tail
-c4</samp> or <samp>tail -c 10 4</samp>; and avoid <samp>tail +4</samp>, since it might
mean either <samp>tail ./+4</samp> or <samp>tail -n +4</samp>.
</para>
<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="split-invocation" spaces=" "><nodename>split invocation</nodename><nodenext automatic="on">csplit invocation</nodenext><nodeprev automatic="on">tail invocation</nodeprev><nodeup automatic="on">Output of parts of files</nodeup></node>
<section spaces=" "><sectiontitle><command>split</command>: Split a file into pieces.</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">split</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">splitting a file into pieces</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">pieces, splitting a file into</indexterm></cindex>

<para><command>split</command> creates output files containing consecutive or interleaved
sections of <var>input</var>  (standard input if none is given or <var>input</var>
is <samp>-</samp>).  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">split [<var>option</var>] [<var>input</var> [<var>prefix</var>]]
</pre></example>

<para>By default, <command>split</command> puts 1000 lines of <var>input</var> (or whatever is
left over for the last section), into each output file.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">output file name prefix</indexterm></cindex>
<para>The output files&textrsquo; names consist of <var>prefix</var> (<samp>x</samp> by default)
followed by a group of characters (<samp>aa</samp>, <samp>ab</samp>, &dots; by
default), such that concatenating the output files in traditional
sorted order by file name produces the original input file (except
<option>-r</option>).  If the output file names are exhausted, <command>split</command>
reports an error without deleting the output files that it did create.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-l <var>lines</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--lines=<var>lines</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-l</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;lines</indexterm></indexcommand>
<para>Put <var>lines</var> lines of <var>input</var> into each output file.
</para>
<para>For compatibility <command>split</command> also supports an obsolete
option syntax <option>-<var>lines</var></option>.  New scripts should use
<option>-l <var>lines</var></option> instead.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-b <var>size</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--bytes=<var>size</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-b</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;bytes</indexterm></indexcommand>
<para>Put <var>size</var> bytes of <var>input</var> into each output file.
<var>size</var> may be, or may be an integer optionally followed by,
one of the following multiplicative suffixes:
</para><example endspaces=" ">
<pre xml:space="preserve"><samp>b</samp>  =&gt;            512 (&quot;blocks&quot;)
<samp>KB</samp> =&gt;           1000 (KiloBytes)
<samp>K</samp>  =&gt;           1024 (KibiBytes)
<samp>MB</samp> =&gt;      1000*1000 (MegaBytes)
<samp>M</samp>  =&gt;      1024*1024 (MebiBytes)
<samp>GB</samp> =&gt; 1000*1000*1000 (GigaBytes)
<samp>G</samp>  =&gt; 1024*1024*1024 (GibiBytes)
</pre></example>
<para>and so on for <samp>T</samp>, <samp>P</samp>, <samp>E</samp>, <samp>Z</samp>, and <samp>Y</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-C <var>size</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--line-bytes=<var>size</var></itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-C</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;line-bytes</indexterm></indexcommand>
<para>Put into each output file as many complete lines of <var>input</var> as
possible without exceeding <var>size</var> bytes.  Individual lines longer than
<var>size</var> bytes are broken into multiple files.
<var>size</var> has the same format as for the <option>--bytes</option> option.
</para>
<itemx spaces=" "><itemformat command="samp">--filter=<var>command</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;filter</indexterm></indexcommand>
<para>With this option, rather than simply writing to each output file,
write through a pipe to the specified shell <var>command</var> for each output file.
<var>command</var> should use the $FILE environment variable, which is set
to a different output file name for each invocation of the command.
For example, imagine that you have a 1TiB compressed file
that, if uncompressed, would be too large to reside on disk,
yet you must split it into individually-compressed pieces
of a more manageable size.
To do that, you might run this command:
</para>
<example endspaces=" ">
<pre xml:space="preserve">xz -dc BIG.xz | split -b200G --filter='xz &gt; $FILE.xz' - big-
</pre></example>

<para>Assuming a 10:1 compression ratio, that would create about fifty 20GiB files
with names <file>big-xaa.xz</file>, <file>big-xab.xz</file>, <file>big-xac.xz</file>, etc.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-n <var>chunks</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--number=<var>chunks</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-n</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;number</indexterm></indexcommand>

<para>Split <var>input</var> to <var>chunks</var> output files where <var>chunks</var> may be:
</para>
<example endspaces=" ">
<pre xml:space="preserve"><var>n</var>      generate <var>n</var> files based on current size of <var>input</var>
<var>k</var>/<var>n</var>    only output <var>k</var>th of <var>n</var> to stdout
l/<var>n</var>    generate <var>n</var> files without splitting lines
l/<var>k</var>/<var>n</var>  likewise but only output <var>k</var>th of <var>n</var> to stdout
r/<var>n</var>    like <samp>l</samp> but use round robin distribution
r/<var>k</var>/<var>n</var>  likewise but only output <var>k</var>th of <var>n</var> to stdout
</pre></example>

<para>Any excess bytes remaining after dividing the <var>input</var>
into <var>n</var> chunks, are assigned to the last chunk.
Any excess bytes appearing after the initial calculation are discarded
(except when using <samp>r</samp> mode).
</para>
<para>All <var>n</var> files are created even if there are fewer than <var>n</var> lines,
or the <var>input</var> is truncated.
</para>
<para>For <samp>l</samp> mode, chunks are approximately <var>input</var> size / <var>n</var>.
The <var>input</var> is partitioned into <var>n</var> equal sized portions, with
the last assigned any excess.  If a line <emph>starts</emph> within a partition
it is written completely to the corresponding file.  Since lines
are not split even if they overlap a partition, the files written
can be larger or smaller than the partition size, and even empty
if a line is so long as to completely overlap the partition.
</para>
<para>For <samp>r</samp> mode, the size of <var>input</var> is irrelevant,
and so can be a pipe for example.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-a <var>length</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--suffix-length=<var>length</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-a</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;suffix-length</indexterm></indexcommand>
<para>Use suffixes of length <var>length</var>.  The default <var>length</var> is 2.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-d</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--numeric-suffixes</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-d</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;numeric-suffixes</indexterm></indexcommand>
<para>Use digits in suffixes rather than lower-case letters.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-e</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--elide-empty-files</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-e</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;elide-empty-files</indexterm></indexcommand>
<para>Suppress the generation of zero-length output files.  This can happen
with the <option>--number</option> option if a file is (truncated to be) shorter
than the number requested, or if a line is so long as to completely
span a chunk.  The output file sequence numbers, always run consecutively
even when this option is specified.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-u</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--unbuffered</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-u</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;unbuffered</indexterm></indexcommand>
<para>Immediately copy input to output in <option>--number r/...</option> mode,
which is a much slower mode of operation.
</para>
<itemx spaces=" "><itemformat command="samp">--verbose</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;verbose</indexterm></indexcommand>
<para>Write a diagnostic just before each output file is opened.
</para>
</tableitem></tableentry></table>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>
<para>Here are a few examples to illustrate how the
<option>--number</option> (<option>-n</option>) option works:
</para>
<para>Notice how, by default, one line may be split onto two or more:
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ seq -w 6 10 &gt; k; split -n3 k; head xa?
==&gt; xaa &lt;==
06
07
==&gt; xab &lt;==

08
0
==&gt; xac &lt;==
9
10
</pre></example>

<para>Use the &quot;l/&quot; modifier to suppress that:
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ seq -w 6 10 &gt; k; split -nl/3 k; head xa?
==&gt; xaa &lt;==
06
07

==&gt; xab &lt;==
08
09

==&gt; xac &lt;==
10
</pre></example>

<para>Use the &quot;r/&quot; modifier to distribute lines in a round-robin fashion:
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ seq -w 6 10 &gt; k; split -nr/3 k; head xa?
==&gt; xaa &lt;==
06
09

==&gt; xab &lt;==
07
10

==&gt; xac &lt;==
08
</pre></example>

<para>You can also extract just the Kth chunk.
This extracts and prints just the 7th &quot;chunk&quot; of 33:
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ seq 100 &gt; k; split -nl/7/33 k
20
21
22
</pre></example>


</section>
<node name="csplit-invocation" spaces=" "><nodename>csplit invocation</nodename><nodeprev automatic="on">split invocation</nodeprev><nodeup automatic="on">Output of parts of files</nodeup></node>
<section spaces=" "><sectiontitle><command>csplit</command>: Split a file into context-determined pieces</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">csplit</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">context splitting</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">splitting a file into pieces by context</indexterm></cindex>

<para><command>csplit</command> creates zero or more output files containing sections of
<var>input</var> (standard input if <var>input</var> is <samp>-</samp>).  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">csplit [<var>option</var>]&dots; <var>input</var> <var>pattern</var>&dots;
</pre></example>

<para>The contents of the output files are determined by the <var>pattern</var>
arguments, as detailed below.  An error occurs if a <var>pattern</var>
argument refers to a nonexistent line of the input file (e.g., if no
remaining line matches a given regular expression).  After every
<var>pattern</var> has been matched, any remaining input is copied into one
last output file.
</para>
<para>By default, <command>csplit</command> prints the number of bytes written to each
output file after it has been created.
</para>
<para>The types of pattern arguments are:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp"><var>n</var></itemformat></item>
</tableterm><tableitem><para>Create an output file containing the input up to but not including line
<var>n</var> (a positive integer).  If followed by a repeat count, also
create an output file containing the next <var>n</var> lines of the input
file once for each repeat.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">/<var>regexp</var>/[<var>offset</var>]</itemformat></item>
</tableterm><tableitem><para>Create an output file containing the current line up to (but not
including) the next line of the input file that contains a match for
<var>regexp</var>.  The optional <var>offset</var> is an integer.
If it is given, the input up to (but not including) the
matching line plus or minus <var>offset</var> is put into the output file,
and the line after that begins the next section of input.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%<var>regexp</var>%[<var>offset</var>]</itemformat></item>
</tableterm><tableitem><para>Like the previous type, except that it does not create an output
file, so that section of the input file is effectively ignored.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">&lbrace;<var>repeat-count</var>&rbrace;</itemformat></item>
</tableterm><tableitem><para>Repeat the previous pattern <var>repeat-count</var> additional
times.  The <var>repeat-count</var> can either be a positive integer or an
asterisk, meaning repeat as many times as necessary until the input is
exhausted.
</para>
</tableitem></tableentry></table>

<para>The output files&textrsquo; names consist of a prefix (<samp>xx</samp> by default)
followed by a suffix.  By default, the suffix is an ascending sequence
of two-digit decimal numbers from <samp>00</samp> to <samp>99</samp>.  In any case,
concatenating the output files in sorted order by file name produces the
original input file.
</para>
<para>By default, if <command>csplit</command> encounters an error or receives a hangup,
interrupt, quit, or terminate signal, it removes any output files
that it has created so far before it exits.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-f <var>prefix</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--prefix=<var>prefix</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-f</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;prefix</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">output file name prefix</indexterm></cindex>
<para>Use <var>prefix</var> as the output file name prefix.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-b <var>suffix</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--suffix=<var>suffix</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-b</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;suffix</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">output file name suffix</indexterm></cindex>
<para>Use <var>suffix</var> as the output file name suffix.  When this option is
specified, the suffix string must include exactly one
<code>printf(3)</code>-style conversion specification, possibly including
format specification flags, a field width, a precision specifications,
or all of these kinds of modifiers.  The format letter must convert a
binary unsigned integer argument to readable form.  The format letters
<samp>d</samp> and <samp>i</samp> are aliases for <samp>u</samp>, and the
<samp>u</samp>, <samp>o</samp>, <samp>x</samp>, and <samp>X</samp> conversions are allowed.  The
entire <var>suffix</var> is given (with the current output file number) to
<code>sprintf(3)</code> to form the file name suffixes for each of the
individual output files in turn.  If this option is used, the
<option>--digits</option> option is ignored.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-n <var>digits</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--digits=<var>digits</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-n</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;digits</indexterm></indexcommand>
<para>Use output file names containing numbers that are <var>digits</var> digits
long instead of the default 2.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-k</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--keep-files</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-k</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;keep-files</indexterm></indexcommand>
<para>Do not remove output files when errors are encountered.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-z</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--elide-empty-files</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-z</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;elide-empty-files</indexterm></indexcommand>
<para>Suppress the generation of zero-length output files.  (In cases where
the section delimiters of the input file are supposed to mark the first
lines of each of the sections, the first output file will generally be a
zero-length file unless you use this option.)  The output file sequence
numbers always run consecutively starting from 0, even when this option
is specified.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-s</itemformat></item>
<itemx spaces=" "><itemformat command="samp">-q</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--silent</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--quiet</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-s</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-q</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;silent</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;quiet</indexterm></indexcommand>
<para>Do not print counts of output file sizes.
</para>
</tableitem></tableentry></table>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>
<para>Here is an example of its usage.
First, create an empty directory for the exercise,
and cd into it:
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ mkdir d &amp;&amp; cd d
</pre></example>

<para>Now, split the sequence of 1..14 on lines that end with 0 or 5:
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ seq 14 | csplit - '/[05]$/' '&lbrace;*&rbrace;'
8
10
15
</pre></example>

<para>Each number printed above is the size of an output
file that csplit has just created.
List the names of those output files:
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ ls
xx00  xx01  xx02
</pre></example>

<para>Use <command>head</command> to show their contents:
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ head xx*
==&gt; xx00 &lt;==
1
2
3
4

==&gt; xx01 &lt;==
5
6
7
8
9

==&gt; xx02 &lt;==
10
11
12
13
14
</pre></example>

</section>
</chapter>
<node name="Summarizing-files" spaces=" "><nodename>Summarizing files</nodename><nodenext automatic="on">Operating on sorted files</nodenext><nodeprev automatic="on">Output of parts of files</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>Summarizing files</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">summarizing files</indexterm></cindex>

<para>These commands generate just a few numbers representing entire
contents of files.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::               ">wc invocation</menunode><menudescription><pre xml:space="preserve">Print newline, word, and byte counts.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::              ">sum invocation</menunode><menudescription><pre xml:space="preserve">Print checksum and block counts.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">cksum invocation</menunode><menudescription><pre xml:space="preserve">Print CRC checksum and byte counts.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::           ">md5sum invocation</menunode><menudescription><pre xml:space="preserve">Print or check MD5 digests.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::          ">sha1sum invocation</menunode><menudescription><pre xml:space="preserve">Print or check SHA-1 digests.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::              ">sha2 utilities</menunode><menudescription><pre xml:space="preserve">Print or check SHA-2 digests.
</pre></menudescription></menuentry></menu>


<node name="wc-invocation" spaces=" "><nodename>wc invocation</nodename><nodenext automatic="on">sum invocation</nodenext><nodeup automatic="on">Summarizing files</nodeup></node>
<section spaces=" "><sectiontitle><command>wc</command>: Print newline, word, and byte counts</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">wc</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">byte count</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">character count</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">word count</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">line count</indexterm></cindex>

<para><command>wc</command> counts the number of bytes, characters, whitespace-separated
words, and newlines in each given <var>file</var>, or standard input if none
are given or for a <var>file</var> of <samp>-</samp>.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">wc [<var>option</var>]&dots; [<var>file</var>]&dots;
</pre></example>

<cindex index="cp" spaces=" "><indexterm index="cp">total counts</indexterm></cindex>
<para><command>wc</command> prints one line of counts for each file, and if the file was
given as an argument, it prints the file name following the counts.  If
more than one <var>file</var> is given, <command>wc</command> prints a final line
containing the cumulative counts, with the file name <file>total</file>.  The
counts are printed in this order: newlines, words, characters, bytes,
maximum line length.
Each count is printed right-justified in a field with at least one
space between fields so that the numbers and file names normally line
up nicely in columns.  The width of the count fields varies depending
on the inputs, so you should not depend on a particular field width.
However, as a <acronym><acronymword>GNU</acronymword></acronym> extension, if only one count is printed,
it is guaranteed to be printed without leading spaces.
</para>
<para>By default, <command>wc</command> prints three counts: the newline, words, and byte
counts.  Options can specify that only certain counts be printed.
Options do not undo others previously given, so
</para>
<example endspaces=" ">
<pre xml:space="preserve">wc --bytes --words
</pre></example>

<noindent></noindent>
<para>prints both the byte counts and the word counts.
</para>
<para>With the <option>--max-line-length</option> option, <command>wc</command> prints the length
of the longest line per file, and if there is more than one file it
prints the maximum (not the sum) of those lengths.  The line lengths here
are measured in screen columns, according to the current locale and
assuming tab positions in every 8th column.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-c</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--bytes</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-c</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;bytes</indexterm></indexcommand>
<para>Print only the byte counts.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-m</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--chars</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-m</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;chars</indexterm></indexcommand>
<para>Print only the character counts.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-w</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--words</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-w</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;words</indexterm></indexcommand>
<para>Print only the word counts.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-l</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--lines</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-l</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;lines</indexterm></indexcommand>
<para>Print only the newline counts.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-L</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--max-line-length</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-L</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;max-line-length</indexterm></indexcommand>
<para>Print only the maximum line lengths.
</para>
<macro name="filesZeroFromOption" line=" filesZeroFromOption{cmd,withTotalOption,subListOutput}"><formalarg>cmd</formalarg><formalarg>withTotalOption</formalarg><formalarg>subListOutput</formalarg>@itemx --files0-from=@var{file}
@opindex --files0-from=@var{file}
@c This is commented out to avoid a texi2dvi failure.
@c texi2dvi (GNU Texinfo 4.11) 1.104
@c @cindex including files from @command{\cmd\}
Disallow processing files named on the command line, and instead process
those named in file @var{file}; each name being terminated by a zero byte
(@acronym{ASCII} @sc{nul}).
This is useful \withTotalOption\
when the list of file names is so long that it may exceed a command line
length limitation.
In such cases, running @command{\cmd\} via @command{xargs} is undesirable
because it splits the list into pieces and makes @command{\cmd\} print
\subListOutput\ for each sublist rather than for the entire list.
One way to produce a list of @acronym{ASCII} @sc{nul} terminated file
names is with @sc{gnu}
@command{find}, using its @option{-print0} predicate.
If @var{file} is @samp{-} then the @acronym{ASCII} @sc{nul} terminated
file names are read from standard input.
</macro>
<itemx spaces=" "><itemformat command="samp">--files0-from=<var>file</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;files0-from=<var>file</var></indexterm></indexcommand>
<!-- c This is commented out to avoid a texi2dvi failure. -->
<!-- c texi2dvi (GNU Texinfo 4.11) 1.104 -->
<!-- c @cindex including files from @command{wc} -->
<para>Disallow processing files named on the command line, and instead process
those named in file <var>file</var>; each name being terminated by a zero byte
(<acronym><acronymword>ASCII</acronymword></acronym> <sc>nul</sc>).
This is useful 
when the list of file names is so long that it may exceed a command line
length limitation.
In such cases, running <command>wc</command> via <command>xargs</command> is undesirable
because it splits the list into pieces and makes <command>wc</command> print
a total for each sublist rather than for the entire list.
One way to produce a list of <acronym><acronymword>ASCII</acronymword></acronym> <sc>nul</sc> terminated file
names is with <sc>gnu</sc>
<command>find</command>, using its <option>-print0</option> predicate.
If <var>file</var> is <samp>-</samp> then the <acronym><acronymword>ASCII</acronymword></acronym> <sc>nul</sc> terminated
file names are read from standard input.
</para>
<para>For example, to find the length of the longest line in any <file>.c</file> or
<file>.h</file> file in the current hierarchy, do this:
</para>
<example endspaces=" ">
<pre xml:space="preserve">find . -name '*.[ch]' -print0 |
  wc -L --files0-from=- | tail -n1
</pre></example>

</tableitem></tableentry></table>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="sum-invocation" spaces=" "><nodename>sum invocation</nodename><nodenext automatic="on">cksum invocation</nodenext><nodeprev automatic="on">wc invocation</nodeprev><nodeup automatic="on">Summarizing files</nodeup></node>
<section spaces=" "><sectiontitle><command>sum</command>: Print checksum and block counts</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">sum</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">16-bit checksum</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">checksum, 16-bit</indexterm></cindex>

<para><command>sum</command> computes a 16-bit checksum for each given <var>file</var>, or
standard input if none are given or for a <var>file</var> of <samp>-</samp>.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">sum [<var>option</var>]&dots; [<var>file</var>]&dots;
</pre></example>

<para><command>sum</command> prints the checksum for each <var>file</var> followed by the
number of blocks in the file (rounded up).  If more than one <var>file</var>
is given, file names are also printed (by default).  (With the
<option>--sysv</option> option, corresponding file names are printed when there is
at least one file argument.)
</para>
<para>By default, <sc>gnu</sc> <command>sum</command> computes checksums using an algorithm
compatible with BSD <command>sum</command> and prints file sizes in units of
1024-byte blocks.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-r</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-r</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">BSD <command>sum</command></indexterm></cindex>
<para>Use the default (BSD compatible) algorithm.  This option is included for
compatibility with the System V <command>sum</command>.  Unless <option>-s</option> was also
given, it has no effect.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-s</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--sysv</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-s</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;sysv</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">System V <command>sum</command></indexterm></cindex>
<para>Compute checksums using an algorithm compatible with System V
<command>sum</command>&textrsquo;s default, and print file sizes in units of 512-byte blocks.
</para>
</tableitem></tableentry></table>

<para><command>sum</command> is provided for compatibility; the <command>cksum</command> program (see
next section) is preferable in new applications.
</para>
<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="cksum-invocation" spaces=" "><nodename>cksum invocation</nodename><nodenext automatic="on">md5sum invocation</nodenext><nodeprev automatic="on">sum invocation</nodeprev><nodeup automatic="on">Summarizing files</nodeup></node>
<section spaces=" "><sectiontitle><command>cksum</command>: Print CRC checksum and byte counts</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">cksum</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">cyclic redundancy check</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">CRC checksum</indexterm></cindex>

<para><command>cksum</command> computes a cyclic redundancy check (CRC) checksum for each
given <var>file</var>, or standard input if none are given or for a
<var>file</var> of <samp>-</samp>.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">cksum [<var>option</var>]&dots; [<var>file</var>]&dots;
</pre></example>

<para><command>cksum</command> prints the CRC checksum for each file along with the number
of bytes in the file, and the file name unless no arguments were given.
</para>
<para><command>cksum</command> is typically used to ensure that files
transferred by unreliable means (e.g., netnews) have not been corrupted,
by comparing the <command>cksum</command> output for the received files with the
<command>cksum</command> output for the original files (typically given in the
distribution).
</para>
<para>The CRC algorithm is specified by the <acronym><acronymword>POSIX</acronymword></acronym> standard.  It is not
compatible with the BSD or System V <command>sum</command> algorithms (see the
previous section); it is more robust.
</para>
<para>The only options are <option>--help</option> and <option>--version</option>.  <xref><xrefnodename>Common
options</xrefnodename></xref>.
</para>
<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="md5sum-invocation" spaces=" "><nodename>md5sum invocation</nodename><nodenext automatic="on">sha1sum invocation</nodenext><nodeprev automatic="on">cksum invocation</nodeprev><nodeup automatic="on">Summarizing files</nodeup></node>
<section spaces=" "><sectiontitle><command>md5sum</command>: Print or check MD5 digests</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">md5sum</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">MD5</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">128-bit checksum</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">checksum, 128-bit</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">fingerprint, 128-bit</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">message-digest, 128-bit</indexterm></cindex>

<para><command>md5sum</command> computes a 128-bit checksum (or <dfn>fingerprint</dfn> or
<dfn>message-digest</dfn>) for each specified <var>file</var>.
</para>
<para>Note: The MD5 digest is more reliable than a simple CRC (provided by
the <command>cksum</command> command) for detecting accidental file corruption,
as the chances of accidentally having two files with identical MD5
are vanishingly small.  However, it should not be considered secure
against malicious tampering: although finding a file with a given MD5
fingerprint is considered infeasible at the moment, it is known how
to modify certain files, including digital certificates, so that they
appear valid when signed with an MD5 digest.
For more secure hashes, consider using SHA-2.  <xref><xrefnodename>sha2 utilities</xrefnodename></xref>.
</para>
<para>If a <var>file</var> is specified as <samp>-</samp> or if no files are given
<command>md5sum</command> computes the checksum for the standard input.
<command>md5sum</command> can also determine whether a file and checksum are
consistent.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">md5sum [<var>option</var>]&dots; [<var>file</var>]&dots;
</pre></example>

<para>For each <var>file</var>, <samp>md5sum</samp> outputs the MD5 checksum, a flag
indicating binary or text input mode, and the file name.
If <var>file</var> contains a backslash or newline, the
line is started with a backslash, and each problematic character in
the file name is escaped with a backslash, making the output
unambiguous even in the presence of arbitrary file names.
If <var>file</var> is omitted or specified as <samp>-</samp>, standard input is read.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-b</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--binary</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-b</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;binary</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">binary input files</indexterm></cindex>
<para>Treat each input file as binary, by reading it in binary mode and
outputting a <samp>*</samp> flag.  This is the inverse of <option>--text</option>.
On systems like <acronym><acronymword>GNU</acronymword></acronym> that do not distinguish between binary
and text files, this option merely flags each input mode as binary:
the MD5 checksum is unaffected.  This option is the default on systems
like MS-DOS that distinguish between binary and text files, except
for reading standard input when standard input is a terminal.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-c</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--check</itemformat></itemx>
<para>Read file names and checksum information (not data) from each
<var>file</var> (or from stdin if no <var>file</var> was specified) and report
whether the checksums match the contents of the named files.
The input to this mode of <command>md5sum</command> is usually the output of
a prior, checksum-generating run of <samp>md5sum</samp>.
Each valid line of input consists of an MD5 checksum, a binary/text
flag, and then a file name.
Binary mode is indicated with <samp>*</samp>, text with <samp> </samp> (space).
For each such line, <command>md5sum</command> reads the named file and computes its
MD5 checksum.  Then, if the computed message digest does not match the
one on the line with the file name, the file is noted as having
failed the test.  Otherwise, the file passes the test.
By default, for each valid line, one line is written to standard
output indicating whether the named file passed the test.
After all checks have been performed, if there were any failures,
a warning is issued to standard error.
Use the <option>--status</option> option to inhibit that output.
If any listed file cannot be opened or read, if any valid line has
an MD5 checksum inconsistent with the associated file, or if no valid
line is found, <command>md5sum</command> exits with nonzero status.  Otherwise,
it exits successfully.
</para>
<itemx spaces=" "><itemformat command="samp">--quiet</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;quiet</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">verifying MD5 checksums</indexterm></cindex>
<para>This option is useful only when verifying checksums.
When verifying checksums, don&textrsquo;t generate an &textrsquo;OK&textrsquo; message per successfully
checked file.  Files that fail the verification are reported in the
default one-line-per-file format.  If there is any checksum mismatch,
print a warning summarizing the failures to standard error.
</para>
<itemx spaces=" "><itemformat command="samp">--status</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;status</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">verifying MD5 checksums</indexterm></cindex>
<para>This option is useful only when verifying checksums.
When verifying checksums, don&textrsquo;t generate the default one-line-per-file
diagnostic and don&textrsquo;t output the warning summarizing any failures.
Failures to open or read a file still evoke individual diagnostics to
standard error.
If all listed files are readable and are consistent with the associated
MD5 checksums, exit successfully.  Otherwise exit with a status code
indicating there was a failure.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-t</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--text</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-t</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;text</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">text input files</indexterm></cindex>
<para>Treat each input file as text, by reading it in text mode and
outputting a <samp> </samp> flag.  This is the inverse of <option>--binary</option>.
This option is the default on systems like <acronym><acronymword>GNU</acronymword></acronym> that do not
distinguish between binary and text files.  On other systems, it is
the default for reading standard input when standard input is a
terminal.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-w</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--warn</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-w</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;warn</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">verifying MD5 checksums</indexterm></cindex>
<para>When verifying checksums, warn about improperly formatted MD5 checksum lines.
This option is useful only if all but a few lines in the checked input
are valid.
</para>
<itemx spaces=" "><itemformat command="samp">--strict</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;strict</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">verifying MD5 checksums</indexterm></cindex>
<para>When verifying checksums,
if one or more input line is invalid,
exit nonzero after all warnings have been issued.
</para>
</tableitem></tableentry></table>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="sha1sum-invocation" spaces=" "><nodename>sha1sum invocation</nodename><nodenext automatic="on">sha2 utilities</nodenext><nodeprev automatic="on">md5sum invocation</nodeprev><nodeup automatic="on">Summarizing files</nodeup></node>
<section spaces=" "><sectiontitle><command>sha1sum</command>: Print or check SHA-1 digests</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">sha1sum</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">SHA-1</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">160-bit checksum</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">checksum, 160-bit</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">fingerprint, 160-bit</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">message-digest, 160-bit</indexterm></cindex>

<para><command>sha1sum</command> computes a 160-bit checksum for each specified
<var>file</var>.  The usage and options of this command are precisely the
same as for <command>md5sum</command>.  <xref><xrefnodename>md5sum invocation</xrefnodename></xref>.
</para>
<para>Note: The SHA-1 digest is more secure than MD5, and no collisions of
it are known (different files having the same fingerprint).  However,
it is known that they can be produced with considerable, but not
unreasonable, resources.  For this reason, it is generally considered
that SHA-1 should be gradually phased out in favor of the more secure
SHA-2 hash algorithms.  <xref><xrefnodename>sha2 utilities</xrefnodename></xref>.
</para>

</section>
<node name="sha2-utilities" spaces=" "><nodename>sha2 utilities</nodename><nodeprev automatic="on">sha1sum invocation</nodeprev><nodeup automatic="on">Summarizing files</nodeup></node>
<section spaces=" "><sectiontitle>sha2 utilities: Print or check SHA-2 digests</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">sha224sum</indexterm></pindex>
<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">sha256sum</indexterm></pindex>
<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">sha384sum</indexterm></pindex>
<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">sha512sum</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">SHA-2</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">224-bit checksum</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">256-bit checksum</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">384-bit checksum</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">512-bit checksum</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">checksum, 224-bit</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">checksum, 256-bit</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">checksum, 384-bit</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">checksum, 512-bit</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">fingerprint, 224-bit</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">fingerprint, 256-bit</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">fingerprint, 384-bit</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">fingerprint, 512-bit</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">message-digest, 224-bit</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">message-digest, 256-bit</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">message-digest, 384-bit</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">message-digest, 512-bit</indexterm></cindex>

<para>The commands <command>sha224sum</command>, <command>sha256sum</command>,
<command>sha384sum</command> and <command>sha512sum</command> compute checksums of
various lengths (respectively 224, 256, 384 and 512 bits),
collectively known as the SHA-2 hashes.  The usage and options of
these commands are precisely the same as for <command>md5sum</command>.
<xref><xrefnodename>md5sum invocation</xrefnodename></xref>.
</para>
<para>Note: The SHA384 and SHA512 digests are considerably slower to
compute, especially on 32-bit computers, than SHA224 or SHA256.
</para>

</section>
</chapter>
<node name="Operating-on-sorted-files" spaces=" "><nodename>Operating on sorted files</nodename><nodenext automatic="on">Operating on fields</nodenext><nodeprev automatic="on">Summarizing files</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>Operating on sorted files</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">operating on sorted files</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">sorted files, operations on</indexterm></cindex>

<para>These commands work with (or produce) sorted files.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::             ">sort invocation</menunode><menudescription><pre xml:space="preserve">Sort text files.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">shuf invocation</menunode><menudescription><pre xml:space="preserve">Shuffle text files.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">uniq invocation</menunode><menudescription><pre xml:space="preserve">Uniquify files.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">comm invocation</menunode><menudescription><pre xml:space="preserve">Compare two sorted files line by line.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::              ">ptx invocation</menunode><menudescription><pre xml:space="preserve">Produce a permuted index of file contents.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">tsort invocation</menunode><menudescription><pre xml:space="preserve">Topological sort.
</pre></menudescription></menuentry></menu>


<node name="sort-invocation" spaces=" "><nodename>sort invocation</nodename><nodenext automatic="on">shuf invocation</nodenext><nodeup automatic="on">Operating on sorted files</nodeup></node>
<section spaces=" "><sectiontitle><command>sort</command>: Sort text files</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">sort</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">sorting files</indexterm></cindex>

<para><command>sort</command> sorts, merges, or compares all the lines from the given
files, or standard input if none are given or for a <var>file</var> of
<samp>-</samp>.  By default, <command>sort</command> writes the results to standard
output.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">sort [<var>option</var>]&dots; [<var>file</var>]&dots;
</pre></example>

<para><command>sort</command> has three modes of operation: sort (the default), merge,
and check for sortedness.  The following options change the operation
mode:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-c</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--check</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--check=diagnose-first</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-c</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;check</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">checking for sortedness</indexterm></cindex>
<para>Check whether the given file is already sorted: if it is not all
sorted, print a diagnostic containing the first out-of-order line and
exit with a status of 1.
Otherwise, exit successfully.
At most one input file can be given.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-C</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--check=quiet</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--check=silent</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-c</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;check</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">checking for sortedness</indexterm></cindex>
<para>Exit successfully if the given file is already sorted, and
exit with status 1 otherwise.
At most one input file can be given.
This is like <option>-c</option>, except it does not print a diagnostic.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-m</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--merge</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-m</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;merge</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">merging sorted files</indexterm></cindex>
<para>Merge the given files by sorting them as a group.  Each input file must
always be individually sorted.  It always works to sort instead of
merge; merging is provided because it is faster, in the case where it
works.
</para>
</tableitem></tableentry></table>

<cindex index="cp" spaces=" "><indexterm index="cp">sort stability</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">sort&textrsquo;s last-resort comparison</indexterm></cindex>
<para>A pair of lines is compared as follows:
<command>sort</command> compares each pair of fields, in the
order specified on the command line, according to the associated
ordering options, until a difference is found or no fields are left.
If no key fields are specified, <command>sort</command> uses a default key of
the entire line.  Finally, as a last resort when all keys compare
equal, <command>sort</command> compares entire lines as if no ordering options
other than <option>--reverse</option> (<option>-r</option>) were specified.  The
<option>--stable</option> (<option>-s</option>) option disables this <dfn>last-resort
comparison</dfn> so that lines in which all fields compare equal are left
in their original relative order.  The <option>--unique</option>
(<option>-u</option>) option also disables the last-resort comparison.
</para>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">LC_ALL</indexterm></vindex>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">LC_COLLATE</indexterm></vindex>
<para>Unless otherwise specified, all comparisons use the character collating
sequence specified by the <env>LC_COLLATE</env> locale.<footnote><para>If you
use a non-<acronym><acronymword>POSIX</acronymword></acronym> locale (e.g., by setting <env>LC_ALL</env>
to <samp>en_US</samp>), then <command>sort</command> may produce output that is sorted
differently than you&textrsquo;re accustomed to.  In that case, set the <env>LC_ALL</env>
environment variable to <samp>C</samp>.  Note that setting only <env>LC_COLLATE</env>
has two problems.  First, it is ineffective if <env>LC_ALL</env> is also set.
Second, it has undefined behavior if <env>LC_CTYPE</env> (or <env>LANG</env>, if
<env>LC_CTYPE</env> is unset) is set to an incompatible value.  For example,
you get undefined behavior if <env>LC_CTYPE</env> is <code>ja_JP.PCK</code> but
<env>LC_COLLATE</env> is <code>en_US.UTF-8</code>.</para></footnote>
</para>
<para><sc>gnu</sc> <command>sort</command> (as specified for all <sc>gnu</sc> utilities) has no
limit on input line length or restrictions on bytes allowed within lines.
In addition, if the final byte of an input file is not a newline, <sc>gnu</sc>
<command>sort</command> silently supplies one.  A line&textrsquo;s trailing newline is not
part of the line for comparison purposes.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">exit status of <command>sort</command></indexterm></cindex>
<para>Exit status:
</para>
<display endspaces=" ">
<pre xml:space="preserve">0 if no error occurred
1 if invoked with <option>-c</option> or <option>-C</option> and the input is not sorted
2 if an error occurred
</pre></display>

<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">TMPDIR</indexterm></vindex>
<para>If the environment variable <env>TMPDIR</env> is set, <command>sort</command> uses its
value as the directory for temporary files instead of <file>/tmp</file>.  The
<option>--temporary-directory</option> (<option>-T</option>) option in turn overrides
the environment variable.
</para>
<para>The following options affect the ordering of output lines.  They may be
specified globally or as part of a specific key field.  If no key
fields are specified, global options apply to comparison of entire
lines; otherwise the global options are inherited by key fields that do
not specify any special options of their own.  In pre-<acronym><acronymword>POSIX</acronymword></acronym>
versions of <command>sort</command>, global options affect only later key fields,
so portable shell scripts should specify global options first.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-b</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--ignore-leading-blanks</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-b</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;ignore-leading-blanks</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">blanks, ignoring leading</indexterm></cindex>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">LC_CTYPE</indexterm></vindex>
<para>Ignore leading blanks when finding sort keys in each line.
By default a blank is a space or a tab, but the <env>LC_CTYPE</env> locale
can change this.  Note blanks may be ignored by your locale&textrsquo;s collating
rules, but without this option they will be significant for character
positions specified in keys with the <option>-k</option> option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-d</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--dictionary-order</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-d</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;dictionary-order</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">dictionary order</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">phone directory order</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">telephone directory order</indexterm></cindex>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">LC_CTYPE</indexterm></vindex>
<para>Sort in <dfn>phone directory</dfn> order: ignore all characters except
letters, digits and blanks when sorting.
By default letters and digits are those of <acronym><acronymword>ASCII</acronymword></acronym> and a blank
is a space or a tab, but the <env>LC_CTYPE</env> locale can change this.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-f</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--ignore-case</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-f</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;ignore-case</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">ignoring case</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">case folding</indexterm></cindex>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">LC_CTYPE</indexterm></vindex>
<para>Fold lowercase characters into the equivalent uppercase characters when
comparing so that, for example, <samp>b</samp> and <samp>B</samp> sort as equal.
The <env>LC_CTYPE</env> locale determines character types.
When used with <option>--unique</option> those lower case equivalent lines are
thrown away. (There is currently no way to throw away the upper case
equivalent instead. (Any <option>--reverse</option> given would only affect
the final result, after the throwing away.))
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-g</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--general-numeric-sort</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--sort=general-numeric</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-g</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;general-numeric-sort</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;sort</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">general numeric sort</indexterm></cindex>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">LC_NUMERIC</indexterm></vindex>
<para>Sort numerically, converting a prefix of each line to a long
double-precision floating point number.  <xref><xrefnodename>Floating point</xrefnodename></xref>.
Do not report overflow, underflow, or conversion errors.
Use the following collating sequence:
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet" /></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para>Lines that do not start with numbers (all considered to be equal).
</para></listitem><listitem><prepend>&bullet;</prepend>
<para>NaNs (&textldquo;Not a Number&textrdquo; values, in IEEE floating point arithmetic)
in a consistent but machine-dependent order.
</para></listitem><listitem><prepend>&bullet;</prepend>
<para>Minus infinity.
</para></listitem><listitem><prepend>&bullet;</prepend>
<para>Finite numbers in ascending numeric order (with <math>-0</math> and <math>+0</math> equal).
</para></listitem><listitem><prepend>&bullet;</prepend>
<para>Plus infinity.
</para></listitem></itemize>

<para>Use this option only if there is no alternative; it is much slower than
<option>--numeric-sort</option> (<option>-n</option>) and it can lose information when
converting to floating point.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-h</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--human-numeric-sort</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--sort=human-numeric</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-h</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;human-numeric-sort</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;sort</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">human numeric sort</indexterm></cindex>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">LC_NUMERIC</indexterm></vindex>
<para>Sort numerically, first by numeric sign (negative, zero, or positive);
then by <acronym><acronymword>SI</acronymword></acronym> suffix (either empty, or <samp>k</samp> or <samp>K</samp>, or
one of <samp>MGTPEZY</samp>, in that order; <pxref><xrefnodename>Block size</xrefnodename></pxref>); and finally
by numeric value.  For example, <samp>1023M</samp> sorts before <samp>1G</samp>
because <samp>M</samp> (mega) precedes <samp>G</samp> (giga) as an <acronym><acronymword>SI</acronymword></acronym>
suffix.  This option sorts values that are consistently scaled to the
nearest suffix, regardless of whether suffixes denote powers of 1000
or 1024, and it therefore sorts the output of any single invocation of
the <command>df</command>, <command>du</command>, or <command>ls</command> commands that are
invoked with their <option>--human-readable</option> or <option>--si</option> options.
The syntax for numbers is the same as for the <option>--numeric-sort</option>
option; the <acronym><acronymword>SI</acronymword></acronym> suffix must immediately follow the number.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-i</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--ignore-nonprinting</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-i</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;ignore-nonprinting</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">nonprinting characters, ignoring</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">unprintable characters, ignoring</indexterm></cindex>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">LC_CTYPE</indexterm></vindex>
<para>Ignore nonprinting characters.
The <env>LC_CTYPE</env> locale determines character types.
This option has no effect if the stronger <option>--dictionary-order</option>
(<option>-d</option>) option is also given.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-M</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--month-sort</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--sort=month</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-M</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;month-sort</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;sort</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">months, sorting by</indexterm></cindex>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">LC_TIME</indexterm></vindex>
<para>An initial string, consisting of any amount of blanks, followed
by a month name abbreviation, is folded to UPPER case and
compared in the order <samp>JAN</samp> &lt; <samp>FEB</samp> &lt; &dots; &lt; <samp>DEC</samp>.
Invalid names compare low to valid names.  The <env>LC_TIME</env> locale
category determines the month spellings.
By default a blank is a space or a tab, but the <env>LC_CTYPE</env> locale
can change this.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-n</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--numeric-sort</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--sort=numeric</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-n</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;numeric-sort</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;sort</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">numeric sort</indexterm></cindex>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">LC_NUMERIC</indexterm></vindex>
<para>Sort numerically.  The number begins each line and consists
of optional blanks, an optional <samp>-</samp> sign, and zero or more
digits possibly separated by thousands separators, optionally followed
by a decimal-point character and zero or more digits.  An empty
number is treated as <samp>0</samp>.  The <env>LC_NUMERIC</env>
locale specifies the decimal-point character and thousands separator.
By default a blank is a space or a tab, but the <env>LC_CTYPE</env> locale
can change this.
</para>
<para>Comparison is exact; there is no rounding error.
</para>
<para>Neither a leading <samp>+</samp> nor exponential notation is recognized.
To compare such strings numerically, use the
<option>--general-numeric-sort</option> (<option>-g</option>) option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-V</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--version-sort</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-V</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;version-sort</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">version number sort</indexterm></cindex>
<para>Sort by version name and number.  It behaves like a standard sort,
except that each sequence of decimal digits is treated numerically
as an index/version number.  (<xref><xrefnodename>Details about version sort</xrefnodename></xref>.)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-r</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--reverse</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-r</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;reverse</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">reverse sorting</indexterm></cindex>
<para>Reverse the result of comparison, so that lines with greater key values
appear earlier in the output instead of later.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-R</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--random-sort</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--sort=random</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-R</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;random-sort</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;sort</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">random sort</indexterm></cindex>
<para>Sort by hashing the input keys and then sorting the hash values.
Choose the hash function at random, ensuring that it is free of
collisions so that differing keys have differing hash values.  This is
like a random permutation of the inputs (<pxref><xrefnodename>shuf invocation</xrefnodename></pxref>),
except that keys with the same value sort together.
</para>
<para>If multiple random sort fields are specified, the same random hash
function is used for all fields.  To use different random hash
functions for different fields, you can invoke <command>sort</command> more
than once.
</para>
<para>The choice of hash function is affected by the
<option>--random-source</option> option.
</para>
</tableitem></tableentry></table>

<para>Other options are:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">--compress-program=<var>prog</var></itemformat></item>
<para>Compress any temporary files with the program <var>prog</var>.
</para>
<para>With no arguments, <var>prog</var> must compress standard input to standard
output, and when given the <option>-d</option> option it must decompress
standard input to standard output.
</para>
<para>Terminate with an error if <var>prog</var> exits with nonzero status.
</para>
<para>White space and the backslash character should not appear in
<var>prog</var>; they are reserved for future use.
</para>
<itemx spaces=" "><itemformat command="samp">--files0-from=<var>file</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;files0-from=<var>file</var></indexterm></indexcommand>
<!-- c This is commented out to avoid a texi2dvi failure. -->
<!-- c texi2dvi (GNU Texinfo 4.11) 1.104 -->
<!-- c @cindex including files from @command{sort} -->
<para>Disallow processing files named on the command line, and instead process
those named in file <var>file</var>; each name being terminated by a zero byte
(<acronym><acronymword>ASCII</acronymword></acronym> <sc>nul</sc>).
This is useful 
when the list of file names is so long that it may exceed a command line
length limitation.
In such cases, running <command>sort</command> via <command>xargs</command> is undesirable
because it splits the list into pieces and makes <command>sort</command> print
sorted output for each sublist rather than for the entire list.
One way to produce a list of <acronym><acronymword>ASCII</acronymword></acronym> <sc>nul</sc> terminated file
names is with <sc>gnu</sc>
<command>find</command>, using its <option>-print0</option> predicate.
If <var>file</var> is <samp>-</samp> then the <acronym><acronymword>ASCII</acronymword></acronym> <sc>nul</sc> terminated
file names are read from standard input.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-k <var>pos1</var>[,<var>pos2</var>]</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--key=<var>pos1</var>[,<var>pos2</var>]</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-k</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;key</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">sort field</indexterm></cindex>
<para>Specify a sort field that consists of the part of the line between
<var>pos1</var> and <var>pos2</var> (or the end of the line, if <var>pos2</var> is
omitted), <emph>inclusive</emph>.
</para>
<para>Each <var>pos</var> has the form <samp><var>f</var>[.<var>c</var>][<var>opts</var>]</samp>,
where <var>f</var> is the number of the field to use, and <var>c</var> is the number
of the first character from the beginning of the field.  Fields and character
positions are numbered starting with 1; a character position of zero in
<var>pos2</var> indicates the field&textrsquo;s last character.  If <samp>.<var>c</var></samp> is
omitted from <var>pos1</var>, it defaults to 1 (the beginning of the field);
if omitted from <var>pos2</var>, it defaults to 0 (the end of the field).
<var>opts</var> are ordering options, allowing individual keys to be sorted
according to different rules; see below for details.  Keys can span
multiple fields.
</para>
<para>Example:  To sort on the second field, use <option>--key=2,2</option>
(<option>-k 2,2</option>).  See below for more notes on keys and more examples.
See also the <option>--debug</option> option to help determine the part
of the line being used in the sort.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--debug</itemformat></item>
</tableterm><tableitem><para>Highlight the portion of each line used for sorting.
Also issue warnings about questionable usage to stderr.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--batch-size=<var>nmerge</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;batch-size</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">number of inputs to merge, nmerge</indexterm></cindex>
<para>Merge at most <var>nmerge</var> inputs at once.
</para>
<para>When <command>sort</command> has to merge more than <var>nmerge</var> inputs,
it merges them in groups of <var>nmerge</var>, saving the result in
a temporary file, which is then used as an input in a subsequent merge.
</para>
<para>A large value of <var>nmerge</var> may improve merge performance and decrease
temporary storage utilization at the expense of increased memory usage
and I/O.  Conversely a small value of <var>nmerge</var> may reduce memory
requirements and I/O at the expense of temporary storage consumption and
merge performance.
</para>
<para>The value of <var>nmerge</var> must be at least 2.  The default value is
currently 16, but this is implementation-dependent and may change in
the future.
</para>
<para>The value of <var>nmerge</var> may be bounded by a resource limit for open
file descriptors.  The commands <samp>ulimit -n</samp> or <samp>getconf
OPEN_MAX</samp> may display limits for your systems; these limits may be
modified further if your program already has some files open, or if
the operating system has other limits on the number of open files.  If
the value of <var>nmerge</var> exceeds the resource limit, <command>sort</command>
silently uses a smaller value.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-o <var>output-file</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--output=<var>output-file</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-o</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;output</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">overwriting of input, allowed</indexterm></cindex>
<para>Write output to <var>output-file</var> instead of standard output.
Normally, <command>sort</command> reads all input before opening
<var>output-file</var>, so you can safely sort a file in place by using
commands like <code>sort -o F F</code> and <code>cat F | sort -o F</code>.
However, <command>sort</command> with <option>--merge</option> (<option>-m</option>) can open
the output file before reading all input, so a command like <code>cat
F | sort -m -o F - G</code> is not safe as <command>sort</command> might start
writing <file>F</file> before <command>cat</command> is done reading it.
</para>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">POSIXLY_CORRECT</indexterm></vindex>
<para>On newer systems, <option>-o</option> cannot appear after an input file if
<env>POSIXLY_CORRECT</env> is set, e.g., <samp>sort F -o F</samp>.  Portable
scripts should specify <option>-o <var>output-file</var></option> before any input
files.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--random-source=<var>file</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;random-source</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">random source for sorting</indexterm></cindex>
<para>Use <var>file</var> as a source of random data used to determine which
random hash function to use with the <option>-R</option> option.  <xref><xrefnodename>Random
sources</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-s</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--stable</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-s</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;stable</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">sort stability</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">sort&textrsquo;s last-resort comparison</indexterm></cindex>

<para>Make <command>sort</command> stable by disabling its last-resort comparison.
This option has no effect if no fields or global ordering options
other than <option>--reverse</option> (<option>-r</option>) are specified.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-S <var>size</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--buffer-size=<var>size</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-S</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;buffer-size</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">size for main memory sorting</indexterm></cindex>
<para>Use a main-memory sort buffer of the given <var>size</var>.  By default,
<var>size</var> is in units of 1024 bytes.  Appending <samp>%</samp> causes
<var>size</var> to be interpreted as a percentage of physical memory.
Appending <samp>K</samp> multiplies <var>size</var> by 1024 (the default),
<samp>M</samp> by 1,048,576, <samp>G</samp> by 1,073,741,824, and so on for
<samp>T</samp>, <samp>P</samp>, <samp>E</samp>, <samp>Z</samp>, and <samp>Y</samp>.  Appending
<samp>b</samp> causes <var>size</var> to be interpreted as a byte count, with no
multiplication.
</para>
<para>This option can improve the performance of <command>sort</command> by causing it
to start with a larger or smaller sort buffer than the default.
However, this option affects only the initial buffer size.  The buffer
grows beyond <var>size</var> if <command>sort</command> encounters input lines larger
than <var>size</var>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-t <var>separator</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--field-separator=<var>separator</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-t</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;field-separator</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">field separator character</indexterm></cindex>
<para>Use character <var>separator</var> as the field separator when finding the
sort keys in each line.  By default, fields are separated by the empty
string between a non-blank character and a blank character.
By default a blank is a space or a tab, but the <env>LC_CTYPE</env> locale
can change this.
</para>
<para>That is, given the input line <w><samp> foo bar</samp></w>, <command>sort</command> breaks it
into fields <w><samp> foo</samp></w> and <w><samp> bar</samp></w>.  The field separator is
not considered to be part of either the field preceding or the field
following, so with <samp>sort <w>-t &quot; &quot;</w></samp> the same input line has
three fields: an empty field, <samp>foo</samp>, and <samp>bar</samp>.
However, fields that extend to the end of the line,
as <option>-k 2</option>, or fields consisting of a range, as <option>-k 2,3</option>,
retain the field separators present between the endpoints of the range.
</para>
<para>To specify <acronym><acronymword>ASCII</acronymword></acronym> <sc>nul</sc> as the field separator,
use the two-character string <samp>\0</samp>, e.g., <samp>sort -t '\0'</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-T <var>tempdir</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--temporary-directory=<var>tempdir</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-T</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;temporary-directory</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">temporary directory</indexterm></cindex>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">TMPDIR</indexterm></vindex>
<para>Use directory <var>tempdir</var> to store temporary files, overriding the
<env>TMPDIR</env> environment variable.  If this option is given more than
once, temporary files are stored in all the directories given.  If you
have a large sort or merge that is I/O-bound, you can often improve
performance by using this option to specify directories on different
disks and controllers.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--parallel=<var>n</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;parallel</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">multithreaded sort</indexterm></cindex>
<para>Set the number of sorts run in parallel to <var>n</var>. By default,
<var>n</var> is set to the number of available processors, but limited
to 8, as there are diminishing performance gains after that.
Note also that using <var>n</var> threads increases the memory usage by
a factor of log <var>n</var>.  Also see <ref><xrefnodename>nproc invocation</xrefnodename></ref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-u</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--unique</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-u</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;unique</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">uniquifying output</indexterm></cindex>

<para>Normally, output only the first of a sequence of lines that compare
equal.  For the <option>--check</option> (<option>-c</option> or <option>-C</option>) option,
check that no pair of consecutive lines compares equal.
</para>
<para>This option also disables the default last-resort comparison.
</para>
<para>The commands <code>sort -u</code> and <code>sort | uniq</code> are equivalent, but
this equivalence does not extend to arbitrary <command>sort</command> options.
For example, <code>sort -n -u</code> inspects only the value of the initial
numeric string when checking for uniqueness, whereas <code>sort -n |
uniq</code> inspects the entire line.  <xref><xrefnodename>uniq invocation</xrefnodename></xref>.
</para>
<macro name="zeroTerminatedOption" line=" zeroTerminatedOption">@item -z
@itemx --zero-terminated
@opindex -z
@opindex --zero-terminated
@cindex process zero-terminated items
Delimit items with a zero byte rather than a newline (@acronym{ASCII} @sc{lf}).
I.E. treat input as items separated by @acronym{ASCII} @sc{nul}
and terminate output items with @acronym{ASCII} @sc{nul}.
This option can be useful in conjunction with @samp{perl -0} or
@samp{find -print0} and @samp{xargs -0} which do the same in order to
reliably handle arbitrary file names (even those containing blanks
or other special characters).
</macro>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-z</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--zero-terminated</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-z</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;zero-terminated</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">process zero-terminated items</indexterm></cindex>
<para>Delimit items with a zero byte rather than a newline (<acronym><acronymword>ASCII</acronymword></acronym> <sc>lf</sc>).
I.E. treat input as items separated by <acronym><acronymword>ASCII</acronymword></acronym> <sc>nul</sc>
and terminate output items with <acronym><acronymword>ASCII</acronymword></acronym> <sc>nul</sc>.
This option can be useful in conjunction with <samp>perl -0</samp> or
<samp>find -print0</samp> and <samp>xargs -0</samp> which do the same in order to
reliably handle arbitrary file names (even those containing blanks
or other special characters).
</para>
</tableitem></tableentry></table>

<para>Historical (BSD and System V) implementations of <command>sort</command> have
differed in their interpretation of some options, particularly
<option>-b</option>, <option>-f</option>, and <option>-n</option>.
<sc>gnu</sc> sort follows the <acronym><acronymword>POSIX</acronymword></acronym>
behavior, which is usually (but not always!) like the System V behavior.
According to <acronym><acronymword>POSIX</acronymword></acronym>, <option>-n</option> no longer implies <option>-b</option>.  For
consistency, <option>-M</option> has been changed in the same way.  This may
affect the meaning of character positions in field specifications in
obscure cases.  The only fix is to add an explicit <option>-b</option>.
</para>
<para>A position in a sort field specified with <option>-k</option> may have any
of the option letters <samp>MbdfghinRrV</samp> appended to it, in which case no
global ordering options are inherited by that particular field.  The
<option>-b</option> option may be independently attached to either or both of
the start and end positions of a field specification, and if it is
inherited from the global options it will be attached to both.
If input lines can contain leading or adjacent blanks and <option>-t</option>
is not used, then <option>-k</option> is typically combined with <option>-b</option> or
an option that implicitly ignores leading blanks (<samp>Mghn</samp>) as otherwise
the varying numbers of leading blanks in fields can cause confusing results.
</para>
<para>If the start position in a sort field specifier falls after the end of
the line or after the end field, the field is empty.  If the <option>-b</option>
option was specified, the <samp>.<var>c</var></samp> part of a field specification
is counted from the first nonblank character of the field.
</para>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">_POSIX2_VERSION</indexterm></vindex>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">POSIXLY_CORRECT</indexterm></vindex>
<para>On older systems, <command>sort</command> supports an obsolete origin-zero
syntax <samp>+<var>pos1</var> [-<var>pos2</var>]</samp> for specifying sort keys.
The obsolete sequence <samp>sort +<var>a</var>.<var>x</var> -<var>b</var>.<var>y</var></samp>
is equivalent to <samp>sort -k <var>a+1</var>.<var>x+1</var>,<var>b</var></samp> if <var>y</var>
is <samp>0</samp> or absent, otherwise it is equivalent to <samp>sort -k
<var>a+1</var>.<var>x+1</var>,<var>b+1</var>.<var>y</var></samp>.
</para>
<para>This obsolete behavior can be enabled or disabled with the
<env>_POSIX2_VERSION</env> environment variable (<pxref><xrefnodename>Standards
conformance</xrefnodename></pxref>); it can also be enabled when <env>POSIXLY_CORRECT</env> is
not set by using the obsolete syntax with <samp>-<var>pos2</var></samp> present.
</para>
<para>Scripts intended for use on standard hosts should avoid obsolete
syntax and should use <option>-k</option> instead.  For example, avoid
<samp>sort +2</samp>, since it might be interpreted as either <samp>sort
./+2</samp> or <samp>sort -k 3</samp>.  If your script must also run on hosts that
support only the obsolete syntax, it can use a test like <samp>if sort
-k 1 &lt;/dev/null &gt;/dev/null 2&gt;&amp;1; then &dots;</samp> to decide which syntax
to use.
</para>
<para>Here are some examples to illustrate various combinations of options.
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet" /></itemprepend>
<beforefirstitem>
</beforefirstitem><listitem><prepend>&bullet;</prepend>
<para>Sort in descending (reverse) numeric order.
</para>
<example endspaces=" ">
<pre xml:space="preserve">sort -n -r
</pre></example>

</listitem><listitem><prepend>&bullet;</prepend>
<para>Run no more than 4 sorts concurrently, using a buffer size of 10M.
</para>
<example endspaces=" ">
<pre xml:space="preserve">sort --parallel=4 -S 10M
</pre></example>

</listitem><listitem><prepend>&bullet;</prepend>
<para>Sort alphabetically, omitting the first and second fields
and the blanks at the start of the third field.
This uses a single key composed of the characters beginning
at the start of the first nonblank character in field three
and extending to the end of each line.
</para>
<example endspaces=" ">
<pre xml:space="preserve">sort -k 3b
</pre></example>

</listitem><listitem><prepend>&bullet;</prepend>
<para>Sort numerically on the second field and resolve ties by sorting
alphabetically on the third and fourth characters of field five.
Use <samp>:</samp> as the field delimiter.
</para>
<example endspaces=" ">
<pre xml:space="preserve">sort -t : -k 2,2n -k 5.3,5.4
</pre></example>

<para>Note that if you had written <option>-k 2n</option> instead of <option>-k 2,2n</option>
<command>sort</command> would have used all characters beginning in the second field
and extending to the end of the line as the primary <emph>numeric</emph>
key.  For the large majority of applications, treating keys spanning
more than one field as numeric will not do what you expect.
</para>
<para>Also note that the <samp>n</samp> modifier was applied to the field-end
specifier for the first key.  It would have been equivalent to
specify <option>-k 2n,2</option> or <option>-k 2n,2n</option>.  All modifiers except
<samp>b</samp> apply to the associated <emph>field</emph>, regardless of whether
the modifier character is attached to the field-start and/or the
field-end part of the key specifier.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Sort the password file on the fifth field and ignore any
leading blanks.  Sort lines with equal values in field five
on the numeric user ID in field three.  Fields are separated
by <samp>:</samp>.
</para>
<example endspaces=" ">
<pre xml:space="preserve">sort -t : -k 5b,5 -k 3,3n /etc/passwd
sort -t : -n -k 5b,5 -k 3,3 /etc/passwd
sort -t : -b -k 5,5 -k 3,3n /etc/passwd
</pre></example>

<para>These three commands have equivalent effect.  The first specifies that
the first key&textrsquo;s start position ignores leading blanks and the second
key is sorted numerically.  The other two commands rely on global
options being inherited by sort keys that lack modifiers.  The inheritance
works in this case because <option>-k 5b,5b</option> and <option>-k 5b,5</option> are
equivalent, as the location of a field-end lacking a <samp>.<var>c</var></samp>
character position is not affected by whether initial blanks are
skipped.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Sort a set of log files, primarily by IPv4 address and secondarily by
time stamp.  If two lines&textrsquo; primary and secondary keys are identical,
output the lines in the same order that they were input.  The log
files contain lines that look like this:
</para>
<example endspaces=" ">
<pre xml:space="preserve">4.150.156.3 - - [01/Apr/2004:06:31:51 +0000] message 1
211.24.3.231 - - [24/Apr/2004:20:17:39 +0000] message 2
</pre></example>

<para>Fields are separated by exactly one space.  Sort IPv4 addresses
lexicographically, e.g., 212.61.52.2 sorts before 212.129.233.201
because 61 is less than 129.
</para>
<example endspaces=" ">
<pre xml:space="preserve">sort -s -t ' ' -k 4.9n -k 4.5M -k 4.2n -k 4.14,4.21 file*.log |
sort -s -t '.' -k 1,1n -k 2,2n -k 3,3n -k 4,4n
</pre></example>

<para>This example cannot be done with a single <command>sort</command> invocation,
since IPv4 address components are separated by <samp>.</samp> while dates
come just after a space.  So it is broken down into two invocations of
<command>sort</command>: the first sorts by time stamp and the second by IPv4
address.  The time stamp is sorted by year, then month, then day, and
finally by hour-minute-second field, using <option>-k</option> to isolate each
field.  Except for hour-minute-second there&textrsquo;s no need to specify the
end of each key field, since the <samp>n</samp> and <samp>M</samp> modifiers sort
based on leading prefixes that cannot cross field boundaries.  The
IPv4 addresses are sorted lexicographically.  The second sort uses
<samp>-s</samp> so that ties in the primary key are broken by the secondary
key; the first sort uses <samp>-s</samp> so that the combination of the two
sorts is stable.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Generate a tags file in case-insensitive sorted order.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">find src -type f -print0 | sort -z -f | xargs -0 etags --append
</pre></smallexample>

<para>The use of <option>-print0</option>, <option>-z</option>, and <option>-0</option> in this case means
that file names that contain blanks or other special characters are
not broken up
by the sort operation.
</para>
<!-- c This example is a bit contrived and needs more explanation. -->
<!-- c @item -->
<!-- c Sort records separated by an arbitrary string by using a pipe to convert -->
<!-- c each record delimiter string to @samp{\0}, then using sort's -z option, -->
<!-- c and converting each @samp{\0} back to the original record delimiter. -->
<!-- c -->
<!-- c @example -->
<!-- c printf 'c\n\nb\n\na\n' | -->
<!-- c perl -0pe 's/\n\n/\n\0/g' | -->
<!-- c sort -z | -->
<!-- c perl -0pe 's/\0/\n/g' -->
<!-- c @end example -->

</listitem><listitem><prepend>&bullet;</prepend>
<para>Use the common <acronym><acronymword>DSU</acronymword><acronymdesc spaces=" ">Decorate Sort Undecorate</acronymdesc></acronym> idiom to
sort lines according to their length.
</para>
<example endspaces=" ">
<pre xml:space="preserve">awk '&lbrace;print length, $0&rbrace;' /etc/passwd | sort -n | cut -f2- -d' '
</pre></example>

<para>In general this technique can be used to sort data that the <command>sort</command>
command does not support, or is inefficient at, sorting directly.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Shuffle a list of directories, but preserve the order of files within
each directory.  For instance, one could use this to generate a music
playlist in which albums are shuffled but the songs of each album are
played in order.
</para>
<example endspaces=" ">
<pre xml:space="preserve">ls */* | sort -t / -k 1,1R -k 2,2
</pre></example>

</listitem></itemize>


</section>
<node name="shuf-invocation" spaces=" "><nodename>shuf invocation</nodename><nodenext automatic="on">uniq invocation</nodenext><nodeprev automatic="on">sort invocation</nodeprev><nodeup automatic="on">Operating on sorted files</nodeup></node>
<section spaces=" "><sectiontitle><command>shuf</command>: Shuffling text</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">shuf</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">shuffling files</indexterm></cindex>

<para><command>shuf</command> shuffles its input by outputting a random permutation
of its input lines.  Each output permutation is equally likely.
Synopses:
</para>
<example endspaces=" ">
<pre xml:space="preserve">shuf [<var>option</var>]&dots; [<var>file</var>]
shuf -e [<var>option</var>]&dots; [<var>arg</var>]&dots;
shuf -i <var>lo</var>-<var>hi</var> [<var>option</var>]&dots;
</pre></example>

<para><command>shuf</command> has three modes of operation that affect where it
obtains its input lines.  By default, it reads lines from standard
input.  The following options change the operation mode:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-e</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--echo</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-c</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;echo</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">command-line operands to shuffle</indexterm></cindex>
<para>Treat each command-line operand as an input line.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-i <var>lo</var>-<var>hi</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--input-range=<var>lo</var>-<var>hi</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-i</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;input-range</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">input range to shuffle</indexterm></cindex>
<para>Act as if input came from a file containing the range of unsigned
decimal integers <var>lo</var>&dots;<var>hi</var>, one per line.
</para>
</tableitem></tableentry></table>

<para><command>shuf</command>&textrsquo;s other options can affect its behavior in all
operation modes:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-n <var>lines</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--head-count=<var>count</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-n</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;head-count</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">head of output</indexterm></cindex>
<para>Output at most <var>count</var> lines.  By default, all input lines are
output.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-o <var>output-file</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--output=<var>output-file</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-o</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;output</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">overwriting of input, allowed</indexterm></cindex>
<para>Write output to <var>output-file</var> instead of standard output.
<command>shuf</command> reads all input before opening
<var>output-file</var>, so you can safely shuffle a file in place by using
commands like <code>shuf -o F &lt;F</code> and <code>cat F | shuf -o F</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--random-source=<var>file</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;random-source</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">random source for shuffling</indexterm></cindex>
<para>Use <var>file</var> as a source of random data used to determine which
permutation to generate.  <xref><xrefnodename>Random sources</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-z</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--zero-terminated</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-z</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;zero-terminated</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">process zero-terminated items</indexterm></cindex>
<para>Delimit items with a zero byte rather than a newline (<acronym><acronymword>ASCII</acronymword></acronym> <sc>lf</sc>).
I.E. treat input as items separated by <acronym><acronymword>ASCII</acronymword></acronym> <sc>nul</sc>
and terminate output items with <acronym><acronymword>ASCII</acronymword></acronym> <sc>nul</sc>.
This option can be useful in conjunction with <samp>perl -0</samp> or
<samp>find -print0</samp> and <samp>xargs -0</samp> which do the same in order to
reliably handle arbitrary file names (even those containing blanks
or other special characters).
</para>
</tableitem></tableentry></table>

<para>For example:
</para>
<example endspaces=" ">
<pre xml:space="preserve">shuf &lt;&lt;EOF
A man,
a plan,
a canal:
Panama!
EOF
</pre></example>

<noindent></noindent>
<para>might produce the output
</para>
<example endspaces=" ">
<pre xml:space="preserve">Panama!
A man,
a canal:
a plan,
</pre></example>

<noindent></noindent>
<para>Similarly, the command:
</para>
<example endspaces=" ">
<pre xml:space="preserve">shuf -e clubs hearts diamonds spades
</pre></example>

<noindent></noindent>
<para>might output:
</para>
<example endspaces=" ">
<pre xml:space="preserve">clubs
diamonds
spades
hearts
</pre></example>

<noindent></noindent>
<para>and the command <samp>shuf -i 1-4</samp> might output:
</para>
<example endspaces=" ">
<pre xml:space="preserve">4
2
1
3
</pre></example>

<noindent></noindent>
<para>These examples all have four input lines, so <command>shuf</command> might
produce any of the twenty-four possible permutations of the input.  In
general, if there are <var>n</var> input lines, there are <var>n</var>! (i.e.,
<var>n</var> factorial, or <var>n</var> * (<var>n</var> - 1) * &dots; * 1) possible
output permutations.
</para>
<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="uniq-invocation" spaces=" "><nodename>uniq invocation</nodename><nodenext automatic="on">comm invocation</nodenext><nodeprev automatic="on">shuf invocation</nodeprev><nodeup automatic="on">Operating on sorted files</nodeup></node>
<section spaces=" "><sectiontitle><command>uniq</command>: Uniquify files</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">uniq</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">uniquify files</indexterm></cindex>

<para><command>uniq</command> writes the unique lines in the given <file>input</file>, or
standard input if nothing is given or for an <var>input</var> name of
<samp>-</samp>.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">uniq [<var>option</var>]&dots; [<var>input</var> [<var>output</var>]]
</pre></example>

<para>By default, <command>uniq</command> prints its input lines, except that
it discards all but the first of adjacent repeated lines, so that
no output lines are repeated.  Optionally, it can instead discard
lines that are not repeated, or all repeated lines.
</para>
<para>The input need not be sorted, but repeated input lines are detected
only if they are adjacent.  If you want to discard non-adjacent
duplicate lines, perhaps you want to use <code>sort -u</code>.
<xref><xrefnodename>sort invocation</xrefnodename></xref>.
</para>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">LC_COLLATE</indexterm></vindex>
<para>Comparisons honor the rules specified by the <env>LC_COLLATE</env>
locale category.
</para>
<para>If no <var>output</var> file is specified, <command>uniq</command> writes to standard
output.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-f <var>n</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--skip-fields=<var>n</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-f</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;skip-fields</indexterm></indexcommand>
<para>Skip <var>n</var> fields on each line before checking for uniqueness.  Use
a null string for comparison if a line has fewer than <var>n</var> fields.  Fields
are sequences of non-space non-tab characters that are separated from
each other by at least one space or tab.
</para>
<para>For compatibility <command>uniq</command> supports an obsolete option syntax
<option>-<var>n</var></option>.  New scripts should use <option>-f <var>n</var></option> instead.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-s <var>n</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--skip-chars=<var>n</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-s</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;skip-chars</indexterm></indexcommand>
<para>Skip <var>n</var> characters before checking for uniqueness.  Use a null string
for comparison if a line has fewer than <var>n</var> characters.  If you use both
the field and character skipping options, fields are skipped over first.
</para>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">_POSIX2_VERSION</indexterm></vindex>
<para>On older systems, <command>uniq</command> supports an obsolete option syntax
<option>+<var>n</var></option>.
This obsolete behavior can be enabled or disabled with the
<env>_POSIX2_VERSION</env> environment variable (<pxref><xrefnodename>Standards
conformance</xrefnodename></pxref>), but portable scripts should avoid commands whose
behavior depends on this variable.
For example, use <samp>uniq ./+10</samp> or <samp>uniq -s 10</samp> rather than
the ambiguous <samp>uniq +10</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-c</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--count</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-c</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;count</indexterm></indexcommand>
<para>Print the number of times each line occurred along with the line.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-i</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--ignore-case</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-i</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;ignore-case</indexterm></indexcommand>
<para>Ignore differences in case when comparing lines.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-d</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--repeated</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-d</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;repeated</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">repeated lines, outputting</indexterm></cindex>
<para>Discard lines that are not repeated.  When used by itself, this option
causes <command>uniq</command> to print the first copy of each repeated line,
and nothing else.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-D</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--all-repeated[=<var>delimit-method</var>]</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-D</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;all-repeated</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">all repeated lines, outputting</indexterm></cindex>
<para>Do not discard the second and subsequent repeated input lines,
but discard lines that are not repeated.
This option is useful mainly in conjunction with other options e.g.,
to ignore case or to compare only selected fields.
The optional <var>delimit-method</var> tells how to delimit
groups of repeated lines, and must be one of the following:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">none</itemformat></item>
</tableterm><tableitem><para>Do not delimit groups of repeated lines.
This is equivalent to <option>--all-repeated</option> (<option>-D</option>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">prepend</itemformat></item>
</tableterm><tableitem><para>Output a newline before each group of repeated lines.
With <option>--zero-terminated</option> (<option>-z</option>), use a zero
byte (<acronym><acronymword>ASCII</acronymword></acronym> <sc>nul</sc>) instead of a newline.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">separate</itemformat></item>
</tableterm><tableitem><para>Separate groups of repeated lines with a single newline.
With <option>--zero-terminated</option> (<option>-z</option>), use a zero
byte (<acronym><acronymword>ASCII</acronymword></acronym> <sc>nul</sc>) instead of a newline.
This is the same as using <samp>prepend</samp>, except that
no delimiter is inserted before the first group, and hence
may be better suited for output direct to users.
</para></tableitem></tableentry></table>

<para>Note that when groups are delimited and the input stream contains
two or more consecutive blank lines, then the output is ambiguous.
To avoid that, filter the input through <samp>tr -s '\n'</samp> to replace
each sequence of consecutive newlines with a single newline.
</para>
<para>This is a <sc>gnu</sc> extension.
<!-- c FIXME: give an example showing *how* it's useful -->
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-u</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--unique</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-u</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;unique</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">unique lines, outputting</indexterm></cindex>
<para>Discard the first repeated line.  When used by itself, this option
causes <command>uniq</command> to print unique lines, and nothing else.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-w <var>n</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--check-chars=<var>n</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-w</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;check-chars</indexterm></indexcommand>
<para>Compare at most <var>n</var> characters on each line (after skipping any specified
fields and characters).  By default the entire rest of the lines are
compared.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-z</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--zero-terminated</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-z</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;zero-terminated</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">process zero-terminated items</indexterm></cindex>
<para>Delimit items with a zero byte rather than a newline (<acronym><acronymword>ASCII</acronymword></acronym> <sc>lf</sc>).
I.E. treat input as items separated by <acronym><acronymword>ASCII</acronymword></acronym> <sc>nul</sc>
and terminate output items with <acronym><acronymword>ASCII</acronymword></acronym> <sc>nul</sc>.
This option can be useful in conjunction with <samp>perl -0</samp> or
<samp>find -print0</samp> and <samp>xargs -0</samp> which do the same in order to
reliably handle arbitrary file names (even those containing blanks
or other special characters).
</para>
</tableitem></tableentry></table>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="comm-invocation" spaces=" "><nodename>comm invocation</nodename><nodenext automatic="on">ptx invocation</nodenext><nodeprev automatic="on">uniq invocation</nodeprev><nodeup automatic="on">Operating on sorted files</nodeup></node>
<section spaces=" "><sectiontitle><command>comm</command>: Compare two sorted files line by line</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">comm</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">line-by-line comparison</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">comparing sorted files</indexterm></cindex>

<para><command>comm</command> writes to standard output lines that are common, and lines
that are unique, to two input files; a file name of <samp>-</samp> means
standard input.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">comm [<var>option</var>]&dots; <var>file1</var> <var>file2</var>
</pre></example>

<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">LC_COLLATE</indexterm></vindex>
<para>Before <command>comm</command> can be used, the input files must be sorted using the
collating sequence specified by the <env>LC_COLLATE</env> locale.
If an input file ends in a non-newline
character, a newline is silently appended.  The <command>sort</command> command with
no options always outputs a file that is suitable input to <command>comm</command>.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">differing lines</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">common lines</indexterm></cindex>
<para>With no options, <command>comm</command> produces three-column output.  Column one
contains lines unique to <var>file1</var>, column two contains lines unique
to <var>file2</var>, and column three contains lines common to both files.
Columns are separated by a single TAB character.
<!-- c FIXME: when there's an option to supply an alternative separator -->
<!-- c string, append `by default' to the above sentence. -->
</para>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-1</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-2</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-3</indexterm></indexcommand>
<para>The options <option>-1</option>, <option>-2</option>, and <option>-3</option> suppress printing of
the corresponding columns (and separators).  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<para>Unlike some other comparison utilities, <command>comm</command> has an exit
status that does not depend on the result of the comparison.
Upon normal completion <command>comm</command> produces an exit code of zero.
If there is an error it exits with nonzero status.
</para>
<macro name="checkOrderOption" line=" checkOrderOption{cmd}"><formalarg>cmd</formalarg>If the @option{--check-order} option is given, unsorted inputs will
cause a fatal error message.  If the option @option{--nocheck-order}
is given, unsorted inputs will never cause an error message.  If neither
of these options is given, wrongly sorted inputs are diagnosed
only if an input file is found to contain unpairable
@ifset JOIN_COMMAND
lines, and when both input files are non empty.
@end ifset
@ifclear JOIN_COMMAND
lines.
@end ifclear
If an input file is diagnosed as being unsorted, the @command{\cmd\}
command will exit with a nonzero status (and the output should not be used).

Forcing @command{\cmd\} to process wrongly sorted input files
containing unpairable lines by specifying @option{--nocheck-order} is
not guaranteed to produce any particular output.  The output will
probably not correspond with whatever you hoped it would be.
</macro>
<para>If the <option>--check-order</option> option is given, unsorted inputs will
cause a fatal error message.  If the option <option>--nocheck-order</option>
is given, unsorted inputs will never cause an error message.  If neither
of these options is given, wrongly sorted inputs are diagnosed
only if an input file is found to contain unpairable
lines.
If an input file is diagnosed as being unsorted, the <command>comm</command>
command will exit with a nonzero status (and the output should not be used).
</para>
<para>Forcing <command>comm</command> to process wrongly sorted input files
containing unpairable lines by specifying <option>--nocheck-order</option> is
not guaranteed to produce any particular output.  The output will
probably not correspond with whatever you hoped it would be.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">--check-order</itemformat></item>
</tableterm><tableitem><para>Fail with an error message if either input file is wrongly ordered.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--nocheck-order</itemformat></item>
</tableterm><tableitem><para>Do not check that both input files are in sorted order.
</para>
<para>Other options are:
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--output-delimiter=<var>str</var></itemformat></item>
</tableterm><tableitem><para>Print <var>str</var> between adjacent output columns,
rather than the default of a single TAB character.
</para>
<para>The delimiter <var>str</var> may not be empty.
</para>
</tableitem></tableentry></table>

</section>
<node name="ptx-invocation" spaces=" "><nodename>ptx invocation</nodename><nodenext automatic="on">tsort invocation</nodenext><nodeprev automatic="on">comm invocation</nodeprev><nodeup automatic="on">Operating on sorted files</nodeup></node>
<section spaces=" "><sectiontitle><command>ptx</command>: Produce permuted indexes</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">ptx</indexterm></pindex>

<para><command>ptx</command> reads a text file and essentially produces a permuted index, with
each keyword in its context.  The calling sketch is either one of:
</para>
<example endspaces=" ">
<pre xml:space="preserve">ptx [<var>option</var> &dots;] [<var>file</var> &dots;]
ptx -G [<var>option</var> &dots;] [<var>input</var> [<var>output</var>]]
</pre></example>

<para>The <option>-G</option> (or its equivalent: <option>--traditional</option>) option disables
all <sc>gnu</sc> extensions and reverts to traditional mode, thus introducing some
limitations and changing several of the program&textrsquo;s default option values.
When <option>-G</option> is not specified, <sc>gnu</sc> extensions are always enabled.
<sc>gnu</sc> extensions to <command>ptx</command> are documented wherever appropriate in this
document.  For the full list, see <xref><xrefnodename>Compatibility in ptx</xrefnodename></xref>.
</para>
<para>Individual options are explained in the following sections.
</para>
<para>When <sc>gnu</sc> extensions are enabled, there may be zero, one or several
<var>file</var>s after the options.  If there is no <var>file</var>, the program
reads the standard input.  If there is one or several <var>file</var>s, they
give the name of input files which are all read in turn, as if all the
input files were concatenated.  However, there is a full contextual
break between each file and, when automatic referencing is requested,
file names and line numbers refer to individual text input files.  In
all cases, the program outputs the permuted index to the standard
output.
</para>
<para>When <sc>gnu</sc> extensions are <emph>not</emph> enabled, that is, when the program
operates in traditional mode, there may be zero, one or two parameters
besides the options.  If there are no parameters, the program reads the
standard input and outputs the permuted index to the standard output.
If there is only one parameter, it names the text <var>input</var> to be read
instead of the standard input.  If two parameters are given, they give
respectively the name of the <var>input</var> file to read and the name of
the <var>output</var> file to produce.  <emph>Be very careful</emph> to note that,
in this case, the contents of file given by the second parameter is
destroyed.  This behavior is dictated by System V <command>ptx</command>
compatibility; <sc>gnu</sc> Standards normally discourage output parameters not
introduced by an option.
</para>
<para>Note that for <emph>any</emph> file named as the value of an option or as an
input text file, a single dash <kbd>-</kbd> may be used, in which case
standard input is assumed.  However, it would not make sense to use this
convention more than once per program invocation.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::      ">General options in ptx</menunode><menudescription><pre xml:space="preserve">Options which affect general program behavior.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::    ">Charset selection in ptx</menunode><menudescription><pre xml:space="preserve">Underlying character set considerations.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::     ">Input processing in ptx</menunode><menudescription><pre xml:space="preserve">Input fields, contexts, and keyword selection.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::    ">Output formatting in ptx</menunode><menudescription><pre xml:space="preserve">Types of output format, and sizing the fields.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Compatibility in ptx</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry></menu>


<node name="General-options-in-ptx" spaces=" "><nodename>General options in ptx</nodename><nodenext automatic="on">Charset selection in ptx</nodenext><nodeup automatic="on">ptx invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>General options</sectiontitle>

<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-G</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--traditional</itemformat></itemx>
</tableterm><tableitem><para>As already explained, this option disables all <sc>gnu</sc> extensions to
<command>ptx</command> and switches to traditional mode.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--help</itemformat></item>
</tableterm><tableitem><para>Print a short help on standard output, then exit without further
processing.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--version</itemformat></item>
</tableterm><tableitem><para>Print the program version on standard output, then exit without further
processing.
</para>
</tableitem></tableentry></table>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</subsection>
<node name="Charset-selection-in-ptx" spaces=" "><nodename>Charset selection in ptx</nodename><nodenext automatic="on">Input processing in ptx</nodenext><nodeprev automatic="on">General options in ptx</nodeprev><nodeup automatic="on">ptx invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>Charset selection</sectiontitle>

<!-- c FIXME:  People don't necessarily know what an IBM-PC was these days. -->
<para>As it is set up now, the program assumes that the input file is coded
using 8-bit <acronym><acronymword>ISO</acronymword></acronym> 8859-1 code, also known as Latin-1 character set,
<emph>unless</emph> it is compiled for MS-DOS, in which case it uses the
character set of the IBM-PC&eosperiod;  (<sc>gnu</sc> <command>ptx</command> is not known to work on
smaller MS-DOS machines anymore.)  Compared to 7-bit <acronym><acronymword>ASCII</acronymword></acronym>, the set
of characters which are letters is different; this alters the behavior
of regular expression matching.  Thus, the default regular expression
for a keyword allows foreign or diacriticized letters.  Keyword sorting,
however, is still crude; it obeys the underlying character set ordering
quite blindly.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-f</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--ignore-case</itemformat></itemx>
</tableterm><tableitem><para>Fold lower case letters to upper case for sorting.
</para>
</tableitem></tableentry></table>


</subsection>
<node name="Input-processing-in-ptx" spaces=" "><nodename>Input processing in ptx</nodename><nodenext automatic="on">Output formatting in ptx</nodenext><nodeprev automatic="on">Charset selection in ptx</nodeprev><nodeup automatic="on">ptx invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>Word selection and input processing</sectiontitle>

<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-b <var>file</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--break-file=<var>file</var></itemformat></itemx>
</tableterm><tableitem>
<para>This option provides an alternative (to <option>-W</option>) method of describing
which characters make up words.  It introduces the name of a
file which contains a list of characters which can<emph>not</emph> be part of
one word; this file is called the <dfn>Break file</dfn>.  Any character which
is not part of the Break file is a word constituent.  If both options
<option>-b</option> and <option>-W</option> are specified, then <option>-W</option> has precedence and
<option>-b</option> is ignored.
</para>
<para>When <sc>gnu</sc> extensions are enabled, the only way to avoid newline as a
break character is to write all the break characters in the file with no
newline at all, not even at the end of the file.  When <sc>gnu</sc> extensions
are disabled, spaces, tabs and newlines are always considered as break
characters even if not included in the Break file.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-i <var>file</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--ignore-file=<var>file</var></itemformat></itemx>
</tableterm><tableitem>
<para>The file associated with this option contains a list of words which will
never be taken as keywords in concordance output.  It is called the
<dfn>Ignore file</dfn>.  The file contains exactly one word in each line; the
end of line separation of words is not subject to the value of the
<option>-S</option> option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-o <var>file</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--only-file=<var>file</var></itemformat></itemx>
</tableterm><tableitem>
<para>The file associated with this option contains a list of words which will
be retained in concordance output; any word not mentioned in this file
is ignored.  The file is called the <dfn>Only file</dfn>.  The file contains
exactly one word in each line; the end of line separation of words is
not subject to the value of the <option>-S</option> option.
</para>
<para>There is no default for the Only file.  When both an Only file and an
Ignore file are specified, a word is considered a keyword only
if it is listed in the Only file and not in the Ignore file.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-r</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--references</itemformat></itemx>
</tableterm><tableitem>
<para>On each input line, the leading sequence of non-white space characters will be
taken to be a reference that has the purpose of identifying this input
line in the resulting permuted index.  For more information about reference
production, see <xref><xrefnodename>Output formatting in ptx</xrefnodename></xref>.
Using this option changes the default value for option <option>-S</option>.
</para>
<para>Using this option, the program does not try very hard to remove
references from contexts in output, but it succeeds in doing so
<emph>when</emph> the context ends exactly at the newline.  If option
<option>-r</option> is used with <option>-S</option> default value, or when <sc>gnu</sc> extensions
are disabled, this condition is always met and references are completely
excluded from the output contexts.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-S <var>regexp</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--sentence-regexp=<var>regexp</var></itemformat></itemx>
</tableterm><tableitem>
<para>This option selects which regular expression will describe the end of a
line or the end of a sentence.  In fact, this regular expression is not
the only distinction between end of lines or end of sentences, and input
line boundaries have no special significance outside this option.  By
default, when <sc>gnu</sc> extensions are enabled and if <option>-r</option> option is not
used, end of sentences are used.  In this case, this <var>regex</var> is
imported from <sc>gnu</sc> Emacs:
</para>
<example endspaces=" ">
<pre xml:space="preserve">[.?!][]\&quot;')&rbrace;]*\\($\\|\t\\|  \\)[ \t\n]*
</pre></example>

<para>Whenever <sc>gnu</sc> extensions are disabled or if <option>-r</option> option is used, end
of lines are used; in this case, the default <var>regexp</var> is just:
</para>
<example endspaces=" ">
<pre xml:space="preserve">\n
</pre></example>

<para>Using an empty <var>regexp</var> is equivalent to completely disabling end of
line or end of sentence recognition.  In this case, the whole file is
considered to be a single big line or sentence.  The user might want to
disallow all truncation flag generation as well, through option <option>-F
&quot;&quot;</option>.  <xref><xrefnodename>Regexps</xrefnodename><xrefinfoname spaces=" "></xrefinfoname><xrefprinteddesc spaces=" ">Syntax of Regular Expressions</xrefprinteddesc><xrefinfofile spaces=" ">emacs</xrefinfofile><xrefprintedname spaces=" ">The GNU Emacs
Manual</xrefprintedname></xref>.
</para>
<para>When the keywords happen to be near the beginning of the input line or
sentence, this often creates an unused area at the beginning of the
output context line; when the keywords happen to be near the end of the
input line or sentence, this often creates an unused area at the end of
the output context line.  The program tries to fill those unused areas
by wrapping around context in them; the tail of the input line or
sentence is used to fill the unused area on the left of the output line;
the head of the input line or sentence is used to fill the unused area
on the right of the output line.
</para>
<para>As a matter of convenience to the user, many usual backslashed escape
sequences from the C language are recognized and converted to the
corresponding characters by <command>ptx</command> itself.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-W <var>regexp</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--word-regexp=<var>regexp</var></itemformat></itemx>
</tableterm><tableitem>
<para>This option selects which regular expression will describe each keyword.
By default, if <sc>gnu</sc> extensions are enabled, a word is a sequence of
letters; the <var>regexp</var> used is <samp>\w+</samp>.  When <sc>gnu</sc> extensions are
disabled, a word is by default anything which ends with a space, a tab
or a newline; the <var>regexp</var> used is <samp>[^ \t\n]+</samp>.
</para>
<para>An empty <var>regexp</var> is equivalent to not using this option.
<xref><xrefnodename>Regexps</xrefnodename><xrefinfoname spaces=" "></xrefinfoname><xrefprinteddesc spaces=" ">Syntax of Regular Expressions</xrefprinteddesc><xrefinfofile spaces=" ">emacs</xrefinfofile><xrefprintedname spaces=" ">The GNU Emacs
Manual</xrefprintedname></xref>.
</para>
<para>As a matter of convenience to the user, many usual backslashed escape
sequences, as found in the C language, are recognized and converted to
the corresponding characters by <command>ptx</command> itself.
</para>
</tableitem></tableentry></table>


</subsection>
<node name="Output-formatting-in-ptx" spaces=" "><nodename>Output formatting in ptx</nodename><nodenext automatic="on">Compatibility in ptx</nodenext><nodeprev automatic="on">Input processing in ptx</nodeprev><nodeup automatic="on">ptx invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>Output formatting</sectiontitle>

<para>Output format is mainly controlled by the <option>-O</option> and <option>-T</option> options
described in the table below.  When neither <option>-O</option> nor <option>-T</option> are
selected, and if <sc>gnu</sc> extensions are enabled, the program chooses an
output format suitable for a dumb terminal.  Each keyword occurrence is
output to the center of one line, surrounded by its left and right
contexts.  Each field is properly justified, so the concordance output
can be readily observed.  As a special feature, if automatic
references are selected by option <option>-A</option> and are output before the
left context, that is, if option <option>-R</option> is <emph>not</emph> selected, then
a colon is added after the reference; this nicely interfaces with <sc>gnu</sc>
Emacs <code>next-error</code> processing.  In this default output format, each
white space character, like newline and tab, is merely changed to
exactly one space, with no special attempt to compress consecutive
spaces.  This might change in the future.  Except for those white space
characters, every other character of the underlying set of 256
characters is transmitted verbatim.
</para>
<para>Output format is further controlled by the following options.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-g <var>number</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--gap-size=<var>number</var></itemformat></itemx>
</tableterm><tableitem>
<para>Select the size of the minimum white space gap between the fields on the
output line.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-w <var>number</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--width=<var>number</var></itemformat></itemx>
</tableterm><tableitem>
<para>Select the maximum output width of each final line.  If references are
used, they are included or excluded from the maximum output width
depending on the value of option <option>-R</option>.  If this option is not
selected, that is, when references are output before the left context,
the maximum output width takes into account the maximum length of all
references.  If this option is selected, that is, when references are
output after the right context, the maximum output width does not take
into account the space taken by references, nor the gap that precedes
them.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-A</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--auto-reference</itemformat></itemx>
</tableterm><tableitem>
<para>Select automatic references.  Each input line will have an automatic
reference made up of the file name and the line ordinal, with a single
colon between them.  However, the file name will be empty when standard
input is being read.  If both <option>-A</option> and <option>-r</option> are selected, then
the input reference is still read and skipped, but the automatic
reference is used at output time, overriding the input reference.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-R</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--right-side-refs</itemformat></itemx>
</tableterm><tableitem>
<para>In the default output format, when option <option>-R</option> is not used, any
references produced by the effect of options <option>-r</option> or <option>-A</option> are
placed to the far right of output lines, after the right context.  With
default output format, when the <option>-R</option> option is specified, references
are rather placed at the beginning of each output line, before the left
context.  For any other output format, option <option>-R</option> is
ignored, with one exception:  with <option>-R</option> the width of references
is <emph>not</emph> taken into account in total output width given by <option>-w</option>.
</para>
<para>This option is automatically selected whenever <sc>gnu</sc> extensions are
disabled.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-F <var>string</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--flac-truncation=<var>string</var></itemformat></itemx>
</tableterm><tableitem>
<para>This option will request that any truncation in the output be reported
using the string <var>string</var>.  Most output fields theoretically extend
towards the beginning or the end of the current line, or current
sentence, as selected with option <option>-S</option>.  But there is a maximum
allowed output line width, changeable through option <option>-w</option>, which is
further divided into space for various output fields.  When a field has
to be truncated because it cannot extend beyond the beginning or the end of
the current line to fit in, then a truncation occurs.  By default,
the string used is a single slash, as in <option>-F /</option>.
</para>
<para><var>string</var> may have more than one character, as in <option>-F ...</option>.
Also, in the particular case when <var>string</var> is empty (<option>-F &quot;&quot;</option>),
truncation flagging is disabled, and no truncation marks are appended in
this case.
</para>
<para>As a matter of convenience to the user, many usual backslashed escape
sequences, as found in the C language, are recognized and converted to
the corresponding characters by <command>ptx</command> itself.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-M <var>string</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--macro-name=<var>string</var></itemformat></itemx>
</tableterm><tableitem>
<para>Select another <var>string</var> to be used instead of <samp>xx</samp>, while
generating output suitable for <command>nroff</command>, <command>troff</command> or &tex;.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-O</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--format=roff</itemformat></itemx>
</tableterm><tableitem>
<para>Choose an output format suitable for <command>nroff</command> or <command>troff</command>
processing.  Each output line will look like:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">.xx &quot;<var>tail</var>&quot; &quot;<var>before</var>&quot; &quot;<var>keyword_and_after</var>&quot;<!-- c -->
 &quot;<var>head</var>&quot; &quot;<var>ref</var>&quot;
</pre></smallexample>

<para>so it will be possible to write a <samp>.xx</samp> roff macro to take care of
the output typesetting.  This is the default output format when <sc>gnu</sc>
extensions are disabled.  Option <option>-M</option> can be used to change
<samp>xx</samp> to another macro name.
</para>
<para>In this output format, each non-graphical character, like newline and
tab, is merely changed to exactly one space, with no special attempt to
compress consecutive spaces.  Each quote character: <kbd>&quot;</kbd> is doubled
so it will be correctly processed by <command>nroff</command> or <command>troff</command>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-T</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--format=tex</itemformat></itemx>
</tableterm><tableitem>
<para>Choose an output format suitable for &tex; processing.  Each output
line will look like:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">\xx &lbrace;<var>tail</var>&rbrace;&lbrace;<var>before</var>&rbrace;&lbrace;<var>keyword</var>&rbrace;<!-- c -->
&lbrace;<var>after</var>&rbrace;&lbrace;<var>head</var>&rbrace;&lbrace;<var>ref</var>&rbrace;
</pre></smallexample>

<noindent></noindent>
<para>so it will be possible to write a <code>\xx</code> definition to take care of
the output typesetting.  Note that when references are not being
produced, that is, neither option <option>-A</option> nor option <option>-r</option> is
selected, the last parameter of each <code>\xx</code> call is inhibited.
Option <option>-M</option> can be used to change <samp>xx</samp> to another macro
name.
</para>
<para>In this output format, some special characters, like <kbd>$</kbd>, <kbd>%</kbd>,
<kbd>&amp;</kbd>, <kbd>#</kbd> and <kbd>_</kbd> are automatically protected with a
backslash.  Curly brackets <kbd>&lbrace;</kbd>, <kbd>&rbrace;</kbd> are protected with a
backslash and a pair of dollar signs (to force mathematical mode).  The
backslash itself produces the sequence <code>\backslash&lbrace;&rbrace;</code>.
Circumflex and tilde diacritical marks produce the sequence <code>^\&lbrace; &rbrace;</code> and
<code>~\&lbrace; &rbrace;</code> respectively.  Other diacriticized characters of the
underlying character set produce an appropriate &tex; sequence as far
as possible.  The other non-graphical characters, like newline and tab,
and all other characters which are not part of <acronym><acronymword>ASCII</acronymword></acronym>, are merely
changed to exactly one space, with no special attempt to compress
consecutive spaces.  Let me know how to improve this special character
processing for &tex;.
</para>
</tableitem></tableentry></table>


</subsection>
<node name="Compatibility-in-ptx" spaces=" "><nodename>Compatibility in ptx</nodename><nodeprev automatic="on">Output formatting in ptx</nodeprev><nodeup automatic="on">ptx invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>The <sc>gnu</sc> extensions to <command>ptx</command></sectiontitle>

<para>This version of <command>ptx</command> contains a few features which do not exist in
System V <command>ptx</command>.  These extra features are suppressed by using the
<option>-G</option> command line option, unless overridden by other command line
options.  Some <sc>gnu</sc> extensions cannot be recovered by overriding, so the
simple rule is to avoid <option>-G</option> if you care about <sc>gnu</sc> extensions.
Here are the differences between this program and System V <command>ptx</command>.
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet" /></itemprepend>
<beforefirstitem>
</beforefirstitem><listitem><prepend>&bullet;</prepend>
<para>This program can read many input files at once, it always writes the
resulting concordance on standard output.  On the other hand, System V
<command>ptx</command> reads only one file and sends the result to standard output
or, if a second <var>file</var> parameter is given on the command, to that
<var>file</var>.
</para>
<para>Having output parameters not introduced by options is a dangerous
practice which <sc>gnu</sc> avoids as far as possible.  So, for using <command>ptx</command>
portably between <sc>gnu</sc> and System V, you should always use it with a
single input file, and always expect the result on standard output.  You
might also want to automatically configure in a <option>-G</option> option to
<command>ptx</command> calls in products using <command>ptx</command>, if the configurator finds
that the installed <command>ptx</command> accepts <option>-G</option>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>The only options available in System V <command>ptx</command> are options <option>-b</option>,
<option>-f</option>, <option>-g</option>, <option>-i</option>, <option>-o</option>, <option>-r</option>, <option>-t</option> and
<option>-w</option>.  All other options are <sc>gnu</sc> extensions and are not repeated in
this enumeration.  Moreover, some options have a slightly different
meaning when <sc>gnu</sc> extensions are enabled, as explained below.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>By default, concordance output is not formatted for <command>troff</command> or
<command>nroff</command>.  It is rather formatted for a dumb terminal.  <command>troff</command>
or <command>nroff</command> output may still be selected through option <option>-O</option>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Unless <option>-R</option> option is used, the maximum reference width is
subtracted from the total output line width.  With <sc>gnu</sc> extensions
disabled, width of references is not taken into account in the output
line width computations.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>All 256 bytes, even <acronym><acronymword>ASCII</acronymword></acronym> <sc>nul</sc> bytes, are always read and
processed from input file with no adverse effect, even if <sc>gnu</sc> extensions
are disabled. However, System V <command>ptx</command> does not accept 8-bit characters,
a few control characters are rejected, and the tilde <kbd>~</kbd> is also rejected.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Input line length is only limited by available memory, even if <sc>gnu</sc>
extensions are disabled.  However, System V <command>ptx</command> processes only
the first 200 characters in each line.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>The break (non-word) characters default to be every character except all
letters of the underlying character set, diacriticized or not.  When <sc>gnu</sc>
extensions are disabled, the break characters default to space, tab and
newline only.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>The program makes better use of output line width.  If <sc>gnu</sc> extensions
are disabled, the program rather tries to imitate System V <command>ptx</command>,
but still, there are some slight disposition glitches this program does
not completely reproduce.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>The user can specify both an Ignore file and an Only file.  This is not
allowed with System V <command>ptx</command>.
</para>
</listitem></itemize>


</subsection>
</section>
<node name="tsort-invocation" spaces=" "><nodename>tsort invocation</nodename><nodeprev automatic="on">ptx invocation</nodeprev><nodeup automatic="on">Operating on sorted files</nodeup></node>
<section spaces=" "><sectiontitle><command>tsort</command>: Topological sort</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">tsort</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">topological sort</indexterm></cindex>

<para><command>tsort</command> performs a topological sort on the given <var>file</var>, or
standard input if no input file is given or for a <var>file</var> of
<samp>-</samp>.  For more details and some history, see <ref><xrefnodename>tsort background</xrefnodename></ref>.
Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">tsort [<var>option</var>] [<var>file</var>]
</pre></example>

<para><command>tsort</command> reads its input as pairs of strings, separated by blanks,
indicating a partial ordering.  The output is a total ordering that
corresponds to the given partial ordering.
</para>
<para>For example
</para>
<example endspaces=" ">
<pre xml:space="preserve">tsort &lt;&lt;EOF
a b c
d
e f
b c d e
EOF
</pre></example>

<noindent></noindent>
<para>will produce the output
</para>
<example endspaces=" ">
<pre xml:space="preserve">a
b
c
d
e
f
</pre></example>

<para>Consider a more realistic example.
You have a large set of functions all in one file, and they may all be
declared static except one.  Currently that one (say <code>main</code>) is the
first function defined in the file, and the ones it calls directly follow
it, followed by those they call, etc.  Let&textrsquo;s say that you are determined
to take advantage of prototypes, so you have to choose between declaring
all of those functions (which means duplicating a lot of information from
the definitions) and rearranging the functions so that as many as possible
are defined before they are used.  One way to automate the latter process
is to get a list for each function of the functions it calls directly.
Many programs can generate such lists.  They describe a call graph.
Consider the following list, in which a given line indicates that the
function on the left calls the one on the right directly.
</para>
<example endspaces=" ">
<pre xml:space="preserve">main parse_options
main tail_file
main tail_forever
tail_file pretty_name
tail_file write_header
tail_file tail
tail_forever recheck
tail_forever pretty_name
tail_forever write_header
tail_forever dump_remainder
tail tail_lines
tail tail_bytes
tail_lines start_lines
tail_lines dump_remainder
tail_lines file_lines
tail_lines pipe_lines
tail_bytes xlseek
tail_bytes start_bytes
tail_bytes dump_remainder
tail_bytes pipe_bytes
file_lines dump_remainder
recheck pretty_name
</pre></example>

<para>then you can use <command>tsort</command> to produce an ordering of those
functions that satisfies your requirement.
</para>
<example endspaces=" ">
<pre xml:space="preserve">example$ tsort call-graph | tac
dump_remainder
start_lines
file_lines
pipe_lines
xlseek
start_bytes
pipe_bytes
tail_lines
tail_bytes
pretty_name
write_header
tail
recheck
parse_options
tail_file
tail_forever
main
</pre></example>

<para><command>tsort</command> detects any cycles in the input and writes the first cycle
encountered to standard error.
</para>
<para>Note that for a given partial ordering, generally there is no unique
total ordering.  In the context of the call graph above, the function
<code>parse_options</code> may be placed anywhere in the list as long as it
precedes <code>main</code>.
</para>
<para>The only options are <option>--help</option> and <option>--version</option>.  <xref><xrefnodename>Common
options</xrefnodename></xref>.
</para>
<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::            ">tsort background</menunode><menudescription><pre xml:space="preserve">Where tsort came from.
</pre></menudescription></menuentry></menu>

<node name="tsort-background" spaces=" "><nodename>tsort background</nodename><nodeup automatic="on">tsort invocation</nodeup></node>
<subsection spaces=" "><sectiontitle><command>tsort</command>: Background</sectiontitle>

<para><command>tsort</command> exists because very early versions of the Unix linker processed
an archive file exactly once, and in order.  As <command>ld</command> read each object
in the archive, it decided whether it was needed in the program based on
whether it defined any symbols which were undefined at that point in
the link.
</para>
<para>This meant that dependencies within the archive had to be handled
specially.  For example, <code>scanf</code> probably calls <code>read</code>.  That means
that in a single pass through an archive, it was important for <code>scanf.o</code>
to appear before read.o, because otherwise a program which calls
<code>scanf</code> but not <code>read</code> might end up with an unexpected unresolved
reference to <code>read</code>.
</para>
<para>The way to address this problem was to first generate a set of
dependencies of one object file on another.  This was done by a shell
script called <command>lorder</command>.  The GNU tools don&textrsquo;t provide a version of
lorder, as far as I know, but you can still find it in BSD
distributions.
</para>
<para>Then you ran <command>tsort</command> over the <command>lorder</command> output, and you used the
resulting sort to define the order in which you added objects to the archive.
</para>
<para>This whole procedure has been obsolete since about 1980, because
Unix archives now contain a symbol table (traditionally built by
<command>ranlib</command>, now generally built by <command>ar</command> itself), and the Unix
linker uses the symbol table to effectively make multiple passes over
an archive file.
</para>
<para>Anyhow, that&textrsquo;s where tsort came from.  To solve an old problem with
the way the linker handled archive files, which has since been solved
in different ways.
</para>

</subsection>
</section>
</chapter>
<node name="Operating-on-fields" spaces=" "><nodename>Operating on fields</nodename><nodenext automatic="on">Operating on characters</nodenext><nodeprev automatic="on">Operating on sorted files</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>Operating on fields</sectiontitle>

<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::              ">cut invocation</menunode><menudescription><pre xml:space="preserve">Print selected parts of lines.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">paste invocation</menunode><menudescription><pre xml:space="preserve">Merge lines of files.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">join invocation</menunode><menudescription><pre xml:space="preserve">Join lines on a common field.
</pre></menudescription></menuentry></menu>


<node name="cut-invocation" spaces=" "><nodename>cut invocation</nodename><nodenext automatic="on">paste invocation</nodenext><nodeup automatic="on">Operating on fields</nodeup></node>
<section spaces=" "><sectiontitle><command>cut</command>: Print selected parts of lines</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">cut</indexterm></pindex>
<para><command>cut</command> writes to standard output selected parts of each line of each
input file, or standard input if no files are given or for a file name of
<samp>-</samp>.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">cut <var>option</var>&dots; [<var>file</var>]&dots;
</pre></example>

<para>In the table which follows, the <var>byte-list</var>, <var>character-list</var>,
and <var>field-list</var> are one or more numbers or ranges (two numbers
separated by a dash) separated by commas.  Bytes, characters, and
fields are numbered starting at 1.  Incomplete ranges may be
given: <option>-<var>m</var></option> means <samp>1-<var>m</var></samp>; <samp><var>n</var>-</samp> means
<samp><var>n</var></samp> through end of line or last field.  The list elements
can be repeated, can overlap, and can be specified in any order; but
the selected input is written in the same order that it is read, and
is written exactly once.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common
options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-b <var>byte-list</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--bytes=<var>byte-list</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-b</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;bytes</indexterm></indexcommand>
<para>Select for printing only the bytes in positions listed in
<var>byte-list</var>.  Tabs and backspaces are treated like any other
character; they take up 1 byte.  If an output delimiter is specified,
(see the description of <option>--output-delimiter</option>), then output that
string between ranges of selected bytes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-c <var>character-list</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--characters=<var>character-list</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-c</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;characters</indexterm></indexcommand>
<para>Select for printing only the characters in positions listed in
<var>character-list</var>.  The same as <option>-b</option> for now, but
internationalization will change that.  Tabs and backspaces are
treated like any other character; they take up 1 character.  If an
output delimiter is specified, (see the description of
<option>--output-delimiter</option>), then output that string between ranges
of selected bytes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-f <var>field-list</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--fields=<var>field-list</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-f</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;fields</indexterm></indexcommand>
<para>Select for printing only the fields listed in <var>field-list</var>.
Fields are separated by a TAB character by default.  Also print any
line that contains no delimiter character, unless the
<option>--only-delimited</option> (<option>-s</option>) option is specified.
</para>
<para>Note <command>awk</command> supports more sophisticated field processing,
and by default will use (and discard) runs of blank characters to
separate fields, and ignore leading and trailing blanks.
</para><example endspaces=" ">
<verbatim xml:space="preserve">
awk '{print $2}'    # print the second field
awk '{print $NF-1}' # print the penultimate field
awk '{print $2,$1}' # reorder the first two fields
</verbatim>
</example>

<para>In the unlikely event that <command>awk</command> is unavailable,
one can use the <command>join</command> command, to process blank
characters as <command>awk</command> does above.
</para><example endspaces=" ">
<verbatim xml:space="preserve">
join -a1 -o 1.2     - /dev/null # print the second field
join -a1 -o 1.2,1.1 - /dev/null # reorder the first two fields
</verbatim>
</example>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-d <var>input_delim_byte</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--delimiter=<var>input_delim_byte</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-d</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;delimiter</indexterm></indexcommand>
<para>With <option>-f</option>, use the first byte of <var>input_delim_byte</var> as
the input fields separator (default is TAB).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-n</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-n</indexterm></indexcommand>
<para>Do not split multi-byte characters (no-op for now).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-s</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--only-delimited</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-s</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;only-delimited</indexterm></indexcommand>
<para>For <option>-f</option>, do not print lines that do not contain the field separator
character.  Normally, any line without a field separator is printed verbatim.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--output-delimiter=<var>output_delim_string</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;output-delimiter</indexterm></indexcommand>
<para>With <option>-f</option>, output fields are separated by <var>output_delim_string</var>.
The default with <option>-f</option> is to use the input delimiter.
When using <option>-b</option> or <option>-c</option> to select ranges of byte or
character offsets (as opposed to ranges of fields),
output <var>output_delim_string</var> between non-overlapping
ranges of selected bytes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--complement</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;complement</indexterm></indexcommand>
<para>This option is a <acronym><acronymword>GNU</acronymword></acronym> extension.
Select for printing the complement of the bytes, characters or fields
selected with the <option>-b</option>, <option>-c</option> or <option>-f</option> options.
In other words, do <emph>not</emph> print the bytes, characters or fields
specified via those options.  This option is useful when you have
many fields and want to print all but a few of them.
</para>
</tableitem></tableentry></table>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="paste-invocation" spaces=" "><nodename>paste invocation</nodename><nodenext automatic="on">join invocation</nodenext><nodeprev automatic="on">cut invocation</nodeprev><nodeup automatic="on">Operating on fields</nodeup></node>
<section spaces=" "><sectiontitle><command>paste</command>: Merge lines of files</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">paste</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">merging files</indexterm></cindex>

<para><command>paste</command> writes to standard output lines consisting of sequentially
corresponding lines of each given file, separated by a TAB character.
Standard input is used for a file name of <samp>-</samp> or if no input files
are given.
</para>
<para>For example:
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ cat num2
1
2
$ cat let3
a
b
c
$ paste num2 let3
1       a
2       b
       <spacecmd type="spc"/>c
</pre></example>

<para>Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">paste [<var>option</var>]&dots; [<var>file</var>]&dots;
</pre></example>

<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-s</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--serial</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-s</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;serial</indexterm></indexcommand>
<para>Paste the lines of one file at a time rather than one line from each
file.  Using the above example data:
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ paste -s num2 let3
1       2
a       b       c
</pre></example>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-d <var>delim-list</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--delimiters=<var>delim-list</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-d</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;delimiters</indexterm></indexcommand>
<para>Consecutively use the characters in <var>delim-list</var> instead of
TAB to separate merged lines.  When <var>delim-list</var> is
exhausted, start again at its beginning.  Using the above example data:
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ paste -d '%_' num2 let3 num2
1%a_1
2%b_2
%c_
</pre></example>

</tableitem></tableentry></table>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="join-invocation" spaces=" "><nodename>join invocation</nodename><nodeprev automatic="on">paste invocation</nodeprev><nodeup automatic="on">Operating on fields</nodeup></node>
<section spaces=" "><sectiontitle><command>join</command>: Join lines on a common field</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">join</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">common field, joining on</indexterm></cindex>

<para><command>join</command> writes to standard output a line for each pair of input
lines that have identical join fields.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">join [<var>option</var>]&dots; <var>file1</var> <var>file2</var>
</pre></example>

<para>Either <var>file1</var> or <var>file2</var> (but not both) can be <samp>-</samp>,
meaning standard input.  <var>file1</var> and <var>file2</var> should be
sorted on the join fields.
</para>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">LC_COLLATE</indexterm></vindex>
<para>Normally, the sort order is that of the
collating sequence specified by the <env>LC_COLLATE</env> locale.  Unless
the <option>-t</option> option is given, the sort comparison ignores blanks at
the start of the join field, as in <code>sort -b</code>.  If the
<option>--ignore-case</option> option is given, the sort comparison ignores
the case of characters in the join field, as in <code>sort -f</code>.
</para>
<para>The <command>sort</command> and <command>join</command> commands should use consistent
locales and options if the output of <command>sort</command> is fed to
<command>join</command>.  You can use a command like <samp>sort -k 1b,1</samp> to
sort a file on its default join field, but if you select a non-default
locale, join field, separator, or comparison options, then you should
do so consistently between <command>join</command> and <command>sort</command>.
If <samp>join -t ''</samp> is specified then the whole line is considered which
matches the default operation of sort.
</para>
<para>If the input has no unpairable lines, a <acronym><acronymword>GNU</acronymword></acronym> extension is
available; the sort order can be any order that considers two fields
to be equal if and only if the sort comparison described above
considers them to be equal.  For example:
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ cat file1
a a1
c c1
b b1
$ cat file2
a a2
c c2
b b2
$ join file1 file2
a a1 a2
c c1 c2
b b1 b2
</pre></example>

<set name="JOIN_COMMAND" line=" JOIN_COMMAND"></set>
<para>If the <option>--check-order</option> option is given, unsorted inputs will
cause a fatal error message.  If the option <option>--nocheck-order</option>
is given, unsorted inputs will never cause an error message.  If neither
of these options is given, wrongly sorted inputs are diagnosed
only if an input file is found to contain unpairable
lines, and when both input files are non empty.
If an input file is diagnosed as being unsorted, the <command>join</command>
command will exit with a nonzero status (and the output should not be used).
</para>
<para>Forcing <command>join</command> to process wrongly sorted input files
containing unpairable lines by specifying <option>--nocheck-order</option> is
not guaranteed to produce any particular output.  The output will
probably not correspond with whatever you hoped it would be.
<clear name="JOIN_COMMAND" line=" JOIN_COMMAND"></clear>
</para>
<para>The defaults are:
</para><itemize commandarg="bullet" endspaces=" ">
<listitem spaces=" "><prepend>&bullet;</prepend><para>the join field is the first field in each line;
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>fields in the input are separated by one or more blanks, with leading
blanks on the line ignored;
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>fields in the output are separated by a space;
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>each output line consists of the join field, the remaining
fields from <var>file1</var>, then the remaining fields from <var>file2</var>.
</para></listitem></itemize>

<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-a <var>file-number</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-a</indexterm></indexcommand>
<para>Print a line for each unpairable line in file <var>file-number</var> (either
<samp>1</samp> or <samp>2</samp>), in addition to the normal output.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--check-order</itemformat></item>
</tableterm><tableitem><para>Fail with an error message if either input file is wrongly ordered.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--nocheck-order</itemformat></item>
</tableterm><tableitem><para>Do not check that both input files are in sorted order.  This is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-e <var>string</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-e</indexterm></indexcommand>
<para>Replace those output fields that are missing in the input with <var>string</var>.
I.E. missing fields specified with the <option>-12jo</option> options.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--header</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;header</indexterm></indexcommand>
<para>Treat the first line of each input file as a header line. The header lines will
be joined and printed as the first output line.  If <option>-o</option> is used to
specify output format, the header line will be printed according to the
specified format.  The header lines will not be checked for ordering even if
<option>--check-order</option> is specified.  Also if the header lines from each file
do not match, the heading fields from the first file will be used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-i</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--ignore-case</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-i</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;ignore-case</indexterm></indexcommand>
<para>Ignore differences in case when comparing keys.
With this option, the lines of the input files must be ordered in the same way.
Use <samp>sort -f</samp> to produce this ordering.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-1 <var>field</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-1</indexterm></indexcommand>
<para>Join on field <var>field</var> (a positive integer) of file 1.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-2 <var>field</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-2</indexterm></indexcommand>
<para>Join on field <var>field</var> (a positive integer) of file 2.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-j <var>field</var></itemformat></item>
</tableterm><tableitem><para>Equivalent to <option>-1 <var>field</var> -2 <var>field</var></option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-o <var>field-list</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">-o auto</itemformat></itemx>
</tableterm><tableitem><para>If the keyword <samp>auto</samp> is specified, infer the output format from
the first line in each file.  This is the same as the default output format
but also ensures the same number of fields are output for each line.
Missing fields are replaced with the <option>-e</option> option and extra fields
are discarded.
</para>
<para>Otherwise, construct each output line according to the format in
<var>field-list</var>.  Each element in <var>field-list</var> is either the single
character <samp>0</samp> or has the form <var>m.n</var> where the file number, <var>m</var>,
is <samp>1</samp> or <samp>2</samp> and <var>n</var> is a positive field number.
</para>
<para>A field specification of <samp>0</samp> denotes the join field.
In most cases, the functionality of the <samp>0</samp> field spec
may be reproduced using the explicit <var>m.n</var> that corresponds
to the join field.  However, when printing unpairable lines
(using either of the <option>-a</option> or <option>-v</option> options), there is no way
to specify the join field using <var>m.n</var> in <var>field-list</var>
if there are unpairable lines in both files.
To give <command>join</command> that functionality, <acronym><acronymword>POSIX</acronymword></acronym> invented the <samp>0</samp>
field specification notation.
</para>
<para>The elements in <var>field-list</var>
are separated by commas or blanks.
Blank separators typically need to be quoted for the shell.  For
example, the commands <samp>join -o 1.2,2.2</samp> and <samp>join -o '1.2
2.2'</samp> are equivalent.
</para>
<para>All output lines&textmdash;including those printed because of any -a or -v
option&textmdash;are subject to the specified <var>field-list</var>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-t <var>char</var></itemformat></item>
</tableterm><tableitem><para>Use character <var>char</var> as the input and output field separator.
Treat as significant each occurrence of <var>char</var> in the input file.
Use <samp>sort -t <var>char</var></samp>, without the <option>-b</option> option of
<samp>sort</samp>, to produce this ordering.  If <samp>join -t ''</samp> is specified,
the whole line is considered, matching the default operation of sort.
If <samp>-t '\0'</samp> is specified then the <acronym><acronymword>ASCII</acronymword></acronym> <sc>nul</sc>
character is used to delimit the fields.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-v <var>file-number</var></itemformat></item>
</tableterm><tableitem><para>Print a line for each unpairable line in file <var>file-number</var>
(either <samp>1</samp> or <samp>2</samp>), instead of the normal output.
</para>
</tableitem></tableentry></table>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
</chapter>
<node name="Operating-on-characters" spaces=" "><nodename>Operating on characters</nodename><nodenext automatic="on">Directory listing</nodenext><nodeprev automatic="on">Operating on fields</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>Operating on characters</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">operating on characters</indexterm></cindex>

<para>This commands operate on individual characters.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::               ">tr invocation</menunode><menudescription><pre xml:space="preserve">Translate, squeeze, and/or delete characters.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::           ">expand invocation</menunode><menudescription><pre xml:space="preserve">Convert tabs to spaces.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::         ">unexpand invocation</menunode><menudescription><pre xml:space="preserve">Convert spaces to tabs.
</pre></menudescription></menuentry></menu>


<node name="tr-invocation" spaces=" "><nodename>tr invocation</nodename><nodenext automatic="on">expand invocation</nodenext><nodeup automatic="on">Operating on characters</nodeup></node>
<section spaces=" "><sectiontitle><command>tr</command>: Translate, squeeze, and/or delete characters</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">tr</indexterm></pindex>

<para>Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">tr [<var>option</var>]&dots; <var>set1</var> [<var>set2</var>]
</pre></example>

<para><command>tr</command> copies standard input to standard output, performing
one of the following operations:
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet" /></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para>translate, and optionally squeeze repeated characters in the result,
</para></listitem><listitem><prepend>&bullet;</prepend>
<para>squeeze repeated characters,
</para></listitem><listitem><prepend>&bullet;</prepend>
<para>delete characters,
</para></listitem><listitem><prepend>&bullet;</prepend>
<para>delete characters, then squeeze repeated characters from the result.
</para></listitem></itemize>

<para>The <var>set1</var> and (if given) <var>set2</var> arguments define ordered
sets of characters, referred to below as <var>set1</var> and <var>set2</var>.  These
sets are the characters of the input that <command>tr</command> operates on.
The <option>--complement</option> (<option>-c</option>, <option>-C</option>) option replaces
<var>set1</var> with its
complement (all of the characters that are not in <var>set1</var>).
</para>
<para>Currently <command>tr</command> fully supports only single-byte characters.
Eventually it will support multibyte characters; when it does, the
<option>-C</option> option will cause it to complement the set of characters,
whereas <option>-c</option> will cause it to complement the set of values.
This distinction will matter only when some values are not characters,
and this is possible only in locales using multibyte encodings when
the input contains encoding errors.
</para>
<para>The program accepts the <option>--help</option> and <option>--version</option>
options.  <xref><xrefnodename>Common options</xrefnodename></xref>.  Options must precede operands.
</para>
<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::              ">Character sets</menunode><menudescription><pre xml:space="preserve">Specifying sets of characters.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::                 ">Translating</menunode><menudescription><pre xml:space="preserve">Changing one set of characters to another.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::                   ">Squeezing</menunode><menudescription><pre xml:space="preserve">Squeezing repeats and deleting.
</pre></menudescription></menuentry></menu>


<node name="Character-sets" spaces=" "><nodename>Character sets</nodename><nodenext automatic="on">Translating</nodenext><nodeup automatic="on">tr invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>Specifying sets of characters</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">specifying sets of characters</indexterm></cindex>

<para>The format of the <var>set1</var> and <var>set2</var> arguments resembles
the format of regular expressions; however, they are not regular
expressions, only lists of characters.  Most characters simply
represent themselves in these strings, but the strings can contain
the shorthands listed below, for convenience.  Some of them can be
used only in <var>set1</var> or <var>set2</var>, as noted below.
</para>
<table commandarg="asis" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="asis">Backslash escapes</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp">backslash escapes</indexterm></cindex>

<para>The following backslash escape sequences are recognized:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">\a</itemformat></item>
</tableterm><tableitem><para>Control-G.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">\b</itemformat></item>
</tableterm><tableitem><para>Control-H.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">\f</itemformat></item>
</tableterm><tableitem><para>Control-L.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">\n</itemformat></item>
</tableterm><tableitem><para>Control-J.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">\r</itemformat></item>
</tableterm><tableitem><para>Control-M.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">\t</itemformat></item>
</tableterm><tableitem><para>Control-I.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">\v</itemformat></item>
</tableterm><tableitem><para>Control-K.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">\<var>ooo</var></itemformat></item>
</tableterm><tableitem><para>The 8-bit character with the value given by <var>ooo</var>, which is 1 to 3
octal digits.  Note that <samp>\400</samp> is interpreted as the two-byte
sequence, <samp>\040</samp> <samp>0</samp>.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">\\</itemformat></item>
</tableterm><tableitem><para>A backslash.
</para></tableitem></tableentry></table>

<para>While a backslash followed by a character not listed above is
interpreted as that character, the backslash also effectively
removes any special significance, so it is useful to escape
<samp>[</samp>, <samp>]</samp>, <samp>*</samp>, and <samp>-</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis">Ranges</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp">ranges</indexterm></cindex>

<para>The notation <samp><var>m</var>-<var>n</var></samp> expands to all of the characters
from <var>m</var> through <var>n</var>, in ascending order.  <var>m</var> should
collate before <var>n</var>; if it doesn&textrsquo;t, an error results.  As an example,
<samp>0-9</samp> is the same as <samp>0123456789</samp>.
</para>
<para><sc>gnu</sc> <command>tr</command> does not support the System V syntax that uses square
brackets to enclose ranges.  Translations specified in that format
sometimes work as expected, since the brackets are often transliterated
to themselves.  However, they should be avoided because they sometimes
behave unexpectedly.  For example, <samp>tr -d '[0-9]'</samp> deletes brackets
as well as digits.
</para>
<para>Many historically common and even accepted uses of ranges are not
portable.  For example, on <acronym><acronymword>EBCDIC</acronymword></acronym> hosts using the <samp>A-Z</samp>
range will not do what most would expect because <samp>A</samp> through <samp>Z</samp>
are not contiguous as they are in <acronym><acronymword>ASCII</acronymword></acronym>.
If you can rely on a <acronym><acronymword>POSIX</acronymword></acronym> compliant version of <command>tr</command>, then
the best way to work around this is to use character classes (see below).
Otherwise, it is most portable (and most ugly) to enumerate the members
of the ranges.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis">Repeated characters</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp">repeated characters</indexterm></cindex>

<para>The notation <samp>[<var>c</var>*<var>n</var>]</samp> in <var>set2</var> expands to <var>n</var>
copies of character <var>c</var>.  Thus, <samp>[y*6]</samp> is the same as
<samp>yyyyyy</samp>.  The notation <samp>[<var>c</var>*]</samp> in <var>string2</var> expands
to as many copies of <var>c</var> as are needed to make <var>set2</var> as long as
<var>set1</var>.  If <var>n</var> begins with <samp>0</samp>, it is interpreted in
octal, otherwise in decimal.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis">Character classes</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp">character classes</indexterm></cindex>

<para>The notation <samp>[:<var>class</var>:]</samp> expands to all of the characters in
the (predefined) class <var>class</var>.  The characters expand in no
particular order, except for the <code>upper</code> and <code>lower</code> classes,
which expand in ascending order.  When the <option>--delete</option> (<option>-d</option>)
and <option>--squeeze-repeats</option> (<option>-s</option>) options are both given, any
character class can be used in <var>set2</var>.  Otherwise, only the
character classes <code>lower</code> and <code>upper</code> are accepted in
<var>set2</var>, and then only if the corresponding character class
(<code>upper</code> and <code>lower</code>, respectively) is specified in the same
relative position in <var>set1</var>.  Doing this specifies case conversion.
The class names are given below; an error results when an invalid class
name is given.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">alnum</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">alnum</indexterm></indexcommand>
<para>Letters and digits.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">alpha</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">alpha</indexterm></indexcommand>
<para>Letters.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">blank</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">blank</indexterm></indexcommand>
<para>Horizontal whitespace.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">cntrl</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">cntrl</indexterm></indexcommand>
<para>Control characters.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">digit</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">digit</indexterm></indexcommand>
<para>Digits.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">graph</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">graph</indexterm></indexcommand>
<para>Printable characters, not including space.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">lower</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">lower</indexterm></indexcommand>
<para>Lowercase letters.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">print</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">print</indexterm></indexcommand>
<para>Printable characters, including space.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">punct</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">punct</indexterm></indexcommand>
<para>Punctuation characters.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">space</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">space</indexterm></indexcommand>
<para>Horizontal or vertical whitespace.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">upper</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">upper</indexterm></indexcommand>
<para>Uppercase letters.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">xdigit</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">xdigit</indexterm></indexcommand>
<para>Hexadecimal digits.
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis">Equivalence classes</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp">equivalence classes</indexterm></cindex>

<para>The syntax <samp>[=<var>c</var>=]</samp> expands to all of the characters that are
equivalent to <var>c</var>, in no particular order.  Equivalence classes are
a relatively recent invention intended to support non-English alphabets.
But there seems to be no standard way to define them or determine their
contents.  Therefore, they are not fully implemented in <sc>gnu</sc> <command>tr</command>;
each character&textrsquo;s equivalence class consists only of that character,
which is of no particular use.
</para>
</tableitem></tableentry></table>


</subsection>
<node name="Translating" spaces=" "><nodename>Translating</nodename><nodenext automatic="on">Squeezing</nodenext><nodeprev automatic="on">Character sets</nodeprev><nodeup automatic="on">tr invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>Translating</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">translating characters</indexterm></cindex>

<para><command>tr</command> performs translation when <var>set1</var> and <var>set2</var> are
both given and the <option>--delete</option> (<option>-d</option>) option is not given.
<command>tr</command> translates each character of its input that is in <var>set1</var>
to the corresponding character in <var>set2</var>.  Characters not in
<var>set1</var> are passed through unchanged.  When a character appears more
than once in <var>set1</var> and the corresponding characters in <var>set2</var>
are not all the same, only the final one is used.  For example, these
two commands are equivalent:
</para>
<example endspaces=" ">
<pre xml:space="preserve">tr aaa xyz
tr a z
</pre></example>

<para>A common use of <command>tr</command> is to convert lowercase characters to
uppercase.  This can be done in many ways.  Here are three of them:
</para>
<example endspaces=" ">
<pre xml:space="preserve">tr abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ
tr a-z A-Z
tr '[:lower:]' '[:upper:]'
</pre></example>

<noindent></noindent>
<para>But note that using ranges like <code>a-z</code> above is not portable.
</para>
<para>When <command>tr</command> is performing translation, <var>set1</var> and <var>set2</var>
typically have the same length.  If <var>set1</var> is shorter than
<var>set2</var>, the extra characters at the end of <var>set2</var> are ignored.
</para>
<para>On the other hand, making <var>set1</var> longer than <var>set2</var> is not
portable; <acronym><acronymword>POSIX</acronymword></acronym> says that the result is undefined.  In this situation,
BSD <command>tr</command> pads <var>set2</var> to the length of <var>set1</var> by repeating
the last character of <var>set2</var> as many times as necessary.  System V
<command>tr</command> truncates <var>set1</var> to the length of <var>set2</var>.
</para>
<para>By default, <sc>gnu</sc> <command>tr</command> handles this case like BSD <command>tr</command>.
When the <option>--truncate-set1</option> (<option>-t</option>) option is given,
<sc>gnu</sc> <command>tr</command> handles this case like the System V <command>tr</command>
instead.  This option is ignored for operations other than translation.
</para>
<para>Acting like System V <command>tr</command> in this case breaks the relatively common
BSD idiom:
</para>
<example endspaces=" ">
<pre xml:space="preserve">tr -cs A-Za-z0-9 '\012'
</pre></example>

<noindent></noindent>
<para>because it converts only zero bytes (the first element in the
complement of <var>set1</var>), rather than all non-alphanumerics, to
newlines.
</para>
<noindent></noindent>
<para>By the way, the above idiom is not portable because it uses ranges, and
it assumes that the octal code for newline is 012.
Assuming a <acronym><acronymword>POSIX</acronymword></acronym> compliant <command>tr</command>, here is a better
way to write it:
</para>
<example endspaces=" ">
<pre xml:space="preserve">tr -cs '[:alnum:]' '[\n*]'
</pre></example>


</subsection>
<node name="Squeezing" spaces=" "><nodename>Squeezing</nodename><nodeprev automatic="on">Translating</nodeprev><nodeup automatic="on">tr invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>Squeezing repeats and deleting</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">squeezing repeat characters</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">deleting characters</indexterm></cindex>

<para>When given just the <option>--delete</option> (<option>-d</option>) option, <command>tr</command>
removes any input characters that are in <var>set1</var>.
</para>
<para>When given just the <option>--squeeze-repeats</option> (<option>-s</option>) option,
<command>tr</command> replaces each input sequence of a repeated character that
is in <var>set1</var> with a single occurrence of that character.
</para>
<para>When given both <option>--delete</option> and <option>--squeeze-repeats</option>, <command>tr</command>
first performs any deletions using <var>set1</var>, then squeezes repeats
from any remaining characters using <var>set2</var>.
</para>
<para>The <option>--squeeze-repeats</option> option may also be used when translating,
in which case <command>tr</command> first performs translation, then squeezes
repeats from any remaining characters using <var>set2</var>.
</para>
<para>Here are some examples to illustrate various combinations of options:
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet" /></itemprepend>
<beforefirstitem>
</beforefirstitem><listitem><prepend>&bullet;</prepend>
<para>Remove all zero bytes:
</para>
<example endspaces=" ">
<pre xml:space="preserve">tr -d '\0'
</pre></example>

</listitem><listitem><prepend>&bullet;</prepend>
<para>Put all words on lines by themselves.  This converts all
non-alphanumeric characters to newlines, then squeezes each string
of repeated newlines into a single newline:
</para>
<example endspaces=" ">
<pre xml:space="preserve">tr -cs '[:alnum:]' '[\n*]'
</pre></example>

</listitem><listitem><prepend>&bullet;</prepend>
<para>Convert each sequence of repeated newlines to a single newline:
</para>
<example endspaces=" ">
<pre xml:space="preserve">tr -s '\n'
</pre></example>

</listitem><listitem><prepend>&bullet;</prepend>
<para>Find doubled occurrences of words in a document.
<!-- c Separate the following two "the"s, so typo checkers don't complain. -->
For example, people often write &textldquo;the <w></w>the&textrdquo; with the repeated words
separated by a newline.  The Bourne shell script below works first
by converting each sequence of punctuation and blank characters to a
single newline.  That puts each &textldquo;word&textrdquo; on a line by itself.
Next it maps all uppercase characters to lower case, and finally it
runs <command>uniq</command> with the <option>-d</option> option to print out only the words
that were repeated.
</para>
<example endspaces=" ">
<pre xml:space="preserve">#!/bin/sh
cat -- &quot;$&arobase;&quot; \
  | tr -s '[:punct:][:blank:]' '[\n*]' \
  | tr '[:upper:]' '[:lower:]' \
  | uniq -d
</pre></example>

</listitem><listitem><prepend>&bullet;</prepend>
<para>Deleting a small set of characters is usually straightforward.  For example,
to remove all <samp>a</samp>s, <samp>x</samp>s, and <samp>M</samp>s you would do this:
</para>
<example endspaces=" ">
<pre xml:space="preserve">tr -d axM
</pre></example>

<para>However, when <samp>-</samp> is one of those characters, it can be tricky because
<samp>-</samp> has special meanings.  Performing the same task as above but also
removing all <samp>-</samp> characters, we might try <code>tr -d -axM</code>, but
that would fail because <command>tr</command> would try to interpret <option>-a</option> as
a command-line option.  Alternatively, we could try putting the hyphen
inside the string, <code>tr -d a-xM</code>, but that wouldn&textrsquo;t work either because
it would make <command>tr</command> interpret <code>a-x</code> as the range of characters
<samp>a</samp>&dots;<samp>x</samp> rather than the three.
One way to solve the problem is to put the hyphen at the end of the list
of characters:
</para>
<example endspaces=" ">
<pre xml:space="preserve">tr -d axM-
</pre></example>

<para>Or you can use <samp>--</samp> to terminate option processing:
</para>
<example endspaces=" ">
<pre xml:space="preserve">tr -d -- -axM
</pre></example>

<para>More generally, use the character class notation <code>[=c=]</code>
with <samp>-</samp> (or any other character) in place of the <samp>c</samp>:
</para>
<example endspaces=" ">
<pre xml:space="preserve">tr -d '[=-=]axM'
</pre></example>

<para>Note how single quotes are used in the above example to protect the
square brackets from interpretation by a shell.
</para>
</listitem></itemize>


</subsection>
</section>
<node name="expand-invocation" spaces=" "><nodename>expand invocation</nodename><nodenext automatic="on">unexpand invocation</nodenext><nodeprev automatic="on">tr invocation</nodeprev><nodeup automatic="on">Operating on characters</nodeup></node>
<section spaces=" "><sectiontitle><command>expand</command>: Convert tabs to spaces</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">expand</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">tabs to spaces, converting</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">converting tabs to spaces</indexterm></cindex>

<para><command>expand</command> writes the contents of each given <var>file</var>, or standard
input if none are given or for a <var>file</var> of <samp>-</samp>, to standard
output, with tab characters converted to the appropriate number of
spaces.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">expand [<var>option</var>]&dots; [<var>file</var>]&dots;
</pre></example>

<para>By default, <command>expand</command> converts all tabs to spaces.  It preserves
backspace characters in the output; they decrement the column count for
tab calculations.  The default action is equivalent to <option>-t 8</option> (set
tabs every 8 columns).
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-t <var>tab1</var>[,<var>tab2</var>]&dots;</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--tabs=<var>tab1</var>[,<var>tab2</var>]&dots;</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-t</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;tabs</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">tab stops, setting</indexterm></cindex>
<para>If only one tab stop is given, set the tabs <var>tab1</var> spaces apart
(default is 8).  Otherwise, set the tabs at columns <var>tab1</var>,
<var>tab2</var>, &dots; (numbered from 0), and replace any tabs beyond the
last tab stop given with single spaces.  Tab stops can be separated by
blanks as well as by commas.
</para>
<para>For compatibility, GNU <command>expand</command> also accepts the obsolete
option syntax, <option>-<var>t1</var>[,<var>t2</var>]&dots;</option>.  New scripts
should use <option>-t <var>t1</var>[,<var>t2</var>]&dots;</option> instead.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-i</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--initial</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-i</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;initial</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">initial tabs, converting</indexterm></cindex>
<para>Only convert initial tabs (those that precede all non-space or non-tab
characters) on each line to spaces.
</para>
</tableitem></tableentry></table>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="unexpand-invocation" spaces=" "><nodename>unexpand invocation</nodename><nodeprev automatic="on">expand invocation</nodeprev><nodeup automatic="on">Operating on characters</nodeup></node>
<section spaces=" "><sectiontitle><command>unexpand</command>: Convert spaces to tabs</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">unexpand</indexterm></pindex>

<para><command>unexpand</command> writes the contents of each given <var>file</var>, or
standard input if none are given or for a <var>file</var> of <samp>-</samp>, to
standard output, converting blanks at the beginning of each line into
as many tab characters as needed.  In the default <acronym><acronymword>POSIX</acronymword></acronym>
locale, a <dfn>blank</dfn> is a space or a tab; other locales may specify
additional blank characters.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">unexpand [<var>option</var>]&dots; [<var>file</var>]&dots;
</pre></example>

<para>By default, <command>unexpand</command> converts only initial blanks (those
that precede all non-blank characters) on each line.  It
preserves backspace characters in the output; they decrement the column
count for tab calculations.  By default, tabs are set at every 8th
column.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-t <var>tab1</var>[,<var>tab2</var>]&dots;</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--tabs=<var>tab1</var>[,<var>tab2</var>]&dots;</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-t</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;tabs</indexterm></indexcommand>
<para>If only one tab stop is given, set the tabs <var>tab1</var> columns apart
instead of the default 8.  Otherwise, set the tabs at columns
<var>tab1</var>, <var>tab2</var>, &dots; (numbered from 0), and leave blanks
beyond the tab stops given unchanged.  Tab stops can be separated by
blanks as well as by commas.  This option implies the <option>-a</option> option.
</para>
<para>For compatibility, GNU <command>unexpand</command> supports the obsolete option syntax,
<option>-<var>tab1</var>[,<var>tab2</var>]&dots;</option>, where tab stops must be
separated by commas.  (Unlike <option>-t</option>, this obsolete option does
not imply <option>-a</option>.)  New scripts should use <option>--first-only -t
<var>tab1</var>[,<var>tab2</var>]&dots;</option> instead.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-a</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--all</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-a</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;all</indexterm></indexcommand>
<para>Also convert all sequences of two or more blanks just before a tab stop,
even if they occur after non-blank characters in a line.
</para>
</tableitem></tableentry></table>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
</chapter>
<node name="Directory-listing" spaces=" "><nodename>Directory listing</nodename><nodenext automatic="on">Basic operations</nodenext><nodeprev automatic="on">Operating on characters</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>Directory listing</sectiontitle>

<para>This chapter describes the <command>ls</command> command and its variants <command>dir</command>
and <command>vdir</command>, which list information about files.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::               ">ls invocation</menunode><menudescription><pre xml:space="preserve">List directory contents.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::              ">dir invocation</menunode><menudescription><pre xml:space="preserve">Briefly ls.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">vdir invocation</menunode><menudescription><pre xml:space="preserve">Verbosely ls.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::        ">dircolors invocation</menunode><menudescription><pre xml:space="preserve">Color setup for ls, etc.
</pre></menudescription></menuentry></menu>


<node name="ls-invocation" spaces=" "><nodename>ls invocation</nodename><nodenext automatic="on">dir invocation</nodenext><nodeup automatic="on">Directory listing</nodeup></node>
<section spaces=" "><sectiontitle><command>ls</command>: List directory contents</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">ls</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">directory listing</indexterm></cindex>

<para>The <command>ls</command> program lists information about files (of any type,
including directories).  Options and file arguments can be intermixed
arbitrarily, as usual.
</para>
<para>For non-option command-line arguments that are directories, by default
<command>ls</command> lists the contents of directories, not recursively, and
omitting files with names beginning with <samp>.</samp>.  For other non-option
arguments, by default <command>ls</command> lists just the file name.  If no
non-option argument is specified, <command>ls</command> operates on the current
directory, acting as if it had been invoked with a single argument of <samp>.</samp>.
</para>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">LC_ALL</indexterm></vindex>
<para>By default, the output is sorted alphabetically, according to the locale
settings in effect.<footnote><para>If you use a non-<acronym><acronymword>POSIX</acronymword></acronym>
locale (e.g., by setting <env>LC_ALL</env> to <samp>en_US</samp>), then <command>ls</command> may
produce output that is sorted differently than you&textrsquo;re accustomed to.
In that case, set the <env>LC_ALL</env> environment variable to <samp>C</samp>.</para></footnote>
If standard output is
a terminal, the output is in columns (sorted vertically) and control
characters are output as question marks; otherwise, the output is listed
one per line and control characters are output as-is.
</para>
<para>Because <command>ls</command> is such a fundamental program, it has accumulated many
options over the years.  They are described in the subsections below;
within each section, options are listed alphabetically (ignoring case).
The division of options into the subsections is not absolute, since some
options affect more than one aspect of <command>ls</command>&textrsquo;s operation.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">exit status of <command>ls</command></indexterm></cindex>
<para>Exit status:
</para>
<display endspaces=" ">
<pre xml:space="preserve">0 success
1 minor problems  (e.g., failure to access a file or directory not
  specified as a command line argument.  This happens when listing a
  directory in which entries are actively being removed or renamed.)
2 serious trouble (e.g., memory exhausted, invalid option, failure
  to access a file or directory specified as a command line argument
  or a directory loop)
</pre></display>

<para>Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::">Which files are listed</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">What information is listed</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Sorting the output</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Details about version sort</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">General output formatting</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Formatting file timestamps</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Formatting the file names</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry></menu>


<node name="Which-files-are-listed" spaces=" "><nodename>Which files are listed</nodename><nodenext automatic="on">What information is listed</nodenext><nodeup automatic="on">ls invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>Which files are listed</sectiontitle>

<para>These options determine which files <command>ls</command> lists information for.
By default, <command>ls</command> lists files and the contents of any
directories on the command line, except that in directories it ignores
files whose names start with <samp>.</samp>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-a</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--all</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-a</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;all</indexterm></indexcommand>
<para>In directories, do not ignore file names that start with <samp>.</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-A</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--almost-all</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-A</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;almost-all</indexterm></indexcommand>
<para>In directories, do not ignore all file names that start with <samp>.</samp>;
ignore only <file>.</file> and <file>..</file>.  The <option>--all</option> (<option>-a</option>)
option overrides this option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-B</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--ignore-backups</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-B</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;ignore-backups</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">backup files, ignoring</indexterm></cindex>
<para>In directories, ignore files that end with <samp>~</samp>.  This option is
equivalent to <samp>--ignore='*~' --ignore='.*~'</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-d</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--directory</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-d</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;directory</indexterm></indexcommand>
<para>List just the names of directories, as with other types of files, rather
than listing their contents.
<!-- c The following sentence is the same as the one for -F. -->
Do not follow symbolic links listed on the
command line unless the <option>--dereference-command-line</option> (<option>-H</option>),
<option>--dereference</option> (<option>-L</option>), or
<option>--dereference-command-line-symlink-to-dir</option> options are specified.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-H</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--dereference-command-line</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-H</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;dereference-command-line</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">symbolic links, dereferencing</indexterm></cindex>
<para>If a command line argument specifies a symbolic link, show information
for the file the link references rather than for the link itself.
</para>
<itemx spaces=" "><itemformat command="samp">--dereference-command-line-symlink-to-dir</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;dereference-command-line-symlink-to-dir</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">symbolic links, dereferencing</indexterm></cindex>
<para>Do not dereference symbolic links, with one exception:
if a command line argument specifies a symbolic link that refers to
a directory, show information for that directory rather than for the
link itself.
This is the default behavior when no other dereferencing-related
option has been specified (<option>--classify</option> (<option>-F</option>),
<option>--directory</option> (<option>-d</option>),
(<option>-l</option>),
<option>--dereference</option> (<option>-L</option>), or
<option>--dereference-command-line</option> (<option>-H</option>)).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--group-directories-first</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;group-directories-first</indexterm></indexcommand>
<para>Group all the directories before the files and then sort the
directories and the files separately using the selected sort key
(see &textndash;sort option).
That is, this option specifies a primary sort key,
and the &textndash;sort option specifies a secondary key.
However, any use of <option>--sort=none</option>
(<option>-U</option>) disables this option altogether.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--hide=PATTERN</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;hide=<var>pattern</var></indexterm></indexcommand>
<para>In directories, ignore files whose names match the shell pattern
<var>pattern</var>, unless the <option>--all</option> (<option>-a</option>) or
<option>--almost-all</option> (<option>-A</option>) is also given.  This
option acts like <option>--ignore=<var>pattern</var></option> except that it has no
effect if <option>--all</option> (<option>-a</option>) or <option>--almost-all</option>
(<option>-A</option>) is also given.
</para>
<para>This option can be useful in shell aliases.  For example, if
<command>lx</command> is an alias for <samp>ls --hide='*~'</samp> and <command>ly</command> is
an alias for <samp>ls --ignore='*~'</samp>, then the command <samp>lx -A</samp>
lists the file <file>README~</file> even though <samp>ly -A</samp> would not.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-I <var>pattern</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--ignore=<var>pattern</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-I</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;ignore=<var>pattern</var></indexterm></indexcommand>
<para>In directories, ignore files whose names match the shell pattern
(not regular expression) <var>pattern</var>.  As
in the shell, an initial <samp>.</samp> in a file name does not match a
wildcard at the start of <var>pattern</var>.  Sometimes it is useful
to give this option several times.  For example,
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">$ ls --ignore='.??*' --ignore='.[^.]' --ignore='#*'
</pre></smallexample>

<para>The first option ignores names of length 3 or more that start with <samp>.</samp>,
the second ignores all two-character names that start with <samp>.</samp>
except <samp>..</samp>, and the third ignores names that start with <samp>#</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-L</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--dereference</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-L</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;dereference</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">symbolic links, dereferencing</indexterm></cindex>
<para>When showing file information for a symbolic link, show information
for the file the link references rather than the link itself.
However, even with this option, <command>ls</command> still prints the name
of the link itself, not the name of the file that the link points to.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-R</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--recursive</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-R</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;recursive</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">recursive directory listing</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">directory listing, recursive</indexterm></cindex>
<para>List the contents of all directories recursively.
</para>
</tableitem></tableentry></table>


</subsection>
<node name="What-information-is-listed" spaces=" "><nodename>What information is listed</nodename><nodenext automatic="on">Sorting the output</nodenext><nodeprev automatic="on">Which files are listed</nodeprev><nodeup automatic="on">ls invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>What information is listed</sectiontitle>

<para>These options affect the information that <command>ls</command> displays.  By
default, only file names are shown.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">--author</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;author</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">hurd, author, printing</indexterm></cindex>
<para>List each file&textrsquo;s author when producing long format directory listings.
In GNU/Hurd, file authors can differ from their owners, but in other
operating systems the two are the same.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-D</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--dired</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-D</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;dired</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">dired Emacs mode support</indexterm></cindex>
<para>With the long listing (<option>-l</option>) format, print an additional line after
the main output:
</para>
<example endspaces=" ">
<pre xml:space="preserve">//DIRED// <var>beg1</var> <var>end1</var> <var>beg2</var> <var>end2</var> &dots;
</pre></example>

<noindent></noindent>
<para>The <var>begn</var> and <var>endn</var> are unsigned integers that record the
byte position of the beginning and end of each file name in the output.
This makes it easy for Emacs to find the names, even when they contain
unusual characters such as space or newline, without fancy searching.
</para>
<para>If directories are being listed recursively (<option>-R</option>), output a similar
line with offsets for each subdirectory name:
</para>
<example endspaces=" ">
<pre xml:space="preserve">//SUBDIRED// <var>beg1</var> <var>end1</var> &dots;
</pre></example>

<para>Finally, output a line of the form:
</para>
<example endspaces=" ">
<pre xml:space="preserve">//DIRED-OPTIONS// --quoting-style=<var>word</var>
</pre></example>

<noindent></noindent>
<para>where <var>word</var> is the quoting style (<pxref><xrefnodename>Formatting the file names</xrefnodename></pxref>).
</para>
<para>Here is an actual example:
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ mkdir -p a/sub/deeper a/sub2
$ touch a/f1 a/f2
$ touch a/sub/deeper/file
$ ls -gloRF --dired a
  a:
  total 8
  -rw-r--r-- 1    0 Jun 10 12:27 f1
  -rw-r--r-- 1    0 Jun 10 12:27 f2
  drwxr-xr-x 3 4096 Jun 10 12:27 sub/
  drwxr-xr-x 2 4096 Jun 10 12:27 sub2/

  a/sub:
  total 4
  drwxr-xr-x 2 4096 Jun 10 12:27 deeper/

  a/sub/deeper:
  total 0
  -rw-r--r-- 1 0 Jun 10 12:27 file

  a/sub2:
  total 0
//DIRED// 48 50 84 86 120 123 158 162 217 223 282 286
//SUBDIRED// 2 3 167 172 228 240 290 296
//DIRED-OPTIONS// --quoting-style=literal
</pre></example>

<para>Note that the pairs of offsets on the <samp>//DIRED//</samp> line above delimit
these names: <file>f1</file>, <file>f2</file>, <file>sub</file>, <file>sub2</file>, <file>deeper</file>,
<file>file</file>.
The offsets on the <samp>//SUBDIRED//</samp> line delimit the following
directory names: <file>a</file>, <file>a/sub</file>, <file>a/sub/deeper</file>, <file>a/sub2</file>.
</para>
<para>Here is an example of how to extract the fifth entry name, <samp>deeper</samp>,
corresponding to the pair of offsets, 222 and 228:
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ ls -gloRF --dired a &gt; out
$ dd bs=1 skip=222 count=6 &lt; out 2&gt;/dev/null; echo
deeper
</pre></example>

<para>Note that although the listing above includes a trailing slash
for the <samp>deeper</samp> entry, the offsets select the name without
the trailing slash.  However, if you invoke <command>ls</command> with <option>--dired</option>
along with an option like <option>--escape</option> (aka <option>-b</option>) and operate
on a file whose name contains special characters, notice that the backslash
<emph>is</emph> included:
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ touch 'a b'
$ ls -blog --dired 'a b'
  -rw-r--r-- 1 0 Jun 10 12:28 a\ b
//DIRED// 30 34
//DIRED-OPTIONS// --quoting-style=escape
</pre></example>

<para>If you use a quoting style that adds quote marks
(e.g., <option>--quoting-style=c</option>), then the offsets include the quote marks.
So beware that the user may select the quoting style via the environment
variable <env>QUOTING_STYLE</env>.  Hence, applications using <option>--dired</option>
should either specify an explicit <option>--quoting-style=literal</option> option
(aka <option>-N</option> or <option>--literal</option>) on the command line, or else be
prepared to parse the escaped names.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--full-time</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;full-time</indexterm></indexcommand>
<para>Produce long format directory listings, and list times in full.  It is
equivalent to using <option>--format=long</option> with
<option>--time-style=full-iso</option> (<pxref><xrefnodename>Formatting file timestamps</xrefnodename></pxref>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-g</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-g</indexterm></indexcommand>
<para>Produce long format directory listings, but don&textrsquo;t display owner information.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-G</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--no-group</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-G</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;no-group</indexterm></indexcommand>
<para>Inhibit display of group information in a long format directory listing.
(This is the default in some non-<sc>gnu</sc> versions of <command>ls</command>, so we
provide this option for compatibility.)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-h</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--human-readable</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-h</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;human-readable</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">human-readable output</indexterm></cindex>
<para>Append a size letter to each size, such as <samp>M</samp> for mebibytes.
Powers of 1024 are used, not 1000; <samp>M</samp> stands for 1,048,576 bytes.
This option is equivalent to <option>--block-size=human-readable</option>.
Use the <option>--si</option> option if you prefer powers of 1000.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-i</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--inode</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-i</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;inode</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">inode number, printing</indexterm></cindex>
<para>Print the inode number (also called the file serial number and index
number) of each file to the left of the file name.  (This number
uniquely identifies each file within a particular file system.)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-l</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--format=long</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--format=verbose</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-l</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;format</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">long ls <r>format</r></indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">verbose ls <r>format</r></indexterm></indexcommand>
<para>In addition to the name of each file, print the file type, file mode bits,
number of hard links, owner name, group name, size, and
timestamp (<pxref><xrefnodename>Formatting file timestamps</xrefnodename></pxref>), normally
the modification time.  Print question marks for information that
cannot be determined.
</para>
<para>Normally the size is printed as a byte count without punctuation, but
this can be overridden (<pxref><xrefnodename>Block size</xrefnodename></pxref>).  For example, <option>-h</option>
prints an abbreviated, human-readable count, and
<samp>--block-size=&quot;'1&quot;</samp> prints a byte count with the thousands
separator of the current locale.
</para>
<para>For each directory that is listed, preface the files with a line
<samp>total <var>blocks</var></samp>, where <var>blocks</var> is the total disk allocation
for all files in that directory.  The block size currently defaults to 1024
bytes, but this can be overridden (<pxref><xrefnodename>Block size</xrefnodename></pxref>).
The <var>blocks</var> computed counts each hard link separately;
this is arguably a deficiency.
</para>
<para>The file type is one of the following characters:
</para>
<!-- c The commented-out entries are ones we're not sure about. -->

<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">-</itemformat></item>
</tableterm><tableitem><para>regular file
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">b</itemformat></item>
</tableterm><tableitem><para>block special file
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">c</itemformat></item>
</tableterm><tableitem><para>character special file
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">C</itemformat></item>
</tableterm><tableitem><para>high performance (&textldquo;contiguous data&textrdquo;) file
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">d</itemformat></item>
</tableterm><tableitem><para>directory
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">D</itemformat></item>
</tableterm><tableitem><para>door (Solaris 2.5 and up)
<!-- c @item F -->
<!-- c semaphore, if this is a distinct file type -->
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">l</itemformat></item>
</tableterm><tableitem><para>symbolic link
<!-- c @item m -->
<!-- c multiplexed file (7th edition Unix; obsolete) -->
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">M</itemformat></item>
</tableterm><tableitem><para>off-line (&textldquo;migrated&textrdquo;) file (Cray DMF)
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">n</itemformat></item>
</tableterm><tableitem><para>network special file (HP-UX)
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">p</itemformat></item>
</tableterm><tableitem><para>FIFO (named pipe)
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">P</itemformat></item>
</tableterm><tableitem><para>port (Solaris 10 and up)
<!-- c @item Q -->
<!-- c message queue, if this is a distinct file type -->
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">s</itemformat></item>
</tableterm><tableitem><para>socket
<!-- c @item S -->
<!-- c shared memory object, if this is a distinct file type -->
<!-- c @item T -->
<!-- c typed memory object, if this is a distinct file type -->
<!-- c @item w -->
<!-- c whiteout (4.4BSD; not implemented) -->
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">?</itemformat></item>
</tableterm><tableitem><para>some other file type
</para></tableitem></tableentry></table>

<cindex index="cp" spaces=" "><indexterm index="cp">permissions, output by <command>ls</command></indexterm></cindex>
<para>The file mode bits listed are similar to symbolic mode specifications
(<pxref><xrefnodename>Symbolic Modes</xrefnodename></pxref>).  But <command>ls</command> combines multiple bits into the
third character of each set of permissions as follows:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">s</itemformat></item>
</tableterm><tableitem><para>If the set-user-ID or set-group-ID bit and the corresponding executable bit
are both set.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">S</itemformat></item>
</tableterm><tableitem><para>If the set-user-ID or set-group-ID bit is set but the corresponding
executable bit is not set.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">t</itemformat></item>
</tableterm><tableitem><para>If the restricted deletion flag or sticky bit, and the
other-executable bit, are both set.  The restricted deletion flag is
another name for the sticky bit.  <xref><xrefnodename>Mode Structure</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">T</itemformat></item>
</tableterm><tableitem><para>If the restricted deletion flag or sticky bit is set but the
other-executable bit is not set.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">x</itemformat></item>
</tableterm><tableitem><para>If the executable bit is set and none of the above apply.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-</itemformat></item>
</tableterm><tableitem><para>Otherwise.
</para></tableitem></tableentry></table>

<para>Following the file mode bits is a single character that specifies
whether an alternate access method such as an access control list
applies to the file.  When the character following the file mode bits is a
space, there is no alternate access method.  When it is a printing
character, then there is such a method.
</para>
<para>GNU <command>ls</command> uses a <samp>.</samp> character to indicate a file
with an SELinux security context, but no other alternate access method.
</para>
<para>A file with any other combination of alternate access methods
is marked with a <samp>+</samp> character.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-n</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--numeric-uid-gid</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-n</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;numeric-uid-gid</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">numeric uid and gid</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">numeric user and group IDs</indexterm></cindex>
<para>Produce long format directory listings, but
display numeric user and group IDs instead of the owner and group names.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-o</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-o</indexterm></indexcommand>
<para>Produce long format directory listings, but don&textrsquo;t display group information.
It is equivalent to using <option>--format=long</option> with <option>--no-group</option> .
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-s</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--size</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-s</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;size</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">disk allocation</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">size of files, reporting</indexterm></cindex>
<para>Print the disk allocation of each file to the left of the file name.
This is the amount of disk space used by the file, which is usually a
bit more than the file&textrsquo;s size, but it can be less if the file has holes.
</para>
<para>Normally the disk allocation is printed in units of
1024 bytes, but this can be overridden (<pxref><xrefnodename>Block size</xrefnodename></pxref>).
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">NFS mounts from BSD to HP-UX</indexterm></cindex>
<para>For files that are NFS-mounted from an HP-UX system to a BSD system,
this option reports sizes that are half the correct values.  On HP-UX
systems, it reports sizes that are twice the correct values for files
that are NFS-mounted from BSD systems.  This is due to a flaw in HP-UX;
it also affects the HP-UX <command>ls</command> program.
</para>
<itemx spaces=" "><itemformat command="samp">--si</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;si</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">SI output</indexterm></cindex>
<para>Append an SI-style abbreviation to each size, such as <samp>M</samp> for
megabytes.  Powers of 1000 are used, not 1024; <samp>M</samp> stands for
1,000,000 bytes.  This option is equivalent to
<option>--block-size=si</option>.  Use the <option>-h</option> or
<option>--human-readable</option> option if
you prefer powers of 1024.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-Z</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--context</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-Z</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;context</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">SELinux</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">security context</indexterm></cindex>
<para>Display the SELinux security context or <samp>?</samp> if none is found.
When used with the <option>-l</option> option, print the security context
to the left of the size column.
</para>
</tableitem></tableentry></table>


</subsection>
<node name="Sorting-the-output" spaces=" "><nodename>Sorting the output</nodename><nodenext automatic="on">Details about version sort</nodenext><nodeprev automatic="on">What information is listed</nodeprev><nodeup automatic="on">ls invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>Sorting the output</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">sorting <command>ls</command> output</indexterm></cindex>
<para>These options change the order in which <command>ls</command> sorts the information
it outputs.  By default, sorting is done by character code
(e.g., <acronym><acronymword>ASCII</acronymword></acronym> order).
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-c</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--time=ctime</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--time=status</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-c</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;time</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">ctime<r>, printing or sorting by</r></indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">status time<r>, printing or sorting by</r></indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">use time<r>, printing or sorting files by</r></indexterm></indexcommand>
<para>If the long listing format (e.g., <option>-l</option>, <option>-o</option>) is being used,
print the status change time (the <samp>ctime</samp> in the inode) instead of
the modification time.
When explicitly sorting by time (<option>--sort=time</option> or <option>-t</option>)
or when not using a long listing format,
sort according to the status change time.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-f</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-f</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">unsorted directory listing</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">directory order, listing by</indexterm></cindex>
<para>Primarily, like <option>-U</option>&textmdash;do not sort; list the files in whatever
order they are stored in the directory.  But also enable <option>-a</option> (list
all files) and disable <option>-l</option>, <option>--color</option>, and <option>-s</option> (if they
were specified before the <option>-f</option>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-r</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--reverse</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-r</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;reverse</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">reverse sorting</indexterm></cindex>
<para>Reverse whatever the sorting method is&textmdash;e.g., list files in reverse
alphabetical order, youngest first, smallest first, or whatever.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-S</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--sort=size</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-S</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;sort</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">size of files<r>, sorting files by</r></indexterm></indexcommand>
<para>Sort by file size, largest first.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-t</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--sort=time</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-t</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;sort</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">modification time<r>, sorting files by</r></indexterm></indexcommand>
<para>Sort by modification time (the <samp>mtime</samp> in the inode), newest first.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-u</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--time=atime</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--time=access</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--time=use</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-u</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;time</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">use time<r>, printing or sorting files by</r></indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">atime<r>, printing or sorting files by</r></indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">access time<r>, printing or sorting files by</r></indexterm></indexcommand>
<para>If the long listing format (e.g., <option>--format=long</option>) is being used,
print the last access time (the <samp>atime</samp> in the inode).
When explicitly sorting by time (<option>--sort=time</option> or <option>-t</option>)
or when not using a long listing format, sort according to the access time.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-U</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--sort=none</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-U</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;sort</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">none<r>, sorting option for <command>ls</command></r></indexterm></indexcommand>
<para>Do not sort; list the files in whatever order they are
stored in the directory.  (Do not do any of the other unrelated things
that <option>-f</option> does.)  This is especially useful when listing very large
directories, since not doing any sorting can be noticeably faster.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-v</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--sort=version</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-v</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;sort</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">version<r>, sorting option for <command>ls</command></r></indexterm></indexcommand>
<para>Sort by version name and number, lowest first.  It behaves like a default
sort, except that each sequence of decimal digits is treated numerically
as an index/version number.  (<xref><xrefnodename>Details about version sort</xrefnodename></xref>.)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-X</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--sort=extension</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-X</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;sort</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">extension<r>, sorting files by</r></indexterm></indexcommand>
<para>Sort directory contents alphabetically by file extension (characters
after the last <samp>.</samp>); files with no extension are sorted first.
</para>
</tableitem></tableentry></table>


</subsection>
<node name="Details-about-version-sort" spaces=" "><nodename>Details about version sort</nodename><nodenext automatic="on">General output formatting</nodenext><nodeprev automatic="on">Sorting the output</nodeprev><nodeup automatic="on">ls invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>Details about version sort</sectiontitle>

<para>Version sorting handles the fact that file names frequently include indices or
version numbers.  Standard sorting usually does not produce the order that one
expects because comparisons are made on a character-by-character basis.
Version sorting is especially useful when browsing directories that contain
many files with indices/version numbers in their names:
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ ls -1            $ ls -1v
abc.zml-1.gz       abc.zml-1.gz
abc.zml-12.gz      abc.zml-2.gz
abc.zml-2.gz       abc.zml-12.gz
</pre></example>

<para>Version-sorted strings are compared such that if <var>ver1</var> and <var>ver2</var>
are version numbers and <var>prefix</var> and <var>suffix</var> (<var>suffix</var> matching
the regular expression <samp>(\.[A-Za-z~][A-Za-z0-9~]*)*</samp>) are strings then
<var>ver1</var> &lt; <var>ver2</var> implies that the name composed of
&textldquo;<var>prefix</var> <var>ver1</var> <var>suffix</var>&textrdquo; sorts before
&textldquo;<var>prefix</var> <var>ver2</var> <var>suffix</var>&textrdquo;.
</para>
<para>Note also that leading zeros of numeric parts are ignored:
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ ls -1            $ ls -1v
abc-1.007.tgz      abc-1.01a.tgz
abc-1.012b.tgz     abc-1.007.tgz
abc-1.01a.tgz      abc-1.012b.tgz
</pre></example>

<para>This functionality is implemented using gnulib&textrsquo;s <code>filevercmp</code> function,
which has some caveats worth noting.
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet" /></itemprepend>
<listitem spaces=" "><prepend>&bullet;</prepend><para><env>LC_COLLATE</env> is ignored, which means <samp>ls -v</samp> and <samp>sort -V</samp>
will sort non-numeric prefixes as if the <env>LC_COLLATE</env> locale category
was set to <samp>C</samp>.
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>Some suffixes will not be matched by the regular
expression mentioned above.  Consequently these examples may
not sort as you expect:
</para>
<example endspaces=" ">
<pre xml:space="preserve">abc-1.2.3.4.7z
abc-1.2.3.7z
</pre></example>

<example endspaces=" ">
<pre xml:space="preserve">abc-1.2.3.4.x86_64.rpm
abc-1.2.3.x86_64.rpm
</pre></example>
</listitem></itemize>

</subsection>
<node name="General-output-formatting" spaces=" "><nodename>General output formatting</nodename><nodenext automatic="on">Formatting file timestamps</nodenext><nodeprev automatic="on">Details about version sort</nodeprev><nodeup automatic="on">ls invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>General output formatting</sectiontitle>

<para>These options affect the appearance of the overall output.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-1</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--format=single-column</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-1</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;format</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">single-column <r>output of files</r></indexterm></indexcommand>
<para>List one file per line.  This is the default for <command>ls</command> when standard
output is not a terminal.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-C</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--format=vertical</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-C</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;format</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">vertical <r>sorted files in columns</r></indexterm></indexcommand>
<para>List files in columns, sorted vertically.  This is the default for
<command>ls</command> if standard output is a terminal.  It is always the default
for the <command>dir</command> program.
<sc>gnu</sc> <command>ls</command> uses variable width columns to display as many files as
possible in the fewest lines.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--color [=<var>when</var>]</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;color</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">color, distinguishing file types with</indexterm></cindex>
<para>Specify whether to use color for distinguishing file types.  <var>when</var>
may be omitted, or one of:
</para><itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet" /></itemprepend>
<listitem spaces=" "><prepend>&bullet;</prepend><para>none
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">none <r>color option</r></indexterm></vindex>
- Do not use color at all.  This is the default.
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>auto
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">auto <r>color option</r></indexterm></vindex>
<cindex index="cp" spaces=" "><indexterm index="cp">terminal, using color iff</indexterm></cindex>
- Only use color if standard output is a terminal.
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>always
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">always <r>color option</r></indexterm></vindex>
- Always use color.
</para></listitem></itemize>
<para>Specifying <option>--color</option> and no <var>when</var> is equivalent to
<option>--color=always</option>.
Piping a colorized listing through a pager like <command>more</command> or
<command>less</command> usually produces unreadable results.  However, using
<code>more -f</code> does seem to work.
</para>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">LS_COLORS</indexterm></vindex>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">SHELL <r>environment variable, and color</r></indexterm></vindex>
<para>Note that using the <option>--color</option> option may incur a noticeable
performance penalty when run in a directory with very many entries,
because the default settings require that <command>ls</command> <code>stat</code> every
single file it lists.
However, if you would like most of the file-type coloring
but can live without the other coloring options (e.g.,
executable, orphan, sticky, other-writable, capability), use
<command>dircolors</command> to set the <env>LS_COLORS</env> environment variable like this,
</para><example endspaces=" ">
<pre xml:space="preserve">eval $(dircolors -p | perl -pe \
  's/^((CAP|S[ET]|O[TR]|M|E)\w+).*/$1 00/' | dircolors -)
</pre></example>
<para>and on a <code>dirent.d_type</code>-capable file system, <command>ls</command>
will perform only one <code>stat</code> call per command line argument.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-F</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--classify</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--indicator-style=classify</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-F</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;classify</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;indicator-style</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">file type and executables, marking</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">executables and file type, marking</indexterm></cindex>
<para>Append a character to each file name indicating the file type.  Also,
for regular files that are executable, append <samp>*</samp>.  The file type
indicators are <samp>/</samp> for directories, <samp>&arobase;</samp> for symbolic links,
<samp>|</samp> for FIFOs, <samp>=</samp> for sockets, <samp>&gt;</samp> for doors,
and nothing for regular files.
<!-- c The following sentence is the same as the one for -d. -->
Do not follow symbolic links listed on the
command line unless the <option>--dereference-command-line</option> (<option>-H</option>),
<option>--dereference</option> (<option>-L</option>), or
<option>--dereference-command-line-symlink-to-dir</option> options are specified.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--file-type</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--indicator-style=file-type</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;file-type</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;indicator-style</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">file type, marking</indexterm></cindex>
<para>Append a character to each file name indicating the file type.  This is
like <option>-F</option>, except that executables are not marked.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--indicator-style=<var>word</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;indicator-style</indexterm></indexcommand>
<para>Append a character indicator with style <var>word</var> to entry names,
as follows:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">none</itemformat></item>
</tableterm><tableitem><para>Do not append any character indicator; this is the default.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">slash</itemformat></item>
</tableterm><tableitem><para>Append <samp>/</samp> for directories.  This is the same as the <option>-p</option>
option.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">file-type</itemformat></item>
</tableterm><tableitem><para>Append <samp>/</samp> for directories, <samp>&arobase;</samp> for symbolic links, <samp>|</samp>
for FIFOs, <samp>=</samp> for sockets, and nothing for regular files.  This is
the same as the <option>--file-type</option> option.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">classify</itemformat></item>
</tableterm><tableitem><para>Append <samp>*</samp> for executable regular files, otherwise behave as for
<samp>file-type</samp>.  This is the same as the <option>-F</option> or
<option>--classify</option> option.
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-k</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--kibibytes</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-k</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;kibibytes</indexterm></indexcommand>
<para>Set the default block size to its normal value of 1024 bytes,
overriding any contrary specification in environment variables
(<pxref><xrefnodename>Block size</xrefnodename></pxref>).  This option is in turn overridden by the
<option>--block-size</option>, <option>-h</option> or <option>--human-readable</option>, and
<option>--si</option> options.
</para>
<para>The <option>-k</option> or <option>--kibibytes</option> option affects the
per-directory block count written by the <option>-l</option> and similar
options, and the size written by the <option>-s</option> or <option>--size</option>
option.  It does not affect the file size written by <option>-l</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-m</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--format=commas</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-m</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;format</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">commas<r>, outputting between files</r></indexterm></indexcommand>
<para>List files horizontally, with as many as will fit on each line,
separated by <samp>, </samp> (a comma and a space).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-p</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--indicator-style=slash</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-p</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;indicator-style</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">file type, marking</indexterm></cindex>
<para>Append a <samp>/</samp> to directory names.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-x</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--format=across</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--format=horizontal</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-x</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;format</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">across<r>, listing files</r></indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">horizontal<r>, listing files</r></indexterm></indexcommand>
<para>List the files in columns, sorted horizontally.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-T <var>cols</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--tabsize=<var>cols</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-T</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;tabsize</indexterm></indexcommand>
<para>Assume that each tab stop is <var>cols</var> columns wide.  The default is 8.
<command>ls</command> uses tabs where possible in the output, for efficiency.  If
<var>cols</var> is zero, do not use tabs at all.
</para>
<!-- c FIXME: remove in 2009, if Apple Terminal has been fixed for long enough. -->
<para>Some terminal emulators (at least Apple Terminal 1.5 (133) from Mac OS X 10.4.8)
do not properly align columns to the right of a TAB following a
non-<acronym><acronymword>ASCII</acronymword></acronym> byte.  If you use such a terminal emulator, use the
<option>-T0</option> option or put <code>TABSIZE=0</code> in your environment to tell
<command>ls</command> to align using spaces, not tabs.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-w</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--width=<var>cols</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-w</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;width</indexterm></indexcommand>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">COLUMNS</indexterm></vindex>
<para>Assume the screen is <var>cols</var> columns wide.  The default is taken
from the terminal settings if possible; otherwise the environment
variable <env>COLUMNS</env> is used if it is set; otherwise the default
is 80.
</para>
</tableitem></tableentry></table>


</subsection>
<node name="Formatting-file-timestamps" spaces=" "><nodename>Formatting file timestamps</nodename><nodenext automatic="on">Formatting the file names</nodenext><nodeprev automatic="on">General output formatting</nodeprev><nodeup automatic="on">ls invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>Formatting file timestamps</sectiontitle>

<para>By default, file timestamps are listed in abbreviated form, using
a date like <samp>Mar 30<spacecmd type="spc"/><spacecmd type="spc"/>2002</samp> for non-recent timestamps, and a
date-without-year and time like <samp>Mar 30 23:45</samp> for recent timestamps.
This format can change depending on the current locale as detailed below.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">clock skew</indexterm></cindex>
<para>A timestamp is considered to be <dfn>recent</dfn> if it is less than six
months old, and is not dated in the future.  If a timestamp dated
today is not listed in recent form, the timestamp is in the future,
which means you probably have clock skew problems which may break
programs like <command>make</command> that rely on file timestamps.
</para>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">TZ</indexterm></vindex>
<para>Time stamps are listed according to the time zone rules specified by
the <env>TZ</env> environment variable, or by the system default rules if
<env>TZ</env> is not set.  <xref><xrefnodename>TZ Variable</xrefnodename><xrefprinteddesc spaces=" ">Specifying the Time Zone
with <env>TZ</env></xrefprinteddesc><xrefinfofile spaces=" ">libc</xrefinfofile><xrefprintedname spaces=" ">The GNU C Library Reference Manual</xrefprintedname></xref>.
</para>
<para>The following option changes how file timestamps are printed.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">--time-style=<var>style</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;time-style</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">time style</indexterm></cindex>
<para>List timestamps in style <var>style</var>.  The <var>style</var> should
be one of the following:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">+<var>format</var></itemformat></item>
</tableterm><tableitem><vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">LC_TIME</indexterm></vindex>
<para>List timestamps using <var>format</var>, where <var>format</var> is interpreted
like the format argument of <command>date</command> (<pxref><xrefnodename>date invocation</xrefnodename></pxref>).
For example, <option>--time-style=&quot;+%Y-%m-%d %H:%M:%S&quot;</option> causes
<command>ls</command> to list timestamps like <samp>2002-03-30 23:45:56</samp>.  As
with <command>date</command>, <var>format</var>&textrsquo;s interpretation is affected by the
<env>LC_TIME</env> locale category.
</para>
<para>If <var>format</var> contains two format strings separated by a newline,
the former is used for non-recent files and the latter for recent
files; if you want output columns to line up, you may need to insert
spaces in one of the two formats.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">full-iso</itemformat></item>
</tableterm><tableitem><para>List timestamps in full using <acronym><acronymword>ISO</acronymword></acronym> 8601 date, time, and time zone
format with nanosecond precision, e.g., <samp>2002-03-30
23:45:56.477817180 -0700</samp>.  This style is equivalent to
<samp>+%Y-%m-%d %H:%M:%S.%N %z</samp>.
</para>
<para>This is useful because the time output includes all the information that
is available from the operating system.  For example, this can help
explain <command>make</command>&textrsquo;s behavior, since <acronym><acronymword>GNU</acronymword></acronym> <command>make</command>
uses the full timestamp to determine whether a file is out of date.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">long-iso</itemformat></item>
</tableterm><tableitem><para>List <acronym><acronymword>ISO</acronymword></acronym> 8601 date and time in minutes, e.g.,
<samp>2002-03-30 23:45</samp>.  These timestamps are shorter than
<samp>full-iso</samp> timestamps, and are usually good enough for everyday
work.  This style is equivalent to <samp>+%Y-%m-%d %H:%M</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">iso</itemformat></item>
</tableterm><tableitem><para>List <acronym><acronymword>ISO</acronymword></acronym> 8601 dates for non-recent timestamps (e.g.,
<samp>2002-03-30<spacecmd type="spc"/></samp>), and <acronym><acronymword>ISO</acronymword></acronym> 8601 month, day, hour, and
minute for recent timestamps (e.g., <samp>03-30 23:45</samp>).  These
timestamps are uglier than <samp>long-iso</samp> timestamps, but they carry
nearly the same information in a smaller space and their brevity helps
<command>ls</command> output fit within traditional 80-column output lines.
The following two <command>ls</command> invocations are equivalent:
</para>
<example endspaces=" ">
<pre xml:space="preserve">newline='
'
ls -l --time-style=&quot;+%Y-%m-%d $newline%m-%d %H:%M&quot;
ls -l --time-style=&quot;iso&quot;
</pre></example>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">locale</itemformat></item>
</tableterm><tableitem><vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">LC_TIME</indexterm></vindex>
<para>List timestamps in a locale-dependent form.  For example, a Finnish
locale might list non-recent timestamps like <samp>maalis 30<spacecmd type="spc"/><spacecmd type="spc"/>2002</samp>
and recent timestamps like <samp>maalis 30 23:45</samp>.  Locale-dependent
timestamps typically consume more space than <samp>iso</samp> timestamps and
are harder for programs to parse because locale conventions vary so
widely, but they are easier for many people to read.
</para>
<para>The <env>LC_TIME</env> locale category specifies the timestamp format.  The
default <acronym><acronymword>POSIX</acronymword></acronym> locale uses timestamps like <samp>Mar 30<spacecmd type="nl"/><spacecmd type="spc"/>2002</samp> and <samp>Mar 30 23:45</samp>; in this locale, the following two
<command>ls</command> invocations are equivalent:
</para>
<example endspaces=" ">
<pre xml:space="preserve">newline='
'
ls -l --time-style=&quot;+%b %e  %Y$newline%b %e %H:%M&quot;
ls -l --time-style=&quot;locale&quot;
</pre></example>

<para>Other locales behave differently.  For example, in a German locale,
<option>--time-style=&quot;locale&quot;</option> might be equivalent to
<option>--time-style=&quot;+%e. %b %Y $newline%e. %b %H:%M&quot;</option>
and might generate timestamps like <samp>30. M<accent type="uml" bracketed="off">a</accent>r 2002<spacecmd type="spc"/></samp> and
<samp>30. M<accent type="uml" bracketed="off">a</accent>r 23:45</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">posix-<var>style</var></itemformat></item>
</tableterm><tableitem><vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">LC_TIME</indexterm></vindex>
<para>List <acronym><acronymword>POSIX</acronymword></acronym>-locale timestamps if the <env>LC_TIME</env> locale
category is <acronym><acronymword>POSIX</acronymword></acronym>, <var>style</var> timestamps otherwise.  For
example, the <samp>posix-long-iso</samp> style lists
timestamps like <samp>Mar 30<spacecmd type="spc"/><spacecmd type="spc"/>2002</samp> and <samp>Mar 30 23:45</samp> when in
the <acronym><acronymword>POSIX</acronymword></acronym> locale, and like <samp>2002-03-30 23:45</samp> otherwise.
</para></tableitem></tableentry></table>
</tableitem></tableentry></table>

<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">TIME_STYLE</indexterm></vindex>
<para>You can specify the default value of the <option>--time-style</option> option
with the environment variable <env>TIME_STYLE</env>; if <env>TIME_STYLE</env> is not set
the default style is <samp>locale</samp>.  <acronym><acronymword>GNU</acronymword></acronym> Emacs 21.3 and
later use the <option>--dired</option> option and therefore can parse any date
format, but if you are using Emacs 21.1 or 21.2 and specify a
non-<acronym><acronymword>POSIX</acronymword></acronym> locale you may need to set
<samp>TIME_STYLE=&quot;posix-long-iso&quot;</samp>.
</para>
<para>To avoid certain denial-of-service attacks, timestamps that would be
longer than 1000 bytes may be treated as errors.
</para>

</subsection>
<node name="Formatting-the-file-names" spaces=" "><nodename>Formatting the file names</nodename><nodeprev automatic="on">Formatting file timestamps</nodeprev><nodeup automatic="on">ls invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>Formatting the file names</sectiontitle>

<para>These options change how file names themselves are printed.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-b</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--escape</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--quoting-style=escape</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-b</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;escape</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;quoting-style</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">backslash sequences for file names</indexterm></cindex>
<para>Quote nongraphic characters in file names using alphabetic and octal
backslash sequences like those used in C.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-N</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--literal</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--quoting-style=literal</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-N</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;literal</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;quoting-style</indexterm></indexcommand>
<para>Do not quote file names.  However, with <command>ls</command> nongraphic
characters are still printed as question marks if the output is a
terminal and you do not specify the <option>--show-control-chars</option>
option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-q</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--hide-control-chars</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-q</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;hide-control-chars</indexterm></indexcommand>
<para>Print question marks instead of nongraphic characters in file names.
This is the default if the output is a terminal and the program is
<command>ls</command>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-Q</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--quote-name</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--quoting-style=c</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-Q</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;quote-name</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;quoting-style</indexterm></indexcommand>
<para>Enclose file names in double quotes and quote nongraphic characters as
in C.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--quoting-style=<var>word</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;quoting-style</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">quoting style</indexterm></cindex>
<para>Use style <var>word</var> to quote file names and other strings that may
contain arbitrary characters.  The <var>word</var> should
be one of the following:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">literal</itemformat></item>
</tableterm><tableitem><para>Output strings as-is; this is the same as the <option>-N</option> or
<option>--literal</option> option.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">shell</itemformat></item>
</tableterm><tableitem><para>Quote strings for the shell if they contain shell metacharacters or would
cause ambiguous output.
The quoting is suitable for <acronym><acronymword>POSIX</acronymword></acronym>-compatible shells like
<command>bash</command>, but it does not always work for incompatible shells
like <command>csh</command>.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">shell-always</itemformat></item>
</tableterm><tableitem><para>Quote strings for the shell, even if they would normally not require quoting.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">c</itemformat></item>
</tableterm><tableitem><para>Quote strings as for C character string literals, including the
surrounding double-quote characters; this is the same as the
<option>-Q</option> or <option>--quote-name</option> option.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">escape</itemformat></item>
</tableterm><tableitem><para>Quote strings as for C character string literals, except omit the
surrounding double-quote
characters; this is the same as the <option>-b</option> or <option>--escape</option> option.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">clocale</itemformat></item>
</tableterm><tableitem><para>Quote strings as for C character string literals, except use
surrounding quotation marks appropriate for the
locale.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">locale</itemformat></item>
</tableterm><tableitem><!-- c Use @t instead of @samp to avoid duplicate quoting in some output styles. -->
<para>Quote strings as for C character string literals, except use
surrounding quotation marks appropriate for the locale, and quote
<t>`like this'</t> instead of <t>&quot;like
this&quot;</t> in the default C locale.  This looks nicer on many displays.
</para></tableitem></tableentry></table>

<para>You can specify the default value of the <option>--quoting-style</option> option
with the environment variable <env>QUOTING_STYLE</env>.  If that environment
variable is not set, the default value is <samp>literal</samp>, but this
default may change to <samp>shell</samp> in a future version of this package.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--show-control-chars</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;show-control-chars</indexterm></indexcommand>
<para>Print nongraphic characters as-is in file names.
This is the default unless the output is a terminal and the program is
<command>ls</command>.
</para>
</tableitem></tableentry></table>


</subsection>
</section>
<node name="dir-invocation" spaces=" "><nodename>dir invocation</nodename><nodenext automatic="on">vdir invocation</nodenext><nodeprev automatic="on">ls invocation</nodeprev><nodeup automatic="on">Directory listing</nodeup></node>
<section spaces=" "><sectiontitle><command>dir</command>: Briefly list directory contents</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">dir</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">directory listing, brief</indexterm></cindex>

<para><command>dir</command> is equivalent to <code>ls -C
-b</code>; that is, by default files are listed in columns, sorted vertically,
and special characters are represented by backslash escape sequences.
</para>
<para><xref><xrefnodename>ls invocation</xrefnodename><xrefinfoname spaces=" "><command>ls</command></xrefinfoname></xref>.
</para>

</section>
<node name="vdir-invocation" spaces=" "><nodename>vdir invocation</nodename><nodenext automatic="on">dircolors invocation</nodenext><nodeprev automatic="on">dir invocation</nodeprev><nodeup automatic="on">Directory listing</nodeup></node>
<section spaces=" "><sectiontitle><command>vdir</command>: Verbosely list directory contents</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">vdir</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">directory listing, verbose</indexterm></cindex>

<para><command>vdir</command> is equivalent to <code>ls -l
-b</code>; that is, by default files are listed in long format and special
characters are represented by backslash escape sequences.
</para>
</section>
<node name="dircolors-invocation" spaces=" "><nodename>dircolors invocation</nodename><nodeprev automatic="on">vdir invocation</nodeprev><nodeup automatic="on">Directory listing</nodeup></node>
<section spaces=" "><sectiontitle><command>dircolors</command>: Color setup for <command>ls</command></sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">dircolors</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">color setup</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">setup for color</indexterm></cindex>

<para><command>dircolors</command> outputs a sequence of shell commands to set up the
terminal for color output from <command>ls</command> (and <command>dir</command>, etc.).
Typical usage:
</para>
<example endspaces=" ">
<pre xml:space="preserve">eval &quot;`dircolors [<var>option</var>]&dots; [<var>file</var>]`&quot;
</pre></example>

<para>If <var>file</var> is specified, <command>dircolors</command> reads it to determine which
colors to use for which file types and extensions.  Otherwise, a
precompiled database is used.  For details on the format of these files,
run <samp>dircolors --print-database</samp>.
</para>
<para>To make <command>dircolors</command> read a <file>~/.dircolors</file> file if it
exists, you can put the following lines in your <file>~/.bashrc</file> (or
adapt them to your favorite shell):
</para>
<example endspaces=" ">
<pre xml:space="preserve">d=.dircolors
test -r $d &amp;&amp; eval &quot;$(dircolors $d)&quot;
</pre></example>

<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">LS_COLORS</indexterm></vindex>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">SHELL <r>environment variable, and color</r></indexterm></vindex>
<para>The output is a shell command to set the <env>LS_COLORS</env> environment
variable.  You can specify the shell syntax to use on the command line,
or <command>dircolors</command> will guess it from the value of the <env>SHELL</env>
environment variable.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">-b</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--sh</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--bourne-shell</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-b</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;sh</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;bourne-shell</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">Bourne shell syntax for color setup</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp"><command>sh</command> syntax for color setup</indexterm></cindex>
<para>Output Bourne shell commands.  This is the default if the <env>SHELL</env>
environment variable is set and does not end with <samp>csh</samp> or
<samp>tcsh</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-c</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--csh</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--c-shell</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-c</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;csh</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;c-shell</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">C shell syntax for color setup</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp"><command>csh</command> syntax for color setup</indexterm></cindex>
<para>Output C shell commands.  This is the default if <code>SHELL</code> ends with
<command>csh</command> or <command>tcsh</command>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-p</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--print-database</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-p</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;print-database</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">color database, printing</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">database for color setup, printing</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">printing color database</indexterm></cindex>
<para>Print the (compiled-in) default color configuration database.  This
output is itself a valid configuration file, and is fairly descriptive
of the possibilities.
</para>
</tableitem></tableentry></table>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
</chapter>
<node name="Basic-operations" spaces=" "><nodename>Basic operations</nodename><nodenext automatic="on">Special file types</nodenext><nodeprev automatic="on">Directory listing</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>Basic operations</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">manipulating files</indexterm></cindex>

<para>This chapter describes the commands for basic file manipulation:
copying, moving (renaming), and deleting (removing).
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::               ">cp invocation</menunode><menudescription><pre xml:space="preserve">Copy files.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::               ">dd invocation</menunode><menudescription><pre xml:space="preserve">Convert and copy a file.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::          ">install invocation</menunode><menudescription><pre xml:space="preserve">Copy files and set attributes.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::               ">mv invocation</menunode><menudescription><pre xml:space="preserve">Move (rename) files.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::               ">rm invocation</menunode><menudescription><pre xml:space="preserve">Remove files or directories.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">shred invocation</menunode><menudescription><pre xml:space="preserve">Remove files more securely.
</pre></menudescription></menuentry></menu>


<node name="cp-invocation" spaces=" "><nodename>cp invocation</nodename><nodenext automatic="on">dd invocation</nodenext><nodeup automatic="on">Basic operations</nodeup></node>
<section spaces=" "><sectiontitle><command>cp</command>: Copy files and directories</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">cp</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">copying files and directories</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">files, copying</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">directories, copying</indexterm></cindex>

<para><command>cp</command> copies files (or, optionally, directories).  The copy is
completely independent of the original.  You can either copy one file to
another, or copy arbitrarily many files to a destination directory.
Synopses:
</para>
<example endspaces=" ">
<pre xml:space="preserve">cp [<var>option</var>]&dots; [-T] <var>source</var> <var>dest</var>
cp [<var>option</var>]&dots; <var>source</var>&dots; <var>directory</var>
cp [<var>option</var>]&dots; -t <var>directory</var> <var>source</var>&dots;
</pre></example>

<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet" /></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para>If two file names are given, <command>cp</command> copies the first file to the
second.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>If the <option>--target-directory</option> (<option>-t</option>) option is given, or
failing that if the last file is a directory and the
<option>--no-target-directory</option> (<option>-T</option>) option is not given,
<command>cp</command> copies each <var>source</var> file to the specified directory,
using the <var>source</var>s&textrsquo; names.
</para></listitem></itemize>

<para>Generally, files are written just as they are read.  For exceptions,
see the <option>--sparse</option> option below.
</para>
<para>By default, <command>cp</command> does not copy directories.  However, the
<option>-R</option>, <option>-a</option>, and <option>-r</option> options cause <command>cp</command> to
copy recursively by descending into source directories and copying files
to corresponding destination directories.
</para>
<para>When copying from a symbolic link, <command>cp</command> normally follows the
link only when not copying
recursively.  This default can be overridden with the
<option>--archive</option> (<option>-a</option>), <option>-d</option>, <option>--dereference</option>
(<option>-L</option>), <option>--no-dereference</option> (<option>-P</option>), and
<option>-H</option> options.  If more than one of these options is specified,
the last one silently overrides the others.
</para>
<para>When copying to a symbolic link, <command>cp</command> follows the
link only when it refers to an existing regular file.
However, when copying to a dangling symbolic link, <command>cp</command>
refuses by default, and fails with a diagnostic, since the operation
is inherently dangerous.  This behavior is contrary to historical
practice and to <acronym><acronymword>POSIX</acronymword></acronym>.
Set <env>POSIXLY_CORRECT</env> to make <command>cp</command> attempt to create
the target of a dangling destination symlink, in spite of the possible risk.
Also, when an option like
<option>--backup</option> or <option>--link</option> acts to rename or remove the
destination before copying, <command>cp</command> renames or removes the
symbolic link rather than the file it points to.
</para>
<para>By default, <command>cp</command> copies the contents of special files only
when not copying recursively.  This default can be overridden with the
<option>--copy-contents</option> option.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">self-backups</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">backups, making only</indexterm></cindex>
<para><command>cp</command> generally refuses to copy a file onto itself, with the
following exception: if <option>--force --backup</option> is specified with
<var>source</var> and <var>dest</var> identical, and referring to a regular file,
<command>cp</command> will make a backup file, either regular or numbered, as
specified in the usual ways (<pxref><xrefnodename>Backup options</xrefnodename></pxref>).  This is useful when
you simply want to make a backup of an existing file before changing it.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">-a</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--archive</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-a</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;archive</indexterm></indexcommand>
<para>Preserve as much as possible of the structure and attributes of the
original files in the copy (but do not attempt to preserve internal
directory structure; i.e., <samp>ls -U</samp> may list the entries in a copied
directory in a different order).
Try to preserve SELinux security context and extended attributes (xattr),
but ignore any failure to do that and print no corresponding diagnostic.
Equivalent to <option>-dR --preserve=all</option> with the reduced diagnostics.
</para>
<itemx spaces=" "><itemformat command="samp">--attributes-only</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;attributes-only</indexterm></indexcommand>
<para>Preserve the specified attributes of the original files in the copy,
but do not copy any data.  See the <option>--preserve</option> option for
controlling which attributes to copy.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-b</itemformat></item>
<itemx spaces=" "><itemformat command="samp"><w><kbd>--backup</kbd>[=<var>method</var>]</w></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-b</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;backup</indexterm></indexcommand>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">VERSION_CONTROL</indexterm></vindex>
<cindex index="cp" spaces=" "><indexterm index="cp">backups, making</indexterm></cindex>
<para><xref><xrefnodename>Backup options</xrefnodename></xref>.
Make a backup of each file that would otherwise be overwritten or removed.
As a special case, <command>cp</command> makes a backup of <var>source</var> when the force
and backup options are given and <var>source</var> and <var>dest</var> are the same
name for an existing, regular file.  One useful application of this
combination of options is this tiny Bourne shell script:
</para>
<example endspaces=" ">
<pre xml:space="preserve">#!/bin/sh
# Usage: backup FILE...
# Create a <sc>gnu</sc>-style backup of each listed FILE.
for i; do
  cp --backup --force -- &quot;$i&quot; &quot;$i&quot;
done
</pre></example>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--copy-contents</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp">directories, copying recursively</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">copying directories recursively</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">recursively copying directories</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">non-directories, copying as special files</indexterm></cindex>
<para>If copying recursively, copy the contents of any special files (e.g.,
FIFOs and device files) as if they were regular files.  This means
trying to read the data in each source file and writing it to the
destination.  It is usually a mistake to use this option, as it
normally has undesirable effects on special files like FIFOs and the
ones typically found in the <file>/dev</file> directory.  In most cases,
<code>cp -R --copy-contents</code> will hang indefinitely trying to read
from FIFOs and special files like <file>/dev/console</file>, and it will
fill up your destination disk if you use it to copy <file>/dev/zero</file>.
This option has no effect unless copying recursively, and it does not
affect the copying of symbolic links.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-d</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-d</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">symbolic links, copying</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">hard links, preserving</indexterm></cindex>
<para>Copy symbolic links as symbolic links rather than copying the files that
they point to, and preserve hard links between source files in the copies.
Equivalent to <option>--no-dereference --preserve=links</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-f</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--force</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-f</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;force</indexterm></indexcommand>
<para>When copying without this option and an existing destination file cannot
be opened for writing, the copy fails.  However, with <option>--force</option>),
when a destination file cannot be opened, <command>cp</command> then removes it and
tries to open it again.  Contrast this behavior with that enabled by
<option>--link</option> and <option>--symbolic-link</option>, whereby the destination file
is never opened but rather is removed unconditionally.  Also see the
description of <option>--remove-destination</option>.
</para>
<para>This option is independent of the <option>--interactive</option> or
<option>-i</option> option: neither cancels the effect of the other.
</para>
<para>This option is redundant if the <option>--no-clobber</option> or <option>-n</option> option is
used.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-H</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-H</indexterm></indexcommand>
<para>If a command line argument specifies a symbolic link, then copy the
file it points to rather than the symbolic link itself.  However,
copy (preserving its nature) any symbolic link that is encountered
via recursive traversal.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-i</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--interactive</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-i</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;interactive</indexterm></indexcommand>
<para>When copying a file other than a directory, prompt whether to
overwrite an existing destination file. The <option>-i</option> option overrides
a previous <option>-n</option> option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-l</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--link</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-l</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;link</indexterm></indexcommand>
<para>Make hard links instead of copies of non-directories.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-L</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--dereference</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-L</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;dereference</indexterm></indexcommand>
<para>Follow symbolic links when copying from them.
With this option, <command>cp</command> cannot create a symbolic link.
For example, a symlink (to regular file) in the source tree will be copied to
a regular file in the destination tree.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-n</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--no-clobber</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-n</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;no-clobber</indexterm></indexcommand>
<para>Do not overwrite an existing file. The <option>-n</option> option overrides a previous
<option>-i</option> option. This option is mutually exclusive with <option>-b</option> or
<option>--backup</option> option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-P</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--no-dereference</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-P</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;no-dereference</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">symbolic links, copying</indexterm></cindex>
<para>Copy symbolic links as symbolic links rather than copying the files that
they point to.  This option affects only symbolic links in the source;
symbolic links in the destination are always followed if possible.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-p</itemformat></item>
<itemx spaces=" "><itemformat command="samp"><w><kbd>--preserve</kbd>[=<var>attribute_list</var>]</w></itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-p</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;preserve</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">file information, preserving, extended attributes, xattr</indexterm></cindex>
<para>Preserve the specified attributes of the original files.
If specified, the <var>attribute_list</var> must be a comma-separated list
of one or more of the following strings:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><itemx spaces=" "><itemformat command="samp">mode</itemformat></itemx>
<para>Preserve the file mode bits and access control lists.
</para><itemx spaces=" "><itemformat command="samp">ownership</itemformat></itemx>
<para>Preserve the owner and group.  On most modern systems,
only users with appropriate privileges may change the owner of a file,
and ordinary users
may preserve the group ownership of a file only if they happen to be
a member of the desired group.
</para><itemx spaces=" "><itemformat command="samp">timestamps</itemformat></itemx>
<para>Preserve the times of last access and last modification, when possible.
On older systems, it is not possible to preserve these attributes
when the affected file is a symbolic link.
However, many systems now provide the <code>utimensat</code> function,
which makes it possible even for symbolic links.
</para><itemx spaces=" "><itemformat command="samp">links</itemformat></itemx>
<para>Preserve in the destination files
any links between corresponding source files.
Note that with <option>-L</option> or <option>-H</option>, this option can convert
symbolic links to hard links.  For example,
</para><example endspaces=" ">
<pre xml:space="preserve">$ mkdir c; : &gt; a; ln -s a b; cp -aH a b c; ls -i1 c
74161745 a
74161745 b
</pre></example>
<noindent></noindent>
<para>Note the inputs: <file>b</file> is a symlink to regular file <file>a</file>,
yet the files in destination directory, <file>c/</file>, are hard-linked.
Since <option>-a</option> implies <option>--preserve=links</option>, and since <option>-H</option>
tells <command>cp</command> to dereference command line arguments, it sees two files
with the same inode number, and preserves the perceived hard link.
</para>
<para>Here is a similar example that exercises <command>cp</command>&textrsquo;s <option>-L</option> option:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">$ mkdir b c; (cd b; : &gt; a; ln -s a b); cp -aL b c; ls -i1 c/b
74163295 a
74163295 b
</pre></smallexample>

<itemx spaces=" "><itemformat command="samp">context</itemformat></itemx>
<para>Preserve SELinux security context of the file, or fail with full diagnostics.
</para><itemx spaces=" "><itemformat command="samp">xattr</itemformat></itemx>
<para>Preserve extended attributes of the file, or fail with full diagnostics.
If <command>cp</command> is built without xattr support, ignore this option.
If SELinux context, ACLs or Capabilities are implemented using xattrs,
they are preserved by this option as well.
</para><itemx spaces=" "><itemformat command="samp">all</itemformat></itemx>
</tableterm><tableitem><para>Preserve all file attributes.
Equivalent to specifying all of the above, but with the difference
that failure to preserve SELinux security context or extended attributes
does not change <command>cp</command>&textrsquo;s exit status.  In contrast to <option>-a</option>,
all but <samp>Operation not supported</samp> warnings are output.
</para></tableitem></tableentry></table>

<para>Using <option>--preserve</option> with no <var>attribute_list</var> is equivalent
to <option>--preserve=mode,ownership,timestamps</option>.
</para>
<para>In the absence of this option, each destination file is created with the
mode bits of the corresponding source file, minus the bits set in the
umask and minus the set-user-ID and set-group-ID bits.
<xref><xrefnodename>File permissions</xrefnodename></xref>.
</para>
<itemx spaces=" "><itemformat command="samp"><w><kbd>--no-preserve</kbd>=<var>attribute_list</var></w></itemformat></itemx>
<cindex index="cp" spaces=" "><indexterm index="cp">file information, preserving</indexterm></cindex>
<para>Do not preserve the specified attributes.  The <var>attribute_list</var>
has the same form as for <option>--preserve</option>.
</para>
<itemx spaces=" "><itemformat command="samp">--parents</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;parents</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">parent directories and <command>cp</command></indexterm></cindex>
<para>Form the name of each destination file by appending to the target
directory a slash and the specified name of the source file.  The last
argument given to <command>cp</command> must be the name of an existing directory.
For example, the command:
</para>
<example endspaces=" ">
<pre xml:space="preserve">cp --parents a/b/c existing_dir
</pre></example>

<noindent></noindent>
<para>copies the file <file>a/b/c</file> to <file>existing_dir/a/b/c</file>, creating
any missing intermediate directories.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-R</itemformat></item>
<itemx spaces=" "><itemformat command="samp">-r</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--recursive</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-R</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-r</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;recursive</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">directories, copying recursively</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">copying directories recursively</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">recursively copying directories</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">non-directories, copying as special files</indexterm></cindex>
<para>Copy directories recursively.  By default, do not follow symbolic
links in the source; see the <option>--archive</option> (<option>-a</option>), <option>-d</option>,
<option>--dereference</option> (<option>-L</option>), <option>--no-dereference</option>
(<option>-P</option>), and <option>-H</option> options.  Special files are copied by
creating a destination file of the same type as the source; see the
<option>--copy-contents</option> option.  It is not portable to use
<option>-r</option> to copy symbolic links or special files.  On some
non-<sc>gnu</sc> systems, <option>-r</option> implies the equivalent of
<option>-L</option> and <option>--copy-contents</option> for historical reasons.
Also, it is not portable to use <option>-R</option> to copy symbolic links
unless you also specify <option>-P</option>, as <acronym><acronymword>POSIX</acronymword></acronym> allows
implementations that dereference symbolic links by default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--reflink[=<var>when</var>]</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;reflink[=<var>when</var>]</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">COW</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">clone</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">copy on write</indexterm></cindex>
<para>Perform a lightweight, copy-on-write (COW) copy, if supported by the
file system. Once it has succeeded, beware that the source and destination
files share the same disk data blocks as long as they remain unmodified.
Thus, if a disk I/O error affects data blocks of one of the files,
the other suffers the same fate.
</para>
<para>The <var>when</var> value can be one of the following:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">always</itemformat></item>
</tableterm><tableitem><para>The default behavior: if the copy-on-write operation is not supported
then report the failure for each file and exit with a failure status.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">auto</itemformat></item>
</tableterm><tableitem><para>If the copy-on-write operation is not supported then fall back
to the standard copy behaviour.
</para></tableitem></tableentry></table>

<para>This option is overridden by the <option>--link</option>, <option>--symbolic-link</option>
and <option>--attributes-only</option> options, thus allowing it to be used
to configure the default data copying behavior for <command>cp</command>.
For example, with the following alias, <command>cp</command> will use the
minimum amount of space supported by the file system.
</para>
<example endspaces=" ">
<pre xml:space="preserve">alias cp='cp --reflink=auto --sparse=always'
</pre></example>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--remove-destination</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;remove-destination</indexterm></indexcommand>
<para>Remove each existing destination file before attempting to open it
(contrast with <option>-f</option> above).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--sparse=<var>when</var></itemformat></item>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;sparse=<var>when</var></indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">sparse files, copying</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">holes, copying files with</indexterm></cindex>
<findex index="fn" spaces=" "><indexterm index="fn" mergedindex="cp">read <r>system call, and holes</r></indexterm></findex>
<para>A <dfn>sparse file</dfn> contains <dfn>holes</dfn>&textmdash;a sequence of zero bytes that
does not occupy any physical disk blocks; the <samp>read</samp> system call
reads these as zeros.  This can both save considerable disk space and
increase speed, since many binary files contain lots of consecutive zero
bytes.  By default, <command>cp</command> detects holes in input source files via a crude
heuristic and makes the corresponding output file sparse as well.
Only regular files may be sparse.
</para>
<para>The <var>when</var> value can be one of the following:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">auto</itemformat></item>
</tableterm><tableitem><para>The default behavior: if the input file is sparse, attempt to make
the output file sparse, too.  However, if an output file exists but
refers to a non-regular file, then do not attempt to make it sparse.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">always</itemformat></item>
</tableterm><tableitem><para>For each sufficiently long sequence of zero bytes in the input file,
attempt to create a corresponding hole in the output file, even if the
input file does not appear to be sparse.
This is useful when the input file resides on a file system
that does not support sparse files
(for example,  <samp>efs</samp> file systems in SGI IRIX 5.3 and earlier),
but the output file is on a type of file system that does support them.
Holes may be created only in regular files, so if the destination file
is of some other type, <command>cp</command> does not even try to make it sparse.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">never</itemformat></item>
</tableterm><tableitem><para>Never make the output file sparse.
This is useful in creating a file for use with the <command>mkswap</command> command,
since such a file must not have any holes.
</para></tableitem></tableentry></table>

<itemx spaces=" "><itemformat command="samp"><w><kbd>--strip-trailing-slashes</kbd></w></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;strip-trailing-slashes</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">stripping trailing slashes</indexterm></cindex>
<para>Remove any trailing slashes from each <var>source</var> argument.
<xref><xrefnodename>Trailing slashes</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-s</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--symbolic-link</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-s</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;symbolic-link</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">symbolic links, copying with</indexterm></cindex>
<para>Make symbolic links instead of copies of non-directories.  All source
file names must be absolute (starting with <samp>/</samp>) unless the
destination files are in the current directory.  This option merely
results in an error message on systems that do not support symbolic links.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-S <var>suffix</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--suffix=<var>suffix</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-S</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;suffix</indexterm></indexcommand>
<para>Append <var>suffix</var> to each backup file made with <option>-b</option>.
<xref><xrefnodename>Backup options</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-t <var>directory</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp"><w><kbd>--target-directory</kbd>=<var>directory</var></w></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-t</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;target-directory</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">target directory</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">destination directory</indexterm></cindex>
<para>Specify the destination <var>directory</var>.
<xref><xrefnodename>Target directory</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-T</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--no-target-directory</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-T</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;no-target-directory</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">target directory</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">destination directory</indexterm></cindex>
<para>Do not treat the last operand specially when it is a directory or a
symbolic link to a directory.  <xref><xrefnodename>Target directory</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-u</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--update</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-u</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;update</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">newer files, copying only</indexterm></cindex>
<para>Do not copy a non-directory that has an existing destination with the
same or newer modification time.  If time stamps are being preserved,
the comparison is to the source time stamp truncated to the
resolutions of the destination file system and of the system calls
used to update time stamps; this avoids duplicate work if several
<samp>cp -pu</samp> commands are executed with the same source and destination.
If <option>--preserve=links</option> is also specified (like with <samp>cp -au</samp>
for example), that will take precedence.  Consequently, depending on the
order that files are processed from the source, newer files in the destination
may be replaced, to mirror hard links in the source.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-v</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--verbose</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-v</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;verbose</indexterm></indexcommand>
<para>Print the name of each file before copying it.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-x</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--one-file-system</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-x</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;one-file-system</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">file systems, omitting copying to different</indexterm></cindex>
<para>Skip subdirectories that are on different file systems from the one that
the copy started on.
However, mount point directories <emph>are</emph> copied.
</para>
</tableitem></tableentry></table>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="dd-invocation" spaces=" "><nodename>dd invocation</nodename><nodenext automatic="on">install invocation</nodenext><nodeprev automatic="on">cp invocation</nodeprev><nodeup automatic="on">Basic operations</nodeup></node>
<section spaces=" "><sectiontitle><command>dd</command>: Convert and copy a file</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">dd</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">converting while copying a file</indexterm></cindex>

<para><command>dd</command> copies a file (from standard input to standard output, by
default) with a changeable I/O block size, while optionally performing
conversions on it.  Synopses:
</para>
<example endspaces=" ">
<pre xml:space="preserve">dd [<var>operand</var>]&dots;
dd <var>option</var>
</pre></example>

<para>The only options are <option>--help</option> and <option>--version</option>.
<xref><xrefnodename>Common options</xrefnodename></xref>.  <command>dd</command> accepts the following operands.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">if=<var>file</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">if</indexterm></indexcommand>
<para>Read from <var>file</var> instead of standard input.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">of=<var>file</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">of</indexterm></indexcommand>
<para>Write to <var>file</var> instead of standard output.  Unless
<samp>conv=notrunc</samp> is given, <command>dd</command> truncates <var>file</var> to zero
bytes (or the size specified with <samp>seek=</samp>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ibs=<var>bytes</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">ibs</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">block size of input</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">input block size</indexterm></cindex>
<para>Set the input block size to <var>bytes</var>.
This makes <command>dd</command> read <var>bytes</var> per block.
The default is 512 bytes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">obs=<var>bytes</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">obs</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">block size of output</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">output block size</indexterm></cindex>
<para>Set the output block size to <var>bytes</var>.
This makes <command>dd</command> write <var>bytes</var> per block.
The default is 512 bytes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">bs=<var>bytes</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">bs</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">block size</indexterm></cindex>
<para>Set both input and output block sizes to <var>bytes</var>.
This makes <command>dd</command> read and write <var>bytes</var> per block,
overriding any <samp>ibs</samp> and <samp>obs</samp> settings.
In addition, if no data-transforming <option>conv</option> option is specified,
input is copied to the output as soon as it&textrsquo;s read,
even if it is smaller than the block size.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">cbs=<var>bytes</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">cbs</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">block size of conversion</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">conversion block size</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">fixed-length records, converting to variable-length</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">variable-length records, converting to fixed-length</indexterm></cindex>
<para>Set the conversion block size to <var>bytes</var>.
When converting variable-length records to fixed-length ones
(<option>conv=block</option>) or the reverse (<option>conv=unblock</option>),
use <var>bytes</var> as the fixed record length.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">skip=<var>blocks</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">skip</indexterm></indexcommand>
<para>Skip <var>blocks</var> <samp>ibs</samp>-byte blocks in the input file before copying.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">seek=<var>blocks</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">seek</indexterm></indexcommand>
<para>Skip <var>blocks</var> <samp>obs</samp>-byte blocks in the output file before copying.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">count=<var>blocks</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">count</indexterm></indexcommand>
<para>Copy <var>blocks</var> <samp>ibs</samp>-byte blocks from the input file, instead
of everything until the end of the file.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">status=noxfer</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">status</indexterm></indexcommand>
<para>Do not print the overall transfer rate and volume statistics
that normally make up the third status line when <command>dd</command> exits.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">conv=<var>conversion</var>[,<var>conversion</var>]&dots;</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">conv</indexterm></indexcommand>
<para>Convert the file as specified by the <var>conversion</var> argument(s).
(No spaces around any comma(s).)
</para>
<para>Conversions:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">ascii</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">ascii<r>, converting to</r></indexterm></indexcommand>
<para>Convert <acronym><acronymword>EBCDIC</acronymword></acronym> to <acronym><acronymword>ASCII</acronymword></acronym>,
using the conversion table specified by <acronym><acronymword>POSIX</acronymword></acronym>.
This provides a 1:1 translation for all 256 bytes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ebcdic</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">ebcdic<r>, converting to</r></indexterm></indexcommand>
<para>Convert <acronym><acronymword>ASCII</acronymword></acronym> to <acronym><acronymword>EBCDIC</acronymword></acronym>.
This is the inverse of the <samp>ascii</samp> conversion.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ibm</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">alternate ebcdic<r>, converting to</r></indexterm></indexcommand>
<para>Convert <acronym><acronymword>ASCII</acronymword></acronym> to alternate <acronym><acronymword>EBCDIC</acronymword></acronym>,
using the alternate conversion table specified by <acronym><acronymword>POSIX</acronymword></acronym>.
This is not a 1:1 translation, but reflects common historical practice
for <samp>~</samp>, <samp>[</samp>, and <samp>]</samp>.
</para>
<para>The <samp>ascii</samp>, <samp>ebcdic</samp>, and <samp>ibm</samp> conversions are
mutually exclusive.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">block</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">block <r>(space-padding)</r></indexterm></indexcommand>
<para>For each line in the input, output <samp>cbs</samp> bytes, replacing the
input newline with a space and padding with spaces as necessary.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">unblock</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">unblock</indexterm></indexcommand>
<para>Remove any trailing spaces in each <samp>cbs</samp>-sized input block,
and append a newline.
</para>
<para>The <samp>block</samp> and <samp>unblock</samp> conversions are mutually exclusive.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">lcase</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">lcase<r>, converting to</r></indexterm></indexcommand>
<para>Change uppercase letters to lowercase.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ucase</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">ucase<r>, converting to</r></indexterm></indexcommand>
<para>Change lowercase letters to uppercase.
</para>
<para>The <samp>lcase</samp> and <samp>ucase</samp> conversions are mutually exclusive.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">swab</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">swab <r>(byte-swapping)</r></indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">byte-swapping</indexterm></cindex>
<para>Swap every pair of input bytes.  <sc>gnu</sc> <command>dd</command>, unlike others, works
when an odd number of bytes are read&textmdash;the last byte is simply copied
(since there is nothing to swap it with).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">sync</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">sync <r>(padding with <acronym><acronymword>ASCII</acronymword></acronym> <sc>nul</sc>s)</r></indexterm></indexcommand>
<para>Pad every input block to size of <samp>ibs</samp> with trailing zero bytes.
When used with <samp>block</samp> or <samp>unblock</samp>, pad with spaces instead of
zero bytes.
</para>
</tableitem></tableentry></table>

<para>The following &textldquo;conversions&textrdquo; are really file flags
and don&textrsquo;t affect internal processing:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">excl</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">excl</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">creating output file, requiring</indexterm></cindex>
<para>Fail if the output file already exists; <command>dd</command> must create the
output file itself.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">nocreat</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">nocreat</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">creating output file, avoiding</indexterm></cindex>
<para>Do not create the output file; the output file must already exist.
</para>
<para>The <samp>excl</samp> and <samp>nocreat</samp> conversions are mutually exclusive.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">notrunc</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">notrunc</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">truncating output file, avoiding</indexterm></cindex>
<para>Do not truncate the output file.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">noerror</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">noerror</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">read errors, ignoring</indexterm></cindex>
<para>Continue after read errors.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">fdatasync</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">fdatasync</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">synchronized data writes, before finishing</indexterm></cindex>
<para>Synchronize output data just before finishing.  This forces a physical
write of output data.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">fsync</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">fsync</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">synchronized data and metadata writes, before finishing</indexterm></cindex>
<para>Synchronize output data and metadata just before finishing.  This
forces a physical write of output data and metadata.
</para>
</tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">iflag=<var>flag</var>[,<var>flag</var>]&dots;</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">iflag</indexterm></indexcommand>
<para>Access the input file using the flags specified by the <var>flag</var>
argument(s).  (No spaces around any comma(s).)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">oflag=<var>flag</var>[,<var>flag</var>]&dots;</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">oflag</indexterm></indexcommand>
<para>Access the output file using the flags specified by the <var>flag</var>
argument(s).  (No spaces around any comma(s).)
</para>
<para>Here are the flags.  Not every flag is supported on every operating
system.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">append</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">append</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">appending to the output file</indexterm></cindex>
<para>Write in append mode, so that even if some other process is writing to
this file, every <command>dd</command> write will append to the current
contents of the file.  This flag makes sense only for output.
If you combine this flag with the <samp>of=<var>file</var></samp> operand,
you should also specify <samp>conv=notrunc</samp> unless you want the
output file to be truncated before being appended to.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">cio</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">cio</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">concurrent I/O</indexterm></cindex>
<para>Use concurrent I/O mode for data.  This mode performs direct I/O
and drops the <acronym><acronymword>POSIX</acronymword></acronym> requirement to serialize all I/O to the same file.
A file cannot be opened in CIO mode and with a standard open at the
same time.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">direct</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">direct</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">direct I/O</indexterm></cindex>
<para>Use direct I/O for data, avoiding the buffer cache.
Note that the kernel may impose restrictions on read or write buffer sizes.
For example, with an ext4 destination file system and a linux-based kernel,
using <samp>oflag=direct</samp> will cause writes to fail with <code>EINVAL</code> if the
output buffer size is not a multiple of 512.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">directory</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">directory</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">directory I/O</indexterm></cindex>

<para>Fail unless the file is a directory.  Most operating systems do not
allow I/O to a directory, so this flag has limited utility.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">dsync</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">dsync</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">synchronized data reads</indexterm></cindex>
<para>Use synchronized I/O for data.  For the output file, this forces a
physical write of output data on each write.  For the input file,
this flag can matter when reading from a remote file that has been
written to synchronously by some other process.  Metadata (e.g.,
last-access and last-modified time) is not necessarily synchronized.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">sync</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">sync</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">synchronized data and metadata I/O</indexterm></cindex>
<para>Use synchronized I/O for both data and metadata.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">nocache</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">nocache</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">discarding file cache</indexterm></cindex>
<para>Discard the data cache for a file.
When count=0 all cache is discarded,
otherwise the cache is dropped for the processed
portion of the file.  Also when count=0
failure to discard the cache is diagnosed
and reflected in the exit status.
Here as some usage examples:
</para>
<example endspaces=" ">
<pre xml:space="preserve"># Advise to drop cache for whole file
dd if=ifile iflag=nocache count=0

# Ensure drop cache for the whole file
dd of=ofile oflag=nocache conv=notrunc,fdatasync count=0

# Drop cache for part of file
dd if=ifile iflag=nocache skip=10 count=10 of=/dev/null

# Stream data using just the read-ahead cache
dd if=ifile of=ofile iflag=nocache oflag=nocache
</pre></example>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">nonblock</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">nonblock</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">nonblocking I/O</indexterm></cindex>
<para>Use non-blocking I/O.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">noatime</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">noatime</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">access time</indexterm></cindex>
<para>Do not update the file&textrsquo;s access time.
Some older file systems silently ignore this flag, so it is a good
idea to test it on your files before relying on it.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">noctty</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">noctty</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">controlling terminal</indexterm></cindex>
<para>Do not assign the file to be a controlling terminal for <command>dd</command>.
This has no effect when the file is not a terminal.
On many hosts (e.g., <acronym><acronymword>GNU</acronymword></acronym>/Linux hosts), this option has no effect
at all.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">nofollow</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">nofollow</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">symbolic links, following</indexterm></cindex>
<para>Do not follow symbolic links.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">nolinks</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">nolinks</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">hard links</indexterm></cindex>
<para>Fail if the file has multiple hard links.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">binary</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">binary</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">binary I/O</indexterm></cindex>
<para>Use binary I/O.  This option has an effect only on nonstandard
platforms that distinguish binary from text I/O.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">text</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">text</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">text I/O</indexterm></cindex>
<para>Use text I/O.  Like <samp>binary</samp>, this option has no effect on
standard platforms.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">fullblock</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">fullblock</indexterm></indexcommand>
<para>Accumulate full blocks from input.  The <code>read</code> system call
may return early if a full block is not available.
When that happens, continue calling <code>read</code> to fill the remainder
of the block.
This flag can be used only with <code>iflag</code>.
</para>
</tableitem></tableentry></table>

<para>These flags are not supported on all systems, and <samp>dd</samp> rejects
attempts to use them when they are not supported.  When reading from
standard input or writing to standard output, the <samp>nofollow</samp> and
<samp>noctty</samp> flags should not be specified, and the other flags
(e.g., <samp>nonblock</samp>) can affect how other processes behave with the
affected file descriptors, even after <command>dd</command> exits.
</para>
</tableitem></tableentry></table>

<cindex index="cp" spaces=" "><indexterm index="cp">multipliers after numbers</indexterm></cindex>
<para>The numeric-valued strings above (<var>bytes</var> and <var>blocks</var>) can be
followed by a multiplier: <samp>b</samp>=512, <samp>c</samp>=1,
<samp>w</samp>=2, <samp>x<var>m</var></samp>=<var>m</var>, or any of the
standard block size suffixes like <samp>k</samp>=1024 (<pxref><xrefnodename>Block size</xrefnodename></pxref>).
</para>
<para>Any block size you specify via <samp>bs=</samp>, <samp>ibs=</samp>, <samp>obs=</samp>, <samp>cbs=</samp>
should not be too large&textmdash;values larger than a few megabytes
are generally wasteful or (as in the gigabyte..exabyte case) downright
counterproductive or error-inducing.
</para>
<para>Use different <command>dd</command> invocations to use different block sizes for
skipping and I/O&eosperiod;  For example, the following shell commands copy data
in 512 KiB blocks between a disk and a tape, but do not save or restore a
4 KiB label at the start of the disk:
</para>
<example endspaces=" ">
<pre xml:space="preserve">disk=/dev/rdsk/c0t1d0s2
tape=/dev/rmt/0

# Copy all but the label from disk to tape.
(dd bs=4k skip=1 count=0 &amp;&amp; dd bs=512k) &lt;$disk &gt;$tape

# Copy from tape back to disk, but leave the disk label alone.
(dd bs=4k seek=1 count=0 &amp;&amp; dd bs=512k) &lt;$tape &gt;$disk
</pre></example>

<para>Sending an <samp>INFO</samp> signal to a running <command>dd</command>
process makes it print I/O statistics to standard error
and then resume copying.  In the example below,
<command>dd</command> is run in the background to copy 10 million blocks.
The <command>kill</command> command makes it output intermediate I/O statistics,
and when <command>dd</command> completes normally or is killed by the
<code>SIGINT</code> signal, it outputs the final statistics.
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ dd if=/dev/zero of=/dev/null count=10MB &amp; pid=$!
$ kill -s INFO $pid; wait $pid
3385223+0 records in
3385223+0 records out
1733234176 bytes (1.7 GB) copied, 6.42173 seconds, 270 MB/s
10000000+0 records in
10000000+0 records out
5120000000 bytes (5.1 GB) copied, 18.913 seconds, 271 MB/s
</pre></example>

<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">POSIXLY_CORRECT</indexterm></vindex>
<para>On systems lacking the <samp>INFO</samp> signal <command>dd</command> responds to the
<samp>USR1</samp> signal instead, unless the <env>POSIXLY_CORRECT</env>
environment variable is set.
</para>
<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="install-invocation" spaces=" "><nodename>install invocation</nodename><nodenext automatic="on">mv invocation</nodenext><nodeprev automatic="on">dd invocation</nodeprev><nodeup automatic="on">Basic operations</nodeup></node>
<section spaces=" "><sectiontitle><command>install</command>: Copy files and set attributes</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">install</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">copying files and setting attributes</indexterm></cindex>

<para><command>install</command> copies files while setting their file mode bits and, if
possible, their owner and group.  Synopses:
</para>
<example endspaces=" ">
<pre xml:space="preserve">install [<var>option</var>]&dots; [-T] <var>source</var> <var>dest</var>
install [<var>option</var>]&dots; <var>source</var>&dots; <var>directory</var>
install [<var>option</var>]&dots; -t <var>directory</var> <var>source</var>&dots;
install [<var>option</var>]&dots; -d <var>directory</var>&dots;
</pre></example>

<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet" /></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para>If two file names are given, <command>install</command> copies the first file to the
second.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>If the <option>--target-directory</option> (<option>-t</option>) option is given, or
failing that if the last file is a directory and the
<option>--no-target-directory</option> (<option>-T</option>) option is not given,
<command>install</command> copies each <var>source</var> file to the specified
directory, using the <var>source</var>s&textrsquo; names.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>If the <option>--directory</option> (<option>-d</option>) option is given,
<command>install</command> creates each <var>directory</var> and any missing parent
directories.  Parent directories are created with mode
<samp>u=rwx,go=rx</samp> (755), regardless of the <option>-m</option> option or the
current umask.  <xref><xrefnodename>Directory Setuid and Setgid</xrefnodename></xref>, for how the
set-user-ID and set-group-ID bits of parent directories are inherited.
</para></listitem></itemize>

<cindex index="cp" spaces=" "><indexterm index="cp">Makefiles, installing programs in</indexterm></cindex>
<para><command>install</command> is similar to <command>cp</command>, but allows you to control the
attributes of destination files.  It is typically used in Makefiles to
copy programs into their destination directories.  It refuses to copy
files onto themselves.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">extended attributes, xattr</indexterm></cindex>
<para><command>install</command> never preserves extended attributes (xattr).
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-b</itemformat></item>
<itemx spaces=" "><itemformat command="samp"><w><kbd>--backup</kbd>[=<var>method</var>]</w></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-b</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;backup</indexterm></indexcommand>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">VERSION_CONTROL</indexterm></vindex>
<cindex index="cp" spaces=" "><indexterm index="cp">backups, making</indexterm></cindex>
<para><xref><xrefnodename>Backup options</xrefnodename></xref>.
Make a backup of each file that would otherwise be overwritten or removed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-C</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--compare</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-C</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;compare</indexterm></indexcommand>
<para>Compare each pair of source and destination files, and if the destination has
identical content and any specified owner, group, permissions, and possibly
SELinux context, then do not modify the destination at all.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-c</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-c</indexterm></indexcommand>
<para>Ignored; for compatibility with old Unix versions of <command>install</command>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-D</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-D</indexterm></indexcommand>
<para>Create any missing parent directories of <var>dest</var>,
then copy <var>source</var> to <var>dest</var>.
This option is ignored if a destination directory is specified
via <option>--target-directory=DIR</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-d</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--directory</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-d</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;directory</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">directories, creating with given attributes</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">parent directories, creating missing</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">leading directories, creating missing</indexterm></cindex>
<para>Create any missing parent directories, giving them the default
attributes.  Then create each given directory, setting their owner,
group and mode as given on the command line or to the defaults.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-g <var>group</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--group=<var>group</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-g</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;group</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">group ownership of installed files, setting</indexterm></cindex>
<para>Set the group ownership of installed files or directories to
<var>group</var>.  The default is the process&textrsquo;s current group.  <var>group</var>
may be either a group name or a numeric group ID.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-m <var>mode</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--mode=<var>mode</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-m</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;mode</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">permissions of installed files, setting</indexterm></cindex>
<para>Set the file mode bits for the installed file or directory to <var>mode</var>,
which can be either an octal number, or a symbolic mode as in
<command>chmod</command>, with <samp>a=</samp> (no access allowed to anyone) as the
point of departure (<pxref><xrefnodename>File permissions</xrefnodename></pxref>).
The default mode is <samp>u=rwx,go=rx,a-s</samp>&textmdash;read, write, and
execute for the owner, read and execute for group and other, and with
set-user-ID and set-group-ID disabled.
This default is not quite the same as <samp>755</samp>, since it disables
instead of preserving set-user-ID and set-group-ID on directories.
<xref><xrefnodename>Directory Setuid and Setgid</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-o <var>owner</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--owner=<var>owner</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-o</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;owner</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">ownership of installed files, setting</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">appropriate privileges</indexterm></cindex>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">root <r>as default owner</r></indexterm></vindex>
<para>If <command>install</command> has appropriate privileges (is run as root), set the
ownership of installed files or directories to <var>owner</var>.  The default
is <code>root</code>.  <var>owner</var> may be either a user name or a numeric user
ID.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--preserve-context</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;preserve-context</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">SELinux</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">security context</indexterm></cindex>
<para>Preserve the SELinux security context of files and directories.
Failure to preserve the context in all of the files or directories
will result in an exit status of 1.  If SELinux is disabled then
print a warning and ignore the option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-p</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--preserve-timestamps</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-p</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;preserve-timestamps</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">timestamps of installed files, preserving</indexterm></cindex>
<para>Set the time of last access and the time of last modification of each
installed file to match those of each corresponding original file.
When a file is installed without this option, its last access and
last modification times are both set to the time of installation.
This option is useful if you want to use the last modification times
of installed files to keep track of when they were last built as opposed
to when they were last installed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-s</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--strip</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-s</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;strip</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">symbol table information, stripping</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">stripping symbol table information</indexterm></cindex>
<para>Strip the symbol tables from installed binary executables.
</para>
<itemx spaces=" "><itemformat command="samp">--strip-program=<var>program</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;strip-program</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">symbol table information, stripping, program</indexterm></cindex>
<para>Program used to strip binaries.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-S <var>suffix</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--suffix=<var>suffix</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-S</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;suffix</indexterm></indexcommand>
<para>Append <var>suffix</var> to each backup file made with <option>-b</option>.
<xref><xrefnodename>Backup options</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-t <var>directory</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp"><w><kbd>--target-directory</kbd>=<var>directory</var></w></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-t</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;target-directory</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">target directory</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">destination directory</indexterm></cindex>
<para>Specify the destination <var>directory</var>.
<xref><xrefnodename>Target directory</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-T</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--no-target-directory</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-T</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;no-target-directory</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">target directory</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">destination directory</indexterm></cindex>
<para>Do not treat the last operand specially when it is a directory or a
symbolic link to a directory.  <xref><xrefnodename>Target directory</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-v</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--verbose</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-v</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;verbose</indexterm></indexcommand>
<para>Print the name of each file before copying it.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-Z <var>context</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--context=<var>context</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-Z</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;context</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">SELinux</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">security context</indexterm></cindex>
<para>Set the default SELinux security context to be used for any
created files and directories.  If SELinux is disabled then
print a warning and ignore the option.
</para>
</tableitem></tableentry></table>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="mv-invocation" spaces=" "><nodename>mv invocation</nodename><nodenext automatic="on">rm invocation</nodenext><nodeprev automatic="on">install invocation</nodeprev><nodeup automatic="on">Basic operations</nodeup></node>
<section spaces=" "><sectiontitle><command>mv</command>: Move (rename) files</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">mv</indexterm></pindex>

<para><command>mv</command> moves or renames files (or directories).  Synopses:
</para>
<example endspaces=" ">
<pre xml:space="preserve">mv [<var>option</var>]&dots; [-T] <var>source</var> <var>dest</var>
mv [<var>option</var>]&dots; <var>source</var>&dots; <var>directory</var>
mv [<var>option</var>]&dots; -t <var>directory</var> <var>source</var>&dots;
</pre></example>

<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet" /></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para>If two file names are given, <command>mv</command> moves the first file to the
second.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>If the <option>--target-directory</option> (<option>-t</option>) option is given, or
failing that if the last file is a directory and the
<option>--no-target-directory</option> (<option>-T</option>) option is not given,
<command>mv</command> moves each <var>source</var> file to the specified
directory, using the <var>source</var>s&textrsquo; names.
</para></listitem></itemize>

<para><command>mv</command> can move any type of file from one file system to another.
Prior to version <code>4.0</code> of the fileutils,
<command>mv</command> could move only regular files between file systems.
For example, now <command>mv</command> can move an entire directory hierarchy
including special device files from one partition to another.  It first
uses some of the same code that&textrsquo;s used by <code>cp -a</code> to copy the
requested directories and files, then (assuming the copy succeeded)
it removes the originals.  If the copy fails, then the part that was
copied to the destination partition is removed.  If you were to copy
three directories from one partition to another and the copy of the first
directory succeeded, but the second didn&textrsquo;t, the first would be left on
the destination partition and the second and third would be left on the
original partition.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">extended attributes, xattr</indexterm></cindex>
<para><command>mv</command> always tries to copy extended attributes (xattr), which may
include SELinux context, ACLs or Capabilities.
Upon failure all but <samp>Operation not supported</samp> warnings are output.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">prompting, and <command>mv</command></indexterm></cindex>
<para>If a destination file exists but is normally unwritable, standard input
is a terminal, and the <option>-f</option> or <option>--force</option> option is not given,
<command>mv</command> prompts the user for whether to replace the file.  (You might
own the file, or have write permission on its directory.)  If the
response is not affirmative, the file is skipped.
</para>
<para><emph>Warning</emph>: Avoid specifying a source name with a trailing slash,
when it might be a symlink to a directory.
Otherwise, <command>mv</command> may do something very surprising, since
its behavior depends on the underlying rename system call.
On a system with a modern Linux-based kernel, it fails with
<code>errno=ENOTDIR</code>.
However, on other systems (at least FreeBSD 6.1 and Solaris 10) it silently
renames not the symlink but rather the directory referenced by the symlink.
<xref><xrefnodename>Trailing slashes</xrefnodename></xref>.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-b</itemformat></item>
<itemx spaces=" "><itemformat command="samp"><w><kbd>--backup</kbd>[=<var>method</var>]</w></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-b</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;backup</indexterm></indexcommand>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">VERSION_CONTROL</indexterm></vindex>
<cindex index="cp" spaces=" "><indexterm index="cp">backups, making</indexterm></cindex>
<para><xref><xrefnodename>Backup options</xrefnodename></xref>.
Make a backup of each file that would otherwise be overwritten or removed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-f</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--force</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-f</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;force</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">prompts, omitting</indexterm></cindex>
<para>Do not prompt the user before removing a destination file.
<macro name="mvOptsIfn" line=" mvOptsIfn">If you specify more than one of the @option{-i}, @option{-f}, @option{-n}
options, only the final one takes effect.
</macro>
If you specify more than one of the <option>-i</option>, <option>-f</option>, <option>-n</option>
options, only the final one takes effect.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-i</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--interactive</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-i</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;interactive</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">prompts, forcing</indexterm></cindex>
<para>Prompt whether to overwrite each existing destination file, regardless
of its permissions.
If the response is not affirmative, the file is skipped.
If you specify more than one of the <option>-i</option>, <option>-f</option>, <option>-n</option>
options, only the final one takes effect.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-n</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--no-clobber</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-n</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;no-clobber</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">prompts, omitting</indexterm></cindex>
<para>Do not overwrite an existing file.
If you specify more than one of the <option>-i</option>, <option>-f</option>, <option>-n</option>
options, only the final one takes effect.
This option is mutually exclusive with <option>-b</option> or <option>--backup</option> option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-u</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--update</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-u</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;update</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">newer files, moving only</indexterm></cindex>
<para>Do not move a non-directory that has an existing destination with the
same or newer modification time.
If the move is across file system boundaries, the comparison is to the
source time stamp truncated to the resolutions of the destination file
system and of the system calls used to update time stamps; this avoids
duplicate work if several <samp>mv -u</samp> commands are executed with the
same source and destination.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-v</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--verbose</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-v</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;verbose</indexterm></indexcommand>
<para>Print the name of each file before moving it.
</para>
<itemx spaces=" "><itemformat command="samp"><w><kbd>--strip-trailing-slashes</kbd></w></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;strip-trailing-slashes</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">stripping trailing slashes</indexterm></cindex>
<para>Remove any trailing slashes from each <var>source</var> argument.
<xref><xrefnodename>Trailing slashes</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-S <var>suffix</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--suffix=<var>suffix</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-S</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;suffix</indexterm></indexcommand>
<para>Append <var>suffix</var> to each backup file made with <option>-b</option>.
<xref><xrefnodename>Backup options</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-t <var>directory</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp"><w><kbd>--target-directory</kbd>=<var>directory</var></w></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-t</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;target-directory</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">target directory</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">destination directory</indexterm></cindex>
<para>Specify the destination <var>directory</var>.
<xref><xrefnodename>Target directory</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-T</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--no-target-directory</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-T</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;no-target-directory</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">target directory</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">destination directory</indexterm></cindex>
<para>Do not treat the last operand specially when it is a directory or a
symbolic link to a directory.  <xref><xrefnodename>Target directory</xrefnodename></xref>.
</para>
</tableitem></tableentry></table>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="rm-invocation" spaces=" "><nodename>rm invocation</nodename><nodenext automatic="on">shred invocation</nodenext><nodeprev automatic="on">mv invocation</nodeprev><nodeup automatic="on">Basic operations</nodeup></node>
<section spaces=" "><sectiontitle><command>rm</command>: Remove files or directories</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">rm</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">removing files or directories</indexterm></cindex>

<para><command>rm</command> removes each given <var>file</var>.  By default, it does not remove
directories.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">rm [<var>option</var>]&dots; [<var>file</var>]&dots;
</pre></example>

<cindex index="cp" spaces=" "><indexterm index="cp">prompting, and <command>rm</command></indexterm></cindex>
<para>If the <option>-I</option> or <option>--interactive=once</option> option is given,
and there are more than three files or the <option>-r</option>, <option>-R</option>,
or <option>--recursive</option> are given, then <command>rm</command> prompts the user
for whether to proceed with the entire operation.  If the response is
not affirmative, the entire command is aborted.
</para>
<para>Otherwise, if a file is unwritable, standard input is a terminal, and
the <option>-f</option> or <option>--force</option> option is not given, or the
<option>-i</option> or <option>--interactive=always</option> option <emph>is</emph> given,
<command>rm</command> prompts the user for whether to remove the file.
If the response is not affirmative, the file is skipped.
</para>
<para>Any attempt to remove a file whose last file name component is
<file>.</file> or <file>..</file> is rejected without any prompting.
</para>
<para><emph>Warning</emph>: If you use <command>rm</command> to remove a file, it is usually
possible to recover the contents of that file.  If you want more assurance
that the contents are truly unrecoverable, consider using <command>shred</command>.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-f</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--force</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-f</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;force</indexterm></indexcommand>
<para>Ignore nonexistent files and never prompt the user.
Ignore any previous <option>--interactive</option> (<option>-i</option>) option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-i</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-i</indexterm></indexcommand>
<para>Prompt whether to remove each file.
If the response is not affirmative, the file is skipped.
Ignore any previous <option>--force</option> (<option>-f</option>) option.
Equivalent to <option>--interactive=always</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-I</itemformat></item>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-I</indexterm></indexcommand>
<para>Prompt once whether to proceed with the command, if more than three
files are named or if a recursive removal is requested.  Ignore any
previous <option>--force</option> (<option>-f</option>) option.  Equivalent to
<option>--interactive=once</option>.
</para>
<itemx spaces=" "><itemformat command="samp">--interactive [=<var>when</var>]</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;interactive</indexterm></indexcommand>
<para>Specify when to issue an interactive prompt.  <var>when</var> may be
omitted, or one of:
</para><itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet" /></itemprepend>
<listitem spaces=" "><prepend>&bullet;</prepend><para>never
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">never <r>interactive option</r></indexterm></vindex>
- Do not prompt at all.
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>once
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">once <r>interactive option</r></indexterm></vindex>
- Prompt once if more than three files are named or if a recursive
removal is requested.  Equivalent to <option>-I</option>.
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>always
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">always <r>interactive option</r></indexterm></vindex>
- Prompt for every file being removed.  Equivalent to <option>-i</option>.
</para></listitem></itemize>
<para><option>--interactive</option> with no <var>when</var> is equivalent to
<option>--interactive=always</option>.
</para>
<itemx spaces=" "><itemformat command="samp">--one-file-system</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;one-file-system</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">one file system, restricting <command>rm</command> to</indexterm></cindex>
<para>When removing a hierarchy recursively, skip any directory that is on a
file system different from that of the corresponding command line argument.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">bind mount</indexterm></cindex>
<para>This option is useful when removing a build &textldquo;chroot&textrdquo; hierarchy,
which normally contains no valuable data.  However, it is not uncommon
to bind-mount <file>/home</file> into such a hierarchy, to make it easier to
use one&textrsquo;s start-up file.  The catch is that it&textrsquo;s easy to forget to
unmount <file>/home</file>.  Then, when you use <command>rm -rf</command> to remove
your normally throw-away chroot, that command will remove everything
under <file>/home</file>, too.
Use the <option>--one-file-system</option> option, and it will
warn about and skip directories on other file systems.
Of course, this will not save your <file>/home</file> if it and your
chroot happen to be on the same file system.
</para>
<itemx spaces=" "><itemformat command="samp">--preserve-root</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;preserve-root</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">root directory, disallow recursive destruction</indexterm></cindex>
<para>Fail upon any attempt to remove the root directory, <file>/</file>,
when used with the <option>--recursive</option> option.
This is the default behavior.
<xref><xrefnodename>Treating / specially</xrefnodename></xref>.
</para>
<itemx spaces=" "><itemformat command="samp">--no-preserve-root</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;no-preserve-root</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">root directory, allow recursive destruction</indexterm></cindex>
<para>Do not treat <file>/</file> specially when removing recursively.
This option is not recommended unless you really want to
remove all the files on your computer.
<xref><xrefnodename>Treating / specially</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-r</itemformat></item>
<itemx spaces=" "><itemformat command="samp">-R</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--recursive</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-r</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-R</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;recursive</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">directories, removing (recursively)</indexterm></cindex>
<para>Remove the listed directories and their contents recursively.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-v</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--verbose</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-v</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;verbose</indexterm></indexcommand>
<para>Print the name of each file before removing it.
</para>
</tableitem></tableentry></table>

<cindex index="cp" spaces=" "><indexterm index="cp">files beginning with <samp>-</samp>, removing</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp"><samp>-</samp>, removing files beginning with</indexterm></cindex>
<para>One common question is how to remove files whose names begin with a
<samp>-</samp>.  <sc>gnu</sc> <command>rm</command>, like every program that uses the <code>getopt</code>
function to parse its arguments, lets you use the <samp>--</samp> option to
indicate that all following arguments are non-options.  To remove a file
called <file>-f</file> in the current directory, you could type either:
</para>
<example endspaces=" ">
<pre xml:space="preserve">rm -- -f
</pre></example>

<noindent></noindent>
<para>or:
</para>
<example endspaces=" ">
<pre xml:space="preserve">rm ./-f
</pre></example>

<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">- <r>and Unix <command>rm</command></r></indexterm></indexcommand>
<para>The Unix <command>rm</command> program&textrsquo;s use of a single <samp>-</samp> for this purpose
predates the development of the getopt standard syntax.
</para>
<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="shred-invocation" spaces=" "><nodename>shred invocation</nodename><nodeprev automatic="on">rm invocation</nodeprev><nodeup automatic="on">Basic operations</nodeup></node>
<section spaces=" "><sectiontitle><command>shred</command>: Remove files more securely</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">shred</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">data, erasing</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">erasing data</indexterm></cindex>

<para><command>shred</command> overwrites devices or files, to help prevent even
very expensive hardware from recovering the data.
</para>
<para>Ordinarily when you remove a file (<pxref><xrefnodename>rm invocation</xrefnodename></pxref>), the data is
not actually destroyed.  Only the index listing where the file is
stored is destroyed, and the storage is made available for reuse.
There are undelete utilities that will attempt to reconstruct the index
and can bring the file back if the parts were not reused.
</para>
<para>On a busy system with a nearly-full drive, space can get reused in a few
seconds.  But there is no way to know for sure.  If you have sensitive
data, you may want to be sure that recovery is not possible by actually
overwriting the file with non-sensitive data.
</para>
<para>However, even after doing that, it is possible to take the disk back
to a laboratory and use a lot of sensitive (and expensive) equipment
to look for the faint &textldquo;echoes&textrdquo; of the original data underneath the
overwritten data.  If the data has only been overwritten once, it&textrsquo;s not
even that hard.
</para>
<para>The best way to remove something irretrievably is to destroy the media
it&textrsquo;s on with acid, melt it down, or the like.  For cheap removable media
like floppy disks, this is the preferred method.  However, hard drives
are expensive and hard to melt, so the <command>shred</command> utility tries
to achieve a similar effect non-destructively.
</para>
<para>This uses many overwrite passes, with the data patterns chosen to
maximize the damage they do to the old data.  While this will work on
floppies, the patterns are designed for best effect on hard drives.
For more details, see the source code and Peter Gutmann&textrsquo;s paper
<uref><urefurl>http://www.cs.auckland.ac.nz/~pgut001/pubs/secure_del.html</urefurl><urefdesc spaces="\n"><cite>Secure Deletion of Data from Magnetic and Solid-State Memory</cite></urefdesc></uref>,
from the proceedings of the Sixth <acronym><acronymword>USENIX</acronymword></acronym> Security Symposium (San Jose,
California, July 22&textndash;25, 1996).
</para>
<para><strong>Please note</strong> that <command>shred</command> relies on a very important assumption:
that the file system overwrites data in place.  This is the traditional
way to do things, but many modern file system designs do not satisfy this
assumption.  Exceptions include:
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet" /></itemprepend>
<beforefirstitem>
</beforefirstitem><listitem><prepend>&bullet;</prepend>
<para>Log-structured or journaled file systems, such as those supplied with
AIX and Solaris, and JFS, ReiserFS, XFS, Ext3 (in <code>data=journal</code> mode),
BFS, NTFS, etc.&noeos; when they are configured to journal <emph>data</emph>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>File systems that write redundant data and carry on even if some writes
fail, such as RAID-based file systems.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>File systems that make snapshots, such as Network Appliance&textrsquo;s NFS server.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>File systems that cache in temporary locations, such as NFS version 3
clients.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Compressed file systems.
</para></listitem></itemize>

<para>In the particular case of ext3 file systems, the above disclaimer applies (and
<command>shred</command> is thus of limited effectiveness) only in <code>data=journal</code>
mode, which journals file data in addition to just metadata. In both
the <code>data=ordered</code> (default) and <code>data=writeback</code> modes,
<command>shred</command> works as usual.  Ext3 journaling modes can be changed
by adding the <code>data=something</code> option to the mount options for a
particular file system in the <file>/etc/fstab</file> file, as documented in
the mount man page (man mount).
</para>
<para>If you are not sure how your file system operates, then you should assume
that it does not overwrite data in place, which means that shred cannot
reliably operate on regular files in your file system.
</para>
<para>Generally speaking, it is more reliable to shred a device than a file,
since this bypasses the problem of file system design mentioned above.
However, even shredding devices is not always completely reliable.  For
example, most disks map out bad sectors invisibly to the application; if
the bad sectors contain sensitive data, <command>shred</command> won&textrsquo;t be able to
destroy it.
</para>
<para><command>shred</command> makes no attempt to detect or report this problem, just as
it makes no attempt to do anything about backups.  However, since it is
more reliable to shred devices than files, <command>shred</command> by default does
not truncate or remove the output file.  This default is more suitable
for devices, which typically cannot be truncated and should not be
removed.
</para>
<para>Finally, consider the risk of backups and mirrors.
File system backups and remote mirrors may contain copies of the
file that cannot be removed, and that will allow a shredded file
to be recovered later.  So if you keep any data you may later want
to destroy using <command>shred</command>, be sure that it is not backed up or mirrored.
</para>
<example endspaces=" ">
<pre xml:space="preserve">shred [<var>option</var>]&dots; <var>file</var>[&dots;]
</pre></example>

<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-f</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--force</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-f</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;force</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">force deletion</indexterm></cindex>
<para>Override file permissions if necessary to allow overwriting.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-<var>number</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">-n <var>number</var></itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--iterations=<var>number</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-n <var>number</var></indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;iterations=<var>number</var></indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">iterations, selecting the number of</indexterm></cindex>
<para>By default, <command>shred</command> uses  passes of
overwrite. You can reduce this to save time, or increase it if you think it&textrsquo;s
appropriate. After 25 passes all of the internal overwrite patterns will have
been used at least once.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--random-source=<var>file</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;random-source</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">random source for shredding</indexterm></cindex>
<para>Use <var>file</var> as a source of random data used to overwrite and to
choose pass ordering.  <xref><xrefnodename>Random sources</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-s <var>bytes</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--size=<var>bytes</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-s <var>bytes</var></indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;size=<var>bytes</var></indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">size of file to shred</indexterm></cindex>
<para>Shred the first <var>bytes</var> bytes of the file.  The default is to shred
the whole file.  <var>bytes</var> can be followed by a size specification like
<samp>K</samp>, <samp>M</samp>, or <samp>G</samp> to specify a multiple.  <xref><xrefnodename>Block size</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-u</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--remove</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-u</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;remove</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">removing files after shredding</indexterm></cindex>
<para>After shredding a file, truncate it (if possible) and then remove it.
If a file has multiple links, only the named links will be removed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-v</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--verbose</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-v</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;verbose</indexterm></indexcommand>
<para>Display to standard error all status updates as sterilization proceeds.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-x</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--exact</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-x</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;exact</indexterm></indexcommand>
<para>By default, <command>shred</command> rounds the size of a regular file up to the next
multiple of the file system block size to fully erase the last block
of the file.
Use <option>--exact</option> to suppress that behavior.
Thus, by default if you shred a 10-byte regular file on a system with 512-byte
blocks, the resulting file will be 512 bytes long.  With this option,
shred does not increase the apparent size of the file.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-z</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--zero</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-z</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;zero</indexterm></indexcommand>
<para>Normally, the last pass that <command>shred</command> writes is made up of
random data.  If this would be conspicuous on your hard drive (for
example, because it looks like encrypted data), or you just think
it&textrsquo;s tidier, the <option>--zero</option> option adds an additional overwrite pass with
all zero bits.  This is in addition to the number of passes specified
by the <option>--iterations</option> option.
</para>
</tableitem></tableentry></table>

<para>You might use the following command to erase all trace of the
file system you&textrsquo;d created on the floppy disk in your first drive.
That command takes about 20 minutes to erase a &textldquo;1.44MB&textrdquo; (actually
1440 KiB) floppy.
</para>
<example endspaces=" ">
<pre xml:space="preserve">shred --verbose /dev/fd0
</pre></example>

<para>Similarly, to erase all data on a selected partition of
your hard disk, you could give a command like this:
</para>
<example endspaces=" ">
<pre xml:space="preserve">shred --verbose /dev/sda5
</pre></example>

<para>On modern disks, a single pass should be adequate,
and it will take one third the time of the default three-pass approach.
</para>
<example endspaces=" ">
<pre xml:space="preserve"># 1 pass, write pseudo-random data; 3x faster than the default
shred --verbose -n1 /dev/sda5
</pre></example>

<para>To be on the safe side, use at least one pass that overwrites using
pseudo-random data.  I.e., don&textrsquo;t be tempted to use <samp>-n0 --zero</samp>,
in case some disk controller optimizes the process of writing blocks
of all zeros, and thereby does not clear all bytes in a block.
Some SSDs may do just that.
</para>
<para>A <var>file</var> of <samp>-</samp> denotes standard output.
The intended use of this is to shred a removed temporary file.
For example:
</para>
<example endspaces=" ">
<pre xml:space="preserve">i=`mktemp`
exec 3&lt;&gt;&quot;$i&quot;
rm -- &quot;$i&quot;
echo &quot;Hello, world&quot; &gt;&amp;3
shred - &gt;&amp;3
exec 3&gt;-
</pre></example>

<para>However, the command <samp>shred - &gt;file</samp> does not shred the contents
of <var>file</var>, since the shell truncates <var>file</var> before invoking
<command>shred</command>.  Use the command <samp>shred file</samp> or (if using a
Bourne-compatible shell) the command <samp>shred - 1&lt;&gt;file</samp> instead.
</para>
<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
</chapter>
<node name="Special-file-types" spaces=" "><nodename>Special file types</nodename><nodenext automatic="on">Changing file attributes</nodenext><nodeprev automatic="on">Basic operations</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>Special file types</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">special file types</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">file types, special</indexterm></cindex>

<para>This chapter describes commands which create special types of files (and
<command>rmdir</command>, which removes directories, one special file type).
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">special file types</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">file types</indexterm></cindex>
<para>Although Unix-like operating systems have markedly fewer special file
types than others, not <emph>everything</emph> can be treated only as the
undifferentiated byte stream of <dfn>normal files</dfn>.  For example, when a
file is created or removed, the system must record this information,
which it does in a <dfn>directory</dfn>&textmdash;a special type of file.  Although
you can read directories as normal files, if you&textrsquo;re curious, in order
for the system to do its job it must impose a structure, a certain
order, on the bytes of the file.  Thus it is a &textldquo;special&textrdquo; type of file.
</para>
<para>Besides directories, other special file types include named pipes
(FIFOs), symbolic links, sockets, and so-called <dfn>special files</dfn>.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::             ">link invocation</menunode><menudescription><pre xml:space="preserve">Make a hard link via the link syscall
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::               ">ln invocation</menunode><menudescription><pre xml:space="preserve">Make links between files.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">mkdir invocation</menunode><menudescription><pre xml:space="preserve">Make directories.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::           ">mkfifo invocation</menunode><menudescription><pre xml:space="preserve">Make FIFOs (named pipes).
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">mknod invocation</menunode><menudescription><pre xml:space="preserve">Make block or character special files.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::         ">readlink invocation</menunode><menudescription><pre xml:space="preserve">Print value of a symlink or canonical file name.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">rmdir invocation</menunode><menudescription><pre xml:space="preserve">Remove empty directories.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::           ">unlink invocation</menunode><menudescription><pre xml:space="preserve">Remove files via the unlink syscall
</pre></menudescription></menuentry></menu>


<node name="link-invocation" spaces=" "><nodename>link invocation</nodename><nodenext automatic="on">ln invocation</nodenext><nodeup automatic="on">Special file types</nodeup></node>
<section spaces=" "><sectiontitle><command>link</command>: Make a hard link via the link syscall</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">link</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">links, creating</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">hard links, creating</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">creating links (hard only)</indexterm></cindex>

<para><command>link</command> creates a single hard link at a time.
It is a minimalist interface to the system-provided
<code>link</code> function.  <xref><xrefnodename>Hard Links</xrefnodename><xrefinfoname spaces=" "></xrefinfoname><xrefprinteddesc spaces=" "></xrefprinteddesc><xrefinfofile spaces=" ">libc</xrefinfofile><xrefprintedname spaces="\n">The GNU C Library Reference Manual</xrefprintedname></xref>.
It avoids the bells and whistles of the more commonly-used
<command>ln</command> command (<pxref><xrefnodename>ln invocation</xrefnodename></pxref>).
Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">link <var>filename</var> <var>linkname</var>
</pre></example>

<para><var>filename</var> must specify an existing file, and <var>linkname</var>
must specify a nonexistent entry in an existing directory.
<command>link</command> simply calls <code>link (<var>filename</var>, <var>linkname</var>)</code>
to create the link.
</para>
<para>On a <acronym><acronymword>GNU</acronymword></acronym> system, this command acts like <samp>ln --directory
--no-target-directory <var>filename</var> <var>linkname</var></samp>.  However, the
<option>--directory</option> and <option>--no-target-directory</option> options are
not specified by <acronym><acronymword>POSIX</acronymword></acronym>, and the <command>link</command> command is
more portable in practice.
</para>
<para>If <var>filename</var> is a symbolic link, it is unspecified whether
<var>linkname</var> will be a hard link to the symbolic link or to the
target of the symbolic link.  Use <command>ln -P</command> or <command>ln -L</command>
to specify which behavior is desired.
</para>
<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="ln-invocation" spaces=" "><nodename>ln invocation</nodename><nodenext automatic="on">mkdir invocation</nodenext><nodeprev automatic="on">link invocation</nodeprev><nodeup automatic="on">Special file types</nodeup></node>
<section spaces=" "><sectiontitle><command>ln</command>: Make links between files</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">ln</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">links, creating</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">hard links, creating</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">symbolic (soft) links, creating</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">creating links (hard or soft)</indexterm></cindex>

<cindex index="cp" spaces=" "><indexterm index="cp">file systems and hard links</indexterm></cindex>
<para><command>ln</command> makes links between files.  By default, it makes hard links;
with the <option>-s</option> option, it makes symbolic (or <dfn>soft</dfn>) links.
Synopses:
</para>
<example endspaces=" ">
<pre xml:space="preserve">ln [<var>option</var>]&dots; [-T] <var>target</var> <var>linkname</var>
ln [<var>option</var>]&dots; <var>target</var>
ln [<var>option</var>]&dots; <var>target</var>&dots; <var>directory</var>
ln [<var>option</var>]&dots; -t <var>directory</var> <var>target</var>&dots;
</pre></example>

<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet" /></itemprepend>
<beforefirstitem>
</beforefirstitem><listitem><prepend>&bullet;</prepend>
<para>If two file names are given, <command>ln</command> creates a link to the first
file from the second.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>If one <var>target</var> is given, <command>ln</command> creates a link to that file
in the current directory.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>If the <option>--target-directory</option> (<option>-t</option>) option is given, or
failing that if the last file is a directory and the
<option>--no-target-directory</option> (<option>-T</option>) option is not given,
<command>ln</command> creates a link to each <var>target</var> file in the specified
directory, using the <var>target</var>s&textrsquo; names.
</para>
</listitem></itemize>

<para>Normally <command>ln</command> does not remove existing files.  Use the
<option>--force</option> (<option>-f</option>) option to remove them unconditionally,
the <option>--interactive</option> (<option>-i</option>) option to remove them
conditionally, and the <option>--backup</option> (<option>-b</option>) option to
rename them.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">hard link, defined</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">inode, and hard links</indexterm></cindex>
<para>A <dfn>hard link</dfn> is another name for an existing file; the link and the
original are indistinguishable.  Technically speaking, they share the
same inode, and the inode contains all the information about a
file&textmdash;indeed, it is not incorrect to say that the inode <emph>is</emph> the
file.  Most systems prohibit making a hard link to
a directory; on those where it is allowed, only the super-user can do
so (and with caution, since creating a cycle will cause problems to many
other utilities).  Hard links cannot cross file system boundaries.  (These
restrictions are not mandated by <acronym><acronymword>POSIX</acronymword></acronym>, however.)
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">dereferencing symbolic links</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">symbolic link, defined</indexterm></cindex>
<para><dfn>Symbolic links</dfn> (<dfn>symlinks</dfn> for short), on the other hand, are
a special file type (which not all kernels support: System V release 3
(and older) systems lack symlinks) in which the link file actually
refers to a different file, by name.  When most operations (opening,
reading, writing, and so on) are passed the symbolic link file, the
kernel automatically <dfn>dereferences</dfn> the link and operates on the
target of the link.  But some operations (e.g., removing) work on the
link file itself, rather than on its target.  The owner and group of a
symlink are not significant to file access performed through
the link, but do have implications on deleting a symbolic link from a
directory with the restricted deletion bit set.  On the GNU system,
the mode of a symlink has no significance and cannot be changed, but
on some BSD systems, the mode can be changed and will affect whether
the symlink will be traversed in file name resolution.  <xref><xrefnodename>Symbolic Links</xrefnodename><xrefinfofile spaces="\n">libc</xrefinfofile><xrefprintedname spaces=" ">The GNU C Library Reference Manual</xrefprintedname></xref>.
</para>
<para>Symbolic links can contain arbitrary strings; a <dfn>dangling symlink</dfn>
occurs when the string in the symlink does not resolve to a file.
There are no restrictions against creating dangling symbolic links.
There are trade-offs to using absolute or relative symlinks.  An
absolute symlink always points to the same file, even if the directory
containing the link is moved.  However, if the symlink is visible from
more than one machine (such as on a networked file system), the file
pointed to might not always be the same.  A relative symbolic link is
resolved in relation to the directory that contains the link, and is
often useful in referring to files on the same device without regards
to what name that device is mounted on when accessed via networked
machines.
</para>
<para>When creating a relative symlink in a different location than the
current directory, the resolution of the symlink will be different
than the resolution of the same string from the current directory.
Therefore, many users prefer to first change directories to the
location where the relative symlink will be created, so that
tab-completion or other file resolution will find the same target as
what will be placed in the symlink.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-b</itemformat></item>
<itemx spaces=" "><itemformat command="samp"><w><kbd>--backup</kbd>[=<var>method</var>]</w></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-b</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;backup</indexterm></indexcommand>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">VERSION_CONTROL</indexterm></vindex>
<cindex index="cp" spaces=" "><indexterm index="cp">backups, making</indexterm></cindex>
<para><xref><xrefnodename>Backup options</xrefnodename></xref>.
Make a backup of each file that would otherwise be overwritten or removed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-d</itemformat></item>
<itemx spaces=" "><itemformat command="samp">-F</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--directory</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-d</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-F</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;directory</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">hard links to directories</indexterm></cindex>
<para>Allow users with appropriate privileges to attempt to make hard links
to directories.
However, note that this will probably fail due to
system restrictions, even for the super-user.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-f</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--force</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-f</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;force</indexterm></indexcommand>
<para>Remove existing destination files.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-i</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--interactive</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-i</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;interactive</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">prompting, and <command>ln</command></indexterm></cindex>
<para>Prompt whether to remove existing destination files.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-L</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--logical</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-L</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;logical</indexterm></indexcommand>
<para>If <option>-s</option> is not in effect, and the source file is a symbolic
link, create the hard link to the file referred to by the symbolic
link, rather than the symbolic link itself.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-n</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--no-dereference</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-n</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;no-dereference</indexterm></indexcommand>
<para>Do not treat the last operand specially when it is a symbolic link to
a directory.  Instead, treat it as if it were a normal file.
</para>
<para>When the destination is an actual directory (not a symlink to one),
there is no ambiguity.  The link is created in that directory.
But when the specified destination is a symlink to a directory,
there are two ways to treat the user&textrsquo;s request.  <command>ln</command> can
treat the destination just as it would a normal directory and create
the link in it.  On the other hand, the destination can be viewed as a
non-directory&textmdash;as the symlink itself.  In that case, <command>ln</command>
must delete or backup that symlink before creating the new link.
The default is to treat a destination that is a symlink to a directory
just like a directory.
</para>
<para>This option is weaker than the <option>--no-target-directory</option>
(<option>-T</option>) option, so it has no effect if both options are given.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-P</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--physical</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-P</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;physical</indexterm></indexcommand>
<para>If <option>-s</option> is not in effect, and the source file is a symbolic
link, create the hard link to the symbolic link itself.  On platforms
where this is not supported by the kernel, this option creates a
symbolic link with identical contents; since symbolic link contents
cannot be edited, any file name resolution performed through either
link will be the same as if a hard link had been created.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-s</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--symbolic</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-s</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;symbolic</indexterm></indexcommand>
<para>Make symbolic links instead of hard links.  This option merely produces
an error message on systems that do not support symbolic links.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-S <var>suffix</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--suffix=<var>suffix</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-S</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;suffix</indexterm></indexcommand>
<para>Append <var>suffix</var> to each backup file made with <option>-b</option>.
<xref><xrefnodename>Backup options</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-t <var>directory</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp"><w><kbd>--target-directory</kbd>=<var>directory</var></w></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-t</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;target-directory</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">target directory</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">destination directory</indexterm></cindex>
<para>Specify the destination <var>directory</var>.
<xref><xrefnodename>Target directory</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-T</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--no-target-directory</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-T</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;no-target-directory</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">target directory</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">destination directory</indexterm></cindex>
<para>Do not treat the last operand specially when it is a directory or a
symbolic link to a directory.  <xref><xrefnodename>Target directory</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-v</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--verbose</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-v</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;verbose</indexterm></indexcommand>
<para>Print the name of each file after linking it successfully.
</para>
</tableitem></tableentry></table>

<cindex index="cp" spaces=" "><indexterm index="cp">hard links to symbolic links</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">symbolic links and <command>ln</command></indexterm></cindex>
<para>If <option>-L</option> and <option>-P</option> are both given, the last one takes
precedence.  If <option>-s</option> is also given, <option>-L</option> and <option>-P</option>
are silently ignored.  If neither option is given, then this
implementation defaults to <option>-P</option> if the system <code>link</code> supports
hard links to symbolic links (such as the GNU system), and <option>-L</option>
if <code>link</code> follows symbolic links (such as on BSD).
</para>
<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>
<para>Examples:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">Bad Example:

# Create link ../a pointing to a in that directory.
# Not really useful because it points to itself.
ln -s a ..

Better Example:

# Change to the target before creating symlinks to avoid being confused.
cd ..
ln -s adir/a .

Bad Example:

# Hard coded file names don't move well.
ln -s $(pwd)/a /some/dir/

Better Example:

# Relative file names survive directory moves and also
# work across networked file systems.
ln -s afile anotherfile
ln -s ../adir/afile yetanotherfile
</pre></smallexample>


</section>
<node name="mkdir-invocation" spaces=" "><nodename>mkdir invocation</nodename><nodenext automatic="on">mkfifo invocation</nodenext><nodeprev automatic="on">ln invocation</nodeprev><nodeup automatic="on">Special file types</nodeup></node>
<section spaces=" "><sectiontitle><command>mkdir</command>: Make directories</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">mkdir</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">directories, creating</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">creating directories</indexterm></cindex>

<para><command>mkdir</command> creates directories with the specified names.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">mkdir [<var>option</var>]&dots; <var>name</var>&dots;
</pre></example>

<para><command>mkdir</command> creates each directory <var>name</var> in the order given.
It reports an error if <var>name</var> already exists, unless the
<option>-p</option> option is given and <var>name</var> is a directory.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-m <var>mode</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--mode=<var>mode</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-m</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;mode</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">modes of created directories, setting</indexterm></cindex>
<para>Set the file permission bits of created directories to <var>mode</var>,
which uses the same syntax as
in <command>chmod</command> and uses <samp>a=rwx</samp> (read, write and execute allowed for
everyone) for the point of the departure.  <xref><xrefnodename>File permissions</xrefnodename></xref>.
</para>
<para>Normally the directory has the desired file mode bits at the moment it
is created.  As a <acronym><acronymword>GNU</acronymword></acronym> extension, <var>mode</var> may also mention
special mode bits, but in this case there may be a temporary window
during which the directory exists but its special mode bits are
incorrect.  <xref><xrefnodename>Directory Setuid and Setgid</xrefnodename></xref>, for how the
set-user-ID and set-group-ID bits of directories are inherited unless
overridden in this way.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-p</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--parents</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-p</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;parents</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">parent directories, creating</indexterm></cindex>
<para>Make any missing parent directories for each argument, setting their
file permission bits to the umask modified by <samp>u+wx</samp>.  Ignore
existing parent directories, and do not change their file permission
bits.
</para>
<para>To set the file permission bits of any newly-created parent
directories to a value that includes <samp>u+wx</samp>, you can set the
umask before invoking <command>mkdir</command>.  For example, if the shell
command <samp>(umask u=rwx,go=rx; mkdir -p P/Q)</samp> creates the parent
<file>P</file> it sets the parent&textrsquo;s permission bits to <samp>u=rwx,go=rx</samp>.
To set a parent&textrsquo;s special mode bits as well, you can invoke
<command>chmod</command> after <command>mkdir</command>.  <xref><xrefnodename>Directory Setuid and
Setgid</xrefnodename></xref>, for how the set-user-ID and set-group-ID bits of
newly-created parent directories are inherited.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-v</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--verbose</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-v</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;verbose</indexterm></indexcommand>
<para>Print a message for each created directory.  This is most useful with
<option>--parents</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-Z <var>context</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--context=<var>context</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-Z</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;context</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">SELinux</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">security context</indexterm></cindex>
<para>Set the default SELinux security context to be used for created directories.
</para>
</tableitem></tableentry></table>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="mkfifo-invocation" spaces=" "><nodename>mkfifo invocation</nodename><nodenext automatic="on">mknod invocation</nodenext><nodeprev automatic="on">mkdir invocation</nodeprev><nodeup automatic="on">Special file types</nodeup></node>
<section spaces=" "><sectiontitle><command>mkfifo</command>: Make FIFOs (named pipes)</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">mkfifo</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">FIFOs, creating</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">named pipes, creating</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">creating FIFOs (named pipes)</indexterm></cindex>

<para><command>mkfifo</command> creates FIFOs (also called <dfn>named pipes</dfn>) with the
specified names.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">mkfifo [<var>option</var>] <var>name</var>&dots;
</pre></example>

<para>A <dfn>FIFO</dfn> is a special file type that permits independent processes
to communicate.  One process opens the FIFO file for writing, and
another for reading, after which data can flow as with the usual
anonymous pipe in shells or elsewhere.
</para>
<para>The program accepts the following option.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-m <var>mode</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--mode=<var>mode</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-m</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;mode</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">modes of created FIFOs, setting</indexterm></cindex>
<para>Set the mode of created FIFOs to <var>mode</var>, which is symbolic as in
<command>chmod</command> and uses <samp>a=rw</samp> (read and write allowed for everyone)
for the point of departure.  <var>mode</var> should specify only file
permission bits.  <xref><xrefnodename>File permissions</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-Z <var>context</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--context=<var>context</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-Z</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;context</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">SELinux</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">security context</indexterm></cindex>
<para>Set the default SELinux security context to be used for created FIFOs.
</para>
</tableitem></tableentry></table>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="mknod-invocation" spaces=" "><nodename>mknod invocation</nodename><nodenext automatic="on">readlink invocation</nodenext><nodeprev automatic="on">mkfifo invocation</nodeprev><nodeup automatic="on">Special file types</nodeup></node>
<section spaces=" "><sectiontitle><command>mknod</command>: Make block or character special files</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">mknod</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">block special files, creating</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">character special files, creating</indexterm></cindex>

<para><command>mknod</command> creates a FIFO, character special file, or block special
file with the specified name.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">mknod [<var>option</var>]&dots; <var>name</var> <var>type</var> [<var>major</var> <var>minor</var>]
</pre></example>

<cindex index="cp" spaces=" "><indexterm index="cp">special files</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">block special files</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">character special files</indexterm></cindex>
<para>Unlike the phrase &textldquo;special file type&textrdquo; above, the term <dfn>special
file</dfn> has a technical meaning on Unix: something that can generate or
receive data.  Usually this corresponds to a physical piece of hardware,
e.g., a printer or a disk.  (These files are typically created at
system-configuration time.)  The <command>mknod</command> command is what creates
files of this type.  Such devices can be read either a character at a
time or a &textldquo;block&textrdquo; (many characters) at a time, hence we say there are
<dfn>block special</dfn> files and <dfn>character special</dfn> files.
</para>
<!-- c mknod is a shell built-in at least with OpenBSD's /bin/sh -->
<cindex index="cp" spaces=" "><indexterm index="cp">conflicts with shell built-ins</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">built-in shell commands, conflicts with</indexterm></cindex>
<para>Due to shell aliases and built-in <command>mknod</command> functions, using an
unadorned <command>mknod</command> interactively or in a script may get you
different functionality than that described here.  Invoke it via
<command>env</command> (i.e., <code>env mknod &dots;</code>) to avoid interference
from the shell.
</para>

<para>The arguments after <var>name</var> specify the type of file to make:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">p</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">p <r>for FIFO file</r></indexterm></indexcommand>
<para>for a FIFO
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">b</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">b <r>for block special file</r></indexterm></indexcommand>
<para>for a block special file
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">c</itemformat></item>
</tableterm><tableitem><!-- c Don't document the `u' option - it's just a synonym for `c'. -->
<!-- c Do *any* versions of mknod still use it? -->
<!-- c @itemx u -->
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">c <r>for character special file</r></indexterm></indexcommand>
<!-- c @opindex u @r{for character special file} -->
<para>for a character special file
</para>
</tableitem></tableentry></table>

<para>When making a block or character special file, the major and minor
device numbers must be given after the file type.
If a major or minor device number begins with <samp>0x</samp> or <samp>0X</samp>,
it is interpreted as hexadecimal; otherwise, if it begins with <samp>0</samp>,
as octal; otherwise, as decimal.
</para>
<para>The program accepts the following option.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-m <var>mode</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--mode=<var>mode</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-m</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;mode</indexterm></indexcommand>
<para>Set the mode of created files to <var>mode</var>, which is symbolic as in
<command>chmod</command> and uses <samp>a=rw</samp> as the point of departure.
<var>mode</var> should specify only file permission bits.
<xref><xrefnodename>File permissions</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-Z <var>context</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--context=<var>context</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-Z</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;context</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">SELinux</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">security context</indexterm></cindex>
<para>Set the default SELinux security context to be used for created files.
</para>
</tableitem></tableentry></table>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="readlink-invocation" spaces=" "><nodename>readlink invocation</nodename><nodenext automatic="on">rmdir invocation</nodenext><nodeprev automatic="on">mknod invocation</nodeprev><nodeup automatic="on">Special file types</nodeup></node>
<section spaces=" "><sectiontitle><command>readlink</command>: Print value of a symlink or canonical file name</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">readlink</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">displaying value of a symbolic link</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">canonical file name</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">canonicalize a file name</indexterm></cindex>
<findex index="fn" spaces=" "><indexterm index="fn" mergedindex="cp">realpath</indexterm></findex>

<para><command>readlink</command> may work in one of two supported modes:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">Readlink mode</itemformat></item>
</tableterm><tableitem>
<para><command>readlink</command> outputs the value of the given symbolic link.
If <command>readlink</command> is invoked with an argument other than the name
of a symbolic link, it produces no output and exits with a nonzero exit code.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">Canonicalize mode</itemformat></item>
</tableterm><tableitem>
<para><command>readlink</command> outputs the absolute name of the given file which contains
no <file>.</file>, <file>..</file> components nor any repeated separators
(<file>/</file>) or symbolic links.
</para>
</tableitem></tableentry></table>

<example endspaces=" ">
<pre xml:space="preserve">readlink [<var>option</var>] <var>file</var>
</pre></example>

<para>By default, <command>readlink</command> operates in readlink mode.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-f</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--canonicalize</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-f</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;canonicalize</indexterm></indexcommand>
<para>Activate canonicalize mode.
If any component of the file name except the last one is missing or unavailable,
<command>readlink</command> produces no output and exits with a nonzero exit
code.  A trailing slash is ignored.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-e</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--canonicalize-existing</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-e</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;canonicalize-existing</indexterm></indexcommand>
<para>Activate canonicalize mode.
If any component is missing or unavailable, <command>readlink</command> produces
no output and exits with a nonzero exit code.  A trailing slash
requires that the name resolve to a directory.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-m</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--canonicalize-missing</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-m</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;canonicalize-missing</indexterm></indexcommand>
<para>Activate canonicalize mode.
If any component is missing or unavailable, <command>readlink</command> treats it
as a directory.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-n</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--no-newline</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-n</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;no-newline</indexterm></indexcommand>
<para>Do not output the trailing newline.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-s</itemformat></item>
<itemx spaces=" "><itemformat command="samp">-q</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--silent</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--quiet</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-s</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-q</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;silent</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;quiet</indexterm></indexcommand>
<para>Suppress most error messages.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-v</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--verbose</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-v</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;verbose</indexterm></indexcommand>
<para>Report error messages.
</para>
</tableitem></tableentry></table>

<para>The <command>readlink</command> utility first appeared in OpenBSD 2.1.
</para>
<para>The <command>realpath</command> command without options, operates like
<command>readlink</command> in canonicalize mode.
</para>
<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="rmdir-invocation" spaces=" "><nodename>rmdir invocation</nodename><nodenext automatic="on">unlink invocation</nodenext><nodeprev automatic="on">readlink invocation</nodeprev><nodeup automatic="on">Special file types</nodeup></node>
<section spaces=" "><sectiontitle><command>rmdir</command>: Remove empty directories</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">rmdir</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">removing empty directories</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">directories, removing empty</indexterm></cindex>

<para><command>rmdir</command> removes empty directories.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">rmdir [<var>option</var>]&dots; <var>directory</var>&dots;
</pre></example>

<para>If any <var>directory</var> argument does not refer to an existing empty
directory, it is an error.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">--ignore-fail-on-non-empty</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;ignore-fail-on-non-empty</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">directory deletion, ignoring failures</indexterm></cindex>
<para>Ignore each failure to remove a directory that is solely because
the directory is non-empty.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-p</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--parents</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-p</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;parents</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">parent directories, removing</indexterm></cindex>
<para>Remove <var>directory</var>, then try to remove each component of <var>directory</var>.
So, for example, <samp>rmdir -p a/b/c</samp> is similar to <samp>rmdir a/b/c a/b a</samp>.
As such, it fails if any of those directories turns out not to be empty.
Use the <option>--ignore-fail-on-non-empty</option> option to make it so such
a failure does not evoke a diagnostic and does not cause <command>rmdir</command> to
exit unsuccessfully.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-v</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--verbose</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-v</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;verbose</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">directory deletion, reporting</indexterm></cindex>
<para>Give a diagnostic for each successful removal.
<var>directory</var> is removed.
</para>
</tableitem></tableentry></table>

<para><xref><xrefnodename>rm invocation</xrefnodename></xref>, for how to remove non-empty directories (recursively).
</para>
<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="unlink-invocation" spaces=" "><nodename>unlink invocation</nodename><nodeprev automatic="on">rmdir invocation</nodeprev><nodeup automatic="on">Special file types</nodeup></node>
<section spaces=" "><sectiontitle><command>unlink</command>: Remove files via the unlink syscall</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">unlink</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">removing files or directories (via the unlink syscall)</indexterm></cindex>

<para><command>unlink</command> deletes a single specified file name.
It is a minimalist interface to the system-provided
<code>unlink</code> function.  <xref><xrefnodename>Deleting Files</xrefnodename><xrefinfoname spaces=" "></xrefinfoname><xrefprinteddesc spaces=" "></xrefprinteddesc><xrefinfofile spaces=" ">libc</xrefinfofile><xrefprintedname spaces="\n">The GNU C Library Reference Manual</xrefprintedname></xref>.  Synopsis:
It avoids the bells and whistles of the more commonly-used
<command>rm</command> command (<pxref><xrefnodename>rm invocation</xrefnodename></pxref>).
</para>
<example endspaces=" ">
<pre xml:space="preserve">unlink <var>filename</var>
</pre></example>

<para>On some systems <code>unlink</code> can be used to delete the name of a
directory.  On others, it can be used that way only by a privileged user.
In the GNU system <code>unlink</code> can never delete the name of a directory.
</para>
<para>The <command>unlink</command> command honors the <option>--help</option> and
<option>--version</option> options.  To remove a file whose name begins with
<samp>-</samp>, prefix the name with <samp>./</samp>, e.g., <samp>unlink ./--help</samp>.
</para>
<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
</chapter>
<node name="Changing-file-attributes" spaces=" "><nodename>Changing file attributes</nodename><nodenext automatic="on">Disk usage</nodenext><nodeprev automatic="on">Special file types</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>Changing file attributes</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">changing file attributes</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">file attributes, changing</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">attributes, file</indexterm></cindex>

<para>A file is not merely its contents, a name, and a file type
(<pxref><xrefnodename>Special file types</xrefnodename></pxref>).  A file also has an owner (a user ID), a
group (a group ID), permissions (what the owner can do with the file,
what people in the group can do, and what everyone else can do), various
timestamps, and other information.  Collectively, we call these a file&textrsquo;s
<dfn>attributes</dfn>.
</para>
<para>These commands change file attributes.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::            ">chgrp invocation</menunode><menudescription><pre xml:space="preserve">Change file groups.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">chmod invocation</menunode><menudescription><pre xml:space="preserve">Change access permissions.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">chown invocation</menunode><menudescription><pre xml:space="preserve">Change file owners and groups.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">touch invocation</menunode><menudescription><pre xml:space="preserve">Change file timestamps.
</pre></menudescription></menuentry></menu>


<node name="chown-invocation" spaces=" "><nodename>chown invocation</nodename><nodenext automatic="on">chgrp invocation</nodenext><nodeprev automatic="on">chmod invocation</nodeprev><nodeup automatic="on">Changing file attributes</nodeup></node>
<section spaces=" "><sectiontitle><command>chown</command>: Change file owner and group</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">chown</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">file ownership, changing</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">group ownership, changing</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">changing file ownership</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">changing group ownership</indexterm></cindex>

<para><command>chown</command> changes the user and/or group ownership of each given <var>file</var>
to <var>new-owner</var> or to the user and group of an existing reference file.
Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">chown [<var>option</var>]&dots; &lbrace;<var>new-owner</var> | --reference=<var>ref_file</var>&rbrace;<!-- c -->
 <var>file</var>&dots;
</pre></example>

<para>If used, <var>new-owner</var> specifies the new owner and/or group as follows
(with no embedded white space):
</para>
<example endspaces=" ">
<pre xml:space="preserve">[<var>owner</var>] [ : [<var>group</var>] ]
</pre></example>

<para>Specifically:
</para>
<table commandarg="var" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="var">owner</itemformat></item>
</tableterm><tableitem><para>If only an <var>owner</var> (a user name or numeric user ID) is given, that
user is made the owner of each given file, and the files&textrsquo; group is not
changed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="var">owner<samp>:</samp>group</itemformat></item>
</tableterm><tableitem><para>If the <var>owner</var> is followed by a colon and a <var>group</var> (a
group name or numeric group ID), with no spaces between them, the group
ownership of the files is changed as well (to <var>group</var>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="var">owner<samp>:</samp></itemformat></item>
</tableterm><tableitem><para>If a colon but no group name follows <var>owner</var>, that user is
made the owner of the files and the group of the files is changed to
<var>owner</var>&textrsquo;s login group.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="var"><samp>:</samp>group</itemformat></item>
</tableterm><tableitem><para>If the colon and following <var>group</var> are given, but the owner
is omitted, only the group of the files is changed; in this case,
<command>chown</command> performs the same function as <command>chgrp</command>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="var"><samp>:</samp></itemformat></item>
</tableterm><tableitem><para>If only a colon is given, or if <var>new-owner</var> is empty, neither the
owner nor the group is changed.
</para>
</tableitem></tableentry></table>

<para>If <var>owner</var> or <var>group</var> is intended to represent a numeric user
or group ID, then you may specify it with a leading <samp>+</samp>.
<xref><xrefnodename>Disambiguating names and IDs</xrefnodename></xref>.
</para>
<para>Some older scripts may still use <samp>.</samp> in place of the <samp>:</samp> separator.
<acronym><acronymword>POSIX</acronymword></acronym> 1003.1-2001 (<pxref><xrefnodename>Standards conformance</xrefnodename></pxref>) does not
require support for that, but for backward compatibility <acronym><acronymword>GNU</acronymword></acronym>
<command>chown</command> supports <samp>.</samp> so long as no ambiguity results.
New scripts should avoid the use of <samp>.</samp> because it is not
portable, and because it has undesirable results if the entire
<var>owner<samp>.</samp>group</var> happens to identify a user whose name
contains <samp>.</samp>.
</para>
<para>The <command>chown</command> command sometimes clears the set-user-ID or
set-group-ID permission bits.  This behavior depends on the policy and
functionality of the underlying <code>chown</code> system call, which may
make system-dependent file mode modifications outside the control of
the <command>chown</command> command.  For example, the <command>chown</command> command
might not affect those bits when invoked by a user with appropriate
privileges, or when the
bits signify some function other than executable permission (e.g.,
mandatory locking).
When in doubt, check the underlying system behavior.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-c</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--changes</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-c</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;changes</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">changed owners, verbosely describing</indexterm></cindex>
<para>Verbosely describe the action for each <var>file</var> whose ownership
actually changes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-f</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--silent</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--quiet</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-f</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;silent</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;quiet</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">error messages, omitting</indexterm></cindex>
<para>Do not print error messages about files whose ownership cannot be
changed.
</para>
<itemx spaces=" "><itemformat command="samp"><w><kbd>--from</kbd>=<var>old-owner</var></w></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;from</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">symbolic links, changing owner</indexterm></cindex>
<para>Change a <var>file</var>&textrsquo;s ownership only if it has current attributes specified
by <var>old-owner</var>.  <var>old-owner</var> has the same form as <var>new-owner</var>
described above.
This option is useful primarily from a security standpoint in that
it narrows considerably the window of potential abuse.
For example, to reflect a user ID numbering change for one user&textrsquo;s files
without an option like this, <code>root</code> might run
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">find / -owner OLDUSER -print0 | xargs -0 chown -h NEWUSER
</pre></smallexample>

<para>But that is dangerous because the interval between when the <command>find</command>
tests the existing file&textrsquo;s owner and when the <command>chown</command> is actually run
may be quite large.
One way to narrow the gap would be to invoke chown for each file
as it is found:
</para>
<example endspaces=" ">
<pre xml:space="preserve">find / -owner OLDUSER -exec chown -h NEWUSER &lbrace;&rbrace; \;
</pre></example>

<para>But that is very slow if there are many affected files.
With this option, it is safer (the gap is narrower still)
though still not perfect:
</para>
<example endspaces=" ">
<pre xml:space="preserve">chown -h -R --from=OLDUSER NEWUSER /
</pre></example>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--dereference</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;dereference</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">symbolic links, changing owner</indexterm></cindex>
<findex index="fn" spaces=" "><indexterm index="fn" mergedindex="cp">lchown</indexterm></findex>
<para>Do not act on symbolic links themselves but rather on what they point to.
This is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-h</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--no-dereference</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-h</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;no-dereference</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">symbolic links, changing owner</indexterm></cindex>
<findex index="fn" spaces=" "><indexterm index="fn" mergedindex="cp">lchown</indexterm></findex>
<para>Act on symbolic links themselves instead of what they point to.
This mode relies on the <code>lchown</code> system call.
On systems that do not provide the <code>lchown</code> system call,
<command>chown</command> fails when a file specified on the command line
is a symbolic link.
By default, no diagnostic is issued for symbolic links encountered
during a recursive traversal, but see <option>--verbose</option>.
</para>
<itemx spaces=" "><itemformat command="samp">--preserve-root</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;preserve-root</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">root directory, disallow recursive modification</indexterm></cindex>
<para>Fail upon any attempt to recursively change the root directory, <file>/</file>.
Without <option>--recursive</option>, this option has no effect.
<xref><xrefnodename>Treating / specially</xrefnodename></xref>.
</para>
<itemx spaces=" "><itemformat command="samp">--no-preserve-root</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;no-preserve-root</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">root directory, allow recursive modification</indexterm></cindex>
<para>Cancel the effect of any preceding <option>--preserve-root</option> option.
<xref><xrefnodename>Treating / specially</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--reference=<var>ref_file</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;reference</indexterm></indexcommand>
<para>Change the user and group of each <var>file</var> to be the same as those of
<var>ref_file</var>.  If <var>ref_file</var> is a symbolic link, do not use the
user and group of the symbolic link, but rather those of the file it
refers to.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-v</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--verbose</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-v</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;verbose</indexterm></indexcommand>
<para>Output a diagnostic for every file processed.
If a symbolic link is encountered during a recursive traversal
on a system without the <code>lchown</code> system call, and <option>--no-dereference</option>
is in effect, then issue a diagnostic saying neither the symbolic link nor
its referent is being changed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-R</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--recursive</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-R</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;recursive</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">recursively changing file ownership</indexterm></cindex>
<para>Recursively change ownership of directories and their contents.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-H</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-H</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">symbolic link to directory, traverse if on the command line</indexterm></cindex>
<para>If <option>--recursive</option> (<option>-R</option>) is specified and
a command line argument is a symbolic link to a directory, traverse it.
<xref><xrefnodename>Traversing symlinks</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-L</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-L</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">symbolic link to directory, traverse each that is encountered</indexterm></cindex>
<para>In a recursive traversal, traverse every symbolic link to a directory
that is encountered.
<xref><xrefnodename>Traversing symlinks</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-P</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-P</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">symbolic link to directory, never traverse</indexterm></cindex>
<para>Do not traverse any symbolic links.
This is the default if none of <option>-H</option>, <option>-L</option>,
or <option>-P</option> is specified.
<xref><xrefnodename>Traversing symlinks</xrefnodename></xref>.
</para>
</tableitem></tableentry></table>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>
<para>Examples:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve"># Change the owner of /u to &quot;root&quot;.
chown root /u

# Likewise, but also change its group to &quot;staff&quot;.
chown root:staff /u

# Change the owner of /u and subfiles to &quot;root&quot;.
chown -hR root /u
</pre></smallexample>


</section>
<node name="chgrp-invocation" spaces=" "><nodename>chgrp invocation</nodename><nodenext automatic="on">chmod invocation</nodenext><nodeprev automatic="on">chown invocation</nodeprev><nodeup automatic="on">Changing file attributes</nodeup></node>
<section spaces=" "><sectiontitle><command>chgrp</command>: Change group ownership</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">chgrp</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">group ownership, changing</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">changing group ownership</indexterm></cindex>

<para><command>chgrp</command> changes the group ownership of each given <var>file</var>
to <var>group</var> (which can be either a group name or a numeric group ID)
or to the group of an existing reference file.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">chgrp [<var>option</var>]&dots; &lbrace;<var>group</var> | --reference=<var>ref_file</var>&rbrace;<!-- c -->
 <var>file</var>&dots;
</pre></example>

<para>If <var>group</var> is intended to represent a
numeric group ID, then you may specify it with a leading <samp>+</samp>.
<xref><xrefnodename>Disambiguating names and IDs</xrefnodename></xref>.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-c</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--changes</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-c</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;changes</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">changed files, verbosely describing</indexterm></cindex>
<para>Verbosely describe the action for each <var>file</var> whose group actually
changes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-f</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--silent</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--quiet</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-f</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;silent</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;quiet</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">error messages, omitting</indexterm></cindex>
<para>Do not print error messages about files whose group cannot be
changed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--dereference</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;dereference</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">symbolic links, changing owner</indexterm></cindex>
<findex index="fn" spaces=" "><indexterm index="fn" mergedindex="cp">lchown</indexterm></findex>
<para>Do not act on symbolic links themselves but rather on what they point to.
This is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-h</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--no-dereference</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-h</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;no-dereference</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">symbolic links, changing group</indexterm></cindex>
<findex index="fn" spaces=" "><indexterm index="fn" mergedindex="cp">lchown</indexterm></findex>
<para>Act on symbolic links themselves instead of what they point to.
This mode relies on the <code>lchown</code> system call.
On systems that do not provide the <code>lchown</code> system call,
<command>chgrp</command> fails when a file specified on the command line
is a symbolic link.
By default, no diagnostic is issued for symbolic links encountered
during a recursive traversal, but see <option>--verbose</option>.
</para>
<itemx spaces=" "><itemformat command="samp">--preserve-root</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;preserve-root</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">root directory, disallow recursive modification</indexterm></cindex>
<para>Fail upon any attempt to recursively change the root directory, <file>/</file>.
Without <option>--recursive</option>, this option has no effect.
<xref><xrefnodename>Treating / specially</xrefnodename></xref>.
</para>
<itemx spaces=" "><itemformat command="samp">--no-preserve-root</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;no-preserve-root</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">root directory, allow recursive modification</indexterm></cindex>
<para>Cancel the effect of any preceding <option>--preserve-root</option> option.
<xref><xrefnodename>Treating / specially</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--reference=<var>ref_file</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;reference</indexterm></indexcommand>
<para>Change the group of each <var>file</var> to be the same as that of
<var>ref_file</var>.  If <var>ref_file</var> is a symbolic link, do not use the
group of the symbolic link, but rather that of the file it refers to.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-v</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--verbose</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-v</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;verbose</indexterm></indexcommand>
<para>Output a diagnostic for every file processed.
If a symbolic link is encountered during a recursive traversal
on a system without the <code>lchown</code> system call, and <option>--no-dereference</option>
is in effect, then issue a diagnostic saying neither the symbolic link nor
its referent is being changed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-R</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--recursive</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-R</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;recursive</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">recursively changing group ownership</indexterm></cindex>
<para>Recursively change the group ownership of directories and their contents.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-H</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-H</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">symbolic link to directory, traverse if on the command line</indexterm></cindex>
<para>If <option>--recursive</option> (<option>-R</option>) is specified and
a command line argument is a symbolic link to a directory, traverse it.
<xref><xrefnodename>Traversing symlinks</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-L</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-L</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">symbolic link to directory, traverse each that is encountered</indexterm></cindex>
<para>In a recursive traversal, traverse every symbolic link to a directory
that is encountered.
<xref><xrefnodename>Traversing symlinks</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-P</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-P</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">symbolic link to directory, never traverse</indexterm></cindex>
<para>Do not traverse any symbolic links.
This is the default if none of <option>-H</option>, <option>-L</option>,
or <option>-P</option> is specified.
<xref><xrefnodename>Traversing symlinks</xrefnodename></xref>.
</para>
</tableitem></tableentry></table>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>
<para>Examples:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve"># Change the group of /u to &quot;staff&quot;.
chgrp staff /u

# Change the group of /u and subfiles to &quot;staff&quot;.
chgrp -hR staff /u
</pre></smallexample>


</section>
<node name="chmod-invocation" spaces=" "><nodename>chmod invocation</nodename><nodenext automatic="on">touch invocation</nodenext><nodeprev automatic="on">chgrp invocation</nodeprev><nodeup automatic="on">Changing file attributes</nodeup></node>
<section spaces=" "><sectiontitle><command>chmod</command>: Change access permissions</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">chmod</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">changing access permissions</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">access permissions, changing</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">permissions, changing access</indexterm></cindex>

<para><command>chmod</command> changes the access permissions of the named files.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">chmod [<var>option</var>]&dots; &lbrace;<var>mode</var> | --reference=<var>ref_file</var>&rbrace;<!-- c -->
 <var>file</var>&dots;
</pre></example>

<cindex index="cp" spaces=" "><indexterm index="cp">symbolic links, permissions of</indexterm></cindex>
<para><command>chmod</command> never changes the permissions of symbolic links, since
the <command>chmod</command> system call cannot change their permissions.
This is not a problem since the permissions of symbolic links are
never used.  However, for each symbolic link listed on the command
line, <command>chmod</command> changes the permissions of the pointed-to file.
In contrast, <command>chmod</command> ignores symbolic links encountered during
recursive directory traversals.
</para>
<para>A successful use of <command>chmod</command> clears the set-group-ID bit of a
regular file if the file&textrsquo;s group ID does not match the user&textrsquo;s
effective group ID or one of the user&textrsquo;s supplementary group IDs,
unless the user has appropriate privileges.  Additional restrictions
may cause the set-user-ID and set-group-ID bits of <var>mode</var> or
<var>ref_file</var> to be ignored.  This behavior depends on the policy and
functionality of the underlying <code>chmod</code> system call.  When in
doubt, check the underlying system behavior.
</para>
<para>If used, <var>mode</var> specifies the new file mode bits.
For details, see the section on <ref><xrefnodename>File permissions</xrefnodename></ref>.
If you really want <var>mode</var> to have a leading <samp>-</samp>, you should
use <option>--</option> first, e.g., <samp>chmod -- -w file</samp>.  Typically,
though, <samp>chmod a-w file</samp> is preferable, and <command>chmod -w
file</command> (without the <option>--</option>) complains if it behaves differently
from what <samp>chmod a-w file</samp> would do.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-c</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--changes</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-c</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;changes</indexterm></indexcommand>
<para>Verbosely describe the action for each <var>file</var> whose permissions
actually changes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-f</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--silent</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--quiet</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-f</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;silent</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;quiet</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">error messages, omitting</indexterm></cindex>
<para>Do not print error messages about files whose permissions cannot be
changed.
</para>
<itemx spaces=" "><itemformat command="samp">--preserve-root</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;preserve-root</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">root directory, disallow recursive modification</indexterm></cindex>
<para>Fail upon any attempt to recursively change the root directory, <file>/</file>.
Without <option>--recursive</option>, this option has no effect.
<xref><xrefnodename>Treating / specially</xrefnodename></xref>.
</para>
<itemx spaces=" "><itemformat command="samp">--no-preserve-root</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;no-preserve-root</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">root directory, allow recursive modification</indexterm></cindex>
<para>Cancel the effect of any preceding <option>--preserve-root</option> option.
<xref><xrefnodename>Treating / specially</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-v</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--verbose</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-v</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;verbose</indexterm></indexcommand>
<para>Verbosely describe the action or non-action taken for every <var>file</var>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--reference=<var>ref_file</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;reference</indexterm></indexcommand>
<para>Change the mode of each <var>file</var> to be the same as that of <var>ref_file</var>.
<xref><xrefnodename>File permissions</xrefnodename></xref>.
If <var>ref_file</var> is a symbolic link, do not use the mode
of the symbolic link, but rather that of the file it refers to.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-R</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--recursive</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-R</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;recursive</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">recursively changing access permissions</indexterm></cindex>
<para>Recursively change permissions of directories and their contents.
</para>
</tableitem></tableentry></table>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="touch-invocation" spaces=" "><nodename>touch invocation</nodename><nodeprev automatic="on">chmod invocation</nodeprev><nodeup automatic="on">Changing file attributes</nodeup></node>
<section spaces=" "><sectiontitle><command>touch</command>: Change file timestamps</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">touch</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">changing file timestamps</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">file timestamps, changing</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">timestamps, changing file</indexterm></cindex>

<para><command>touch</command> changes the access and/or modification times of the
specified files.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">touch [<var>option</var>]&dots; <var>file</var>&dots;
</pre></example>

<cindex index="cp" spaces=" "><indexterm index="cp">empty files, creating</indexterm></cindex>
<para>Any <var>file</var> argument that does not exist is created empty, unless
option <option>--no-create</option> (<option>-c</option>) or <option>--no-dereference</option>
(<option>-h</option>) was in effect.
</para>
<para>A <var>file</var> argument string of <samp>-</samp> is handled specially and
causes <command>touch</command> to change the times of the file associated with
standard output.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">clock skew</indexterm></cindex>
<para>By default, <command>touch</command> sets file timestamps to the current time.
Because <command>touch</command> acts on its operands left to right, the
resulting timestamps of earlier and later operands may disagree.
Also, the determination of what time is &textldquo;current&textrdquo; depends on the
platform.  Platforms with network file systems often use different
clocks for the operating system and for file systems; because
<command>touch</command> typically uses file systems&textrsquo; clocks by default, clock
skew can cause the resulting file timestamps to appear to be in a
program&textrsquo;s &textldquo;future&textrdquo; or &textldquo;past&textrdquo;.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">file timestamp resolution</indexterm></cindex>
<para>The <command>touch</command> command sets the file&textrsquo;s timestamp to the greatest
representable value that is not greater than the requested time.  This
can differ from the requested time for several reasons.  First, the
requested time may have a higher resolution than supported.  Second, a
file system may use different resolutions for different types of
times.  Third, file timestamps may use a different resolution than
operating system timestamps.  Fourth, the operating system primitives
used to update timestamps may employ yet a different resolution.  For
example, in theory a file system might use 10-microsecond resolution
for access time and 100-nanosecond resolution for modification time,
and the operating system might use nanosecond resolution for the
current time and microsecond resolution for the primitive that
<command>touch</command> uses to set a file&textrsquo;s timestamp to an arbitrary value.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">permissions, for changing file timestamps</indexterm></cindex>
<para>When setting file timestamps to the current time, <command>touch</command> can
change the timestamps for files that the user does not own but has
write permission for.  Otherwise, the user must own the files.  Some
older systems have a further restriction: the user must own the files
unless both the access and modification times are being set to the
current time.
</para>
<para>Although <command>touch</command> provides options for changing two of the times&textmdash;the
times of last access and modification&textmdash;of a file, there is actually
a standard third one as well: the inode change time.  This is often
referred to as a file&textrsquo;s <code>ctime</code>.
The inode change time represents the time when the file&textrsquo;s meta-information
last changed.  One common example of this is when the permissions of a
file change.  Changing the permissions doesn&textrsquo;t access the file, so
the atime doesn&textrsquo;t change, nor does it modify the file, so the mtime
doesn&textrsquo;t change.  Yet, something about the file itself has changed,
and this must be noted somewhere.  This is the job of the ctime field.
This is necessary, so that, for example, a backup program can make a
fresh copy of the file, including the new permissions value.
Another operation that modifies a file&textrsquo;s ctime without affecting
the others is renaming.  In any case, it is not possible, in normal
operations, for a user to change the ctime field to a user-specified value.
Some operating systems and file systems support a fourth time: the
birth time, when the file was first created; by definition, this
timestamp never changes.
</para>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">TZ</indexterm></vindex>
<para>Time stamps assume the time zone rules specified by the <env>TZ</env>
environment variable, or by the system default rules if <env>TZ</env> is
not set.  <xref><xrefnodename>TZ Variable</xrefnodename><xrefprinteddesc spaces=" ">Specifying the Time Zone with <env>TZ</env></xrefprinteddesc><xrefinfofile spaces="\n">libc</xrefinfofile><xrefprintedname spaces=" ">The GNU C Library Reference Manual</xrefprintedname></xref>.
You can avoid ambiguities during
daylight saving transitions by using <sc>utc</sc> time stamps.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-a</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--time=atime</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--time=access</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--time=use</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-a</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;time</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">atime<r>, changing</r></indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">access <r>time, changing</r></indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">use <r>time, changing</r></indexterm></indexcommand>
<para>Change the access time only.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-c</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--no-create</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-c</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;no-create</indexterm></indexcommand>
<para>Do not warn about or create files that do not exist.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-d</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--date=<var>time</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-d</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;date</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">time</indexterm></indexcommand>
<para>Use <var>time</var> instead of the current time.  It can contain month names,
time zones, <samp>am</samp> and <samp>pm</samp>, <samp>yesterday</samp>, etc.  For
example, <option>--date=&quot;2004-02-27 14:19:13.489392193 +0530&quot;</option>
specifies the instant of time that is 489,392,193 nanoseconds after
February 27, 2004 at 2:19:13 PM in a time zone that is 5 hours and 30
minutes east of <acronym><acronymword>UTC</acronymword></acronym>.  <xref><xrefnodename>Date input formats</xrefnodename></xref>.
File systems that do not support high-resolution time stamps
silently ignore any excess precision here.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-f</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-f</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">BSD <command>touch</command> compatibility</indexterm></cindex>
<para>Ignored; for compatibility with BSD versions of <command>touch</command>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-h</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--no-dereference</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-h</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;no-dereference</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">symbolic links, changing time</indexterm></cindex>
<findex index="fn" spaces=" "><indexterm index="fn" mergedindex="cp">lutimes</indexterm></findex>
<para>Attempt to change the timestamps of a symbolic link, rather than what
the link refers to.  When using this option, empty files are not
created, but option <option>-c</option> must also be used to avoid warning
about files that do not exist.  Not all systems support changing the
timestamps of symlinks, since underlying system support for this
action was not required until <acronym><acronymword>POSIX</acronymword></acronym> 2008.  Also, on some
systems, the mere act of examining a symbolic link changes the access
time, such that only changes to the modification time will persist
long enough to be observable.  When coupled with option <option>-r</option>, a
reference timestamp is taken from a symbolic link rather than the file
it refers to.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-m</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--time=mtime</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--time=modify</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-m</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;time</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">mtime<r>, changing</r></indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">modify <r>time, changing</r></indexterm></indexcommand>
<para>Change the modification time only.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-r <var>file</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--reference=<var>file</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-r</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;reference</indexterm></indexcommand>
<para>Use the times of the reference <var>file</var> instead of the current time.
If this option is combined with the <option>--date=<var>time</var></option>
(<option>-d <var>time</var></option>) option, the reference <var>file</var>&textrsquo;s time is
the origin for any relative <var>time</var>s given, but is otherwise ignored.
For example, <samp>-r foo -d '-5 seconds'</samp> specifies a time stamp
equal to five seconds before the corresponding time stamp for <file>foo</file>.
If <var>file</var> is a symbolic link, the reference timestamp is taken
from the target of the symlink, unless <option>-h</option> was also in effect.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-t [[<var>cc</var>]<var>yy</var>]<var>mmddhhmm</var>[.<var>ss</var>]</itemformat></item>
</tableterm><tableitem><para>Use the argument (optional four-digit or two-digit years, months,
days, hours, minutes, optional seconds) instead of the current time.
If the year is specified with only two digits, then <var>cc</var>
is 20 for years in the range 0 &dots; 68, and 19 for years in
69 &dots; 99.  If no digits of the year are specified,
the argument is interpreted as a date in the current year.
Note that <var>ss</var> may be <samp>60</samp>, to accommodate leap seconds.
</para>
</tableitem></tableentry></table>

<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">_POSIX2_VERSION</indexterm></vindex>
<para>On older systems, <command>touch</command> supports an obsolete syntax, as follows.
If no timestamp is given with any of the <option>-d</option>, <option>-r</option>, or
<option>-t</option> options, and if there are two or more <var>file</var>s and the
first <var>file</var> is of the form <samp><var>mmddhhmm</var>[<var>yy</var>]</samp> and this
would be a valid argument to the <option>-t</option> option (if the <var>yy</var>, if
any, were moved to the front), and if the represented year
is in the range 1969&textndash;1999, that argument is interpreted as the time
for the other files instead of as a file name.
This obsolete behavior can be enabled or disabled with the
<env>_POSIX2_VERSION</env> environment variable (<pxref><xrefnodename>Standards
conformance</xrefnodename></pxref>), but portable scripts should avoid commands whose
behavior depends on this variable.
For example, use <samp>touch ./12312359 main.c</samp> or <samp>touch -t
12312359 main.c</samp> rather than the ambiguous <samp>touch 12312359 main.c</samp>.
</para>
<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
</chapter>
<node name="Disk-usage" spaces=" "><nodename>Disk usage</nodename><nodenext automatic="on">Printing text</nodenext><nodeprev automatic="on">Changing file attributes</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>Disk usage</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">disk usage</indexterm></cindex>

<para>No disk can hold an infinite amount of data.  These commands report
how much disk storage is in use or available, report other file and
file status information, and write buffers to disk.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::               ">df invocation</menunode><menudescription><pre xml:space="preserve">Report file system disk space usage.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::               ">du invocation</menunode><menudescription><pre xml:space="preserve">Estimate file space usage.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">stat invocation</menunode><menudescription><pre xml:space="preserve">Report file or file system status.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">sync invocation</menunode><menudescription><pre xml:space="preserve">Synchronize memory and disk.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::         ">truncate invocation</menunode><menudescription><pre xml:space="preserve">Shrink or extend the size of a file.
</pre></menudescription></menuentry></menu>


<node name="df-invocation" spaces=" "><nodename>df invocation</nodename><nodenext automatic="on">du invocation</nodenext><nodeup automatic="on">Disk usage</nodeup></node>
<section spaces=" "><sectiontitle><command>df</command>: Report file system disk space usage</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">df</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">file system disk usage</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">disk usage by file system</indexterm></cindex>

<para><command>df</command> reports the amount of disk space used and available on
file systems.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">df [<var>option</var>]&dots; [<var>file</var>]&dots;
</pre></example>

<para>With no arguments, <command>df</command> reports the space used and available on all
currently mounted file systems (of all types).  Otherwise, <command>df</command>
reports on the file system containing each argument <var>file</var>.
</para>
<para>Normally the disk space is printed in units of
1024 bytes, but this can be overridden (<pxref><xrefnodename>Block size</xrefnodename></pxref>).
Non-integer quantities are rounded up to the next higher unit.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">disk device file</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">device file, disk</indexterm></cindex>
<para>If an argument <var>file</var> is a disk device file containing a mounted
file system, <command>df</command> shows the space available on that file system
rather than on the file system containing the device node (i.e., the root
file system).  <sc>gnu</sc> <command>df</command> does not attempt to determine the
disk usage
on unmounted file systems, because on most kinds of systems doing so
requires extremely nonportable intimate knowledge of file system
structures.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-a</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--all</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-a</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;all</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">automounter file systems</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">ignore file systems</indexterm></cindex>
<para>Include in the listing dummy file systems, which
are omitted by default.  Such file systems are typically special-purpose
pseudo-file-systems, such as automounter entries.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-B <var>size</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--block-size=<var>size</var></itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-B</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;block-size</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">file system sizes</indexterm></cindex>
<para>Scale sizes by <var>size</var> before printing them (<pxref><xrefnodename>Block size</xrefnodename></pxref>).
For example, <option>-BG</option> prints sizes in units of 1,073,741,824 bytes.
</para>
<itemx spaces=" "><itemformat command="samp">--total</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;total</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">grand total of disk size, usage and available space</indexterm></cindex>
<para>Print a grand total of all arguments after all arguments have
been processed.  This can be used to find out the total disk size, usage
and available space of all listed devices.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-h</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--human-readable</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-h</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;human-readable</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">human-readable output</indexterm></cindex>
<para>Append a size letter to each size, such as <samp>M</samp> for mebibytes.
Powers of 1024 are used, not 1000; <samp>M</samp> stands for 1,048,576 bytes.
This option is equivalent to <option>--block-size=human-readable</option>.
Use the <option>--si</option> option if you prefer powers of 1000.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-H</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-H</indexterm></indexcommand>
<para>Equivalent to <option>--si</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-i</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--inodes</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-i</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;inodes</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">inode usage</indexterm></cindex>
<para>List inode usage information instead of block usage.  An inode (short
for index node) contains information about a file such as its owner,
permissions, timestamps, and location on the disk.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-k</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-k</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">kibibytes for file system sizes</indexterm></cindex>
<para>Print sizes in 1024-byte blocks, overriding the default block size
(<pxref><xrefnodename>Block size</xrefnodename></pxref>).
This option is equivalent to <option>--block-size=1K</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-l</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--local</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-l</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;local</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">file system types, limiting output to certain</indexterm></cindex>
<para>Limit the listing to local file systems.  By default, remote file systems
are also listed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--no-sync</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;no-sync</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">file system space, retrieving old data more quickly</indexterm></cindex>
<para>Do not invoke the <code>sync</code> system call before getting any usage data.
This may make <command>df</command> run significantly faster on systems with many
disks, but on some systems (notably SunOS) the results may be slightly
out of date.  This is the default.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-P</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--portability</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-P</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;portability</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">one-line output format</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp"><acronym><acronymword>POSIX</acronymword></acronym> output format</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">portable output format</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">output format, portable</indexterm></cindex>
<para>Use the <acronym><acronymword>POSIX</acronymword></acronym> output format.  This is like the default format except
for the following:
</para>
<enumerate first="1" endspaces=" ">
<listitem>
<para>The information about each file system is always printed on exactly
one line; a mount device is never put on a line by itself.  This means
that if the mount device name is more than 20 characters long (e.g., for
some network mounts), the columns are misaligned.
</para>
</listitem><listitem>
<para>The labels in the header output line are changed to conform to <acronym><acronymword>POSIX</acronymword></acronym>.
</para>
</listitem><listitem>
<para>The default block size and output format are unaffected by the
<env>DF_BLOCK_SIZE</env>, <env>BLOCK_SIZE</env> and <env>BLOCKSIZE</env> environment
variables.  However, the default block size is still affected by
<env>POSIXLY_CORRECT</env>: it is 512 if <env>POSIXLY_CORRECT</env> is set, 1024
otherwise.  <xref><xrefnodename>Block size</xrefnodename></xref>.
</para></listitem></enumerate>

<itemx spaces=" "><itemformat command="samp">--si</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;si</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">SI output</indexterm></cindex>
<para>Append an SI-style abbreviation to each size, such as <samp>M</samp> for
megabytes.  Powers of 1000 are used, not 1024; <samp>M</samp> stands for
1,000,000 bytes.  This option is equivalent to
<option>--block-size=si</option>.  Use the <option>-h</option> or
<option>--human-readable</option> option if
you prefer powers of 1024.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--sync</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;sync</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">file system space, retrieving current data more slowly</indexterm></cindex>
<para>Invoke the <code>sync</code> system call before getting any usage data.  On
some systems (notably SunOS), doing this yields more up to date results,
but in general this option makes <command>df</command> much slower, especially when
there are many or very busy file systems.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-t <var>fstype</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--type=<var>fstype</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-t</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;type</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">file system types, limiting output to certain</indexterm></cindex>
<para>Limit the listing to file systems of type <var>fstype</var>.  Multiple
file system types can be specified by giving multiple <option>-t</option> options.
By default, nothing is omitted.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-T</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--print-type</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-T</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;print-type</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">file system types, printing</indexterm></cindex>
<para>Print each file system&textrsquo;s type.  The types printed here are the same ones
you can include or exclude with <option>-t</option> and <option>-x</option>.  The particular
types printed are whatever is supported by the system.  Here are some of
the common names (this list is certainly not exhaustive):
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">nfs</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp"><acronym><acronymword>NFS</acronymword></acronym> file system type</indexterm></cindex>
<para>An <acronym><acronymword>NFS</acronymword></acronym> file system, i.e., one mounted over a network from another
machine.  This is the one type name which seems to be used uniformly by
all systems.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">4.2<r>, </r>ufs<r>, </r>efs&dots;</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp">Linux file system types</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">local file system types</indexterm></cindex>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">4.2 <r>file system type</r></indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">ufs <r>file system type</r></indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">efs <r>file system type</r></indexterm></indexcommand>
<para>A file system on a locally-mounted hard disk.  (The system might even
support more than one type here; Linux does.)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">hsfs<r>, </r>cdfs</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp">CD-ROM file system type</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">High Sierra file system</indexterm></cindex>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">hsfs <r>file system type</r></indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">cdfs <r>file system type</r></indexterm></indexcommand>
<para>A file system on a CD-ROM drive.  HP-UX uses <samp>cdfs</samp>, most other
systems use <samp>hsfs</samp> (<samp>hs</samp> for &textldquo;High Sierra&textrdquo;).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">pcfs</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp">PC file system</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">DOS file system</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">MS-DOS file system</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">diskette file system</indexterm></cindex>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">pcfs</indexterm></indexcommand>
<para>An MS-DOS file system, usually on a diskette.
</para>
</tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-x <var>fstype</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--exclude-type=<var>fstype</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-x</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;exclude-type</indexterm></indexcommand>
<para>Limit the listing to file systems not of type <var>fstype</var>.
Multiple file system types can be eliminated by giving multiple
<option>-x</option> options.  By default, no file system types are omitted.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-v</itemformat></item>
</tableterm><tableitem><para>Ignored; for compatibility with System V versions of <command>df</command>.
</para>
</tableitem></tableentry></table>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
Failure includes the case where no output is generated, so you can
inspect the exit status of a command like <samp>df -t ext3 -t reiserfs
<var>dir</var></samp> to test whether <var>dir</var> is on a file system of type
<samp>ext3</samp> or <samp>reiserfs</samp>.
</para>

</section>
<node name="du-invocation" spaces=" "><nodename>du invocation</nodename><nodenext automatic="on">stat invocation</nodenext><nodeprev automatic="on">df invocation</nodeprev><nodeup automatic="on">Disk usage</nodeup></node>
<section spaces=" "><sectiontitle><command>du</command>: Estimate file space usage</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">du</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">file space usage</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">disk usage for files</indexterm></cindex>

<para><command>du</command> reports the amount of disk space used by the specified files
and for each subdirectory (of directory arguments).  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">du [<var>option</var>]&dots; [<var>file</var>]&dots;
</pre></example>

<para>With no arguments, <command>du</command> reports the disk space for the current
directory.  Normally the disk space is printed in units of
1024 bytes, but this can be overridden (<pxref><xrefnodename>Block size</xrefnodename></pxref>).
Non-integer quantities are rounded up to the next higher unit.
</para>
<para>If two or more hard links point to the same file, only one of the hard
links is counted.  The <var>file</var> argument order affects which links
are counted, and changing the argument order may change the numbers
that <command>du</command> outputs.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-a</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--all</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-a</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;all</indexterm></indexcommand>
<para>Show counts for all files, not just directories.
</para>
<itemx spaces=" "><itemformat command="samp">--apparent-size</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;apparent-size</indexterm></indexcommand>
<para>Print apparent sizes, rather than disk usage.  The apparent size of a
file is the number of bytes reported by <code>wc -c</code> on regular files,
or more generally, <code>ls -l --block-size=1</code> or <code>stat --format=%s</code>.
For example, a file containing the word <samp>zoo</samp> with no newline would,
of course, have an apparent size of 3.  Such a small file may require
anywhere from 0 to 16 KiB or more of disk space, depending on
the type and configuration of the file system on which the file resides.
However, a sparse file created with this command:
</para>
<example endspaces=" ">
<pre xml:space="preserve">dd bs=1 seek=2GiB if=/dev/null of=big
</pre></example>

<noindent></noindent>
<para>has an apparent size of 2 GiB, yet on most modern
systems, it actually uses almost no disk space.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-b</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--bytes</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-b</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;bytes</indexterm></indexcommand>
<para>Equivalent to <code>--apparent-size --block-size=1</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-B <var>size</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--block-size=<var>size</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-B</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;block-size</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">file sizes</indexterm></cindex>
<para>Scale sizes by <var>size</var> before printing them (<pxref><xrefnodename>Block size</xrefnodename></pxref>).
For example, <option>-BG</option> prints sizes in units of 1,073,741,824 bytes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-c</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--total</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-c</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;total</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">grand total of disk space</indexterm></cindex>
<para>Print a grand total of all arguments after all arguments have
been processed.  This can be used to find out the total disk usage of
a given set of files or directories.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-D</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--dereference-args</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-D</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;dereference-args</indexterm></indexcommand>
<para>Dereference symbolic links that are command line arguments.
Does not affect other symbolic links.  This is helpful for finding
out the disk usage of directories, such as <file>/usr/tmp</file>, which
are often symbolic links.
</para>
<!-- c -files0-from=FILE -->
<itemx spaces=" "><itemformat command="samp">--files0-from=<var>file</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;files0-from=<var>file</var></indexterm></indexcommand>
<!-- c This is commented out to avoid a texi2dvi failure. -->
<!-- c texi2dvi (GNU Texinfo 4.11) 1.104 -->
<!-- c @cindex including files from @command{du} -->
<para>Disallow processing files named on the command line, and instead process
those named in file <var>file</var>; each name being terminated by a zero byte
(<acronym><acronymword>ASCII</acronymword></acronym> <sc>nul</sc>).
This is useful 
when the list of file names is so long that it may exceed a command line
length limitation.
In such cases, running <command>du</command> via <command>xargs</command> is undesirable
because it splits the list into pieces and makes <command>du</command> print
with the <option>--total</option> (<option>-c</option>) option for each sublist rather than for the entire list.
One way to produce a list of <acronym><acronymword>ASCII</acronymword></acronym> <sc>nul</sc> terminated file
names is with <sc>gnu</sc>
<command>find</command>, using its <option>-print0</option> predicate.
If <var>file</var> is <samp>-</samp> then the <acronym><acronymword>ASCII</acronymword></acronym> <sc>nul</sc> terminated
file names are read from standard input.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-h</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--human-readable</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-h</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;human-readable</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">human-readable output</indexterm></cindex>
<para>Append a size letter to each size, such as <samp>M</samp> for mebibytes.
Powers of 1024 are used, not 1000; <samp>M</samp> stands for 1,048,576 bytes.
This option is equivalent to <option>--block-size=human-readable</option>.
Use the <option>--si</option> option if you prefer powers of 1000.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-H</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-H</indexterm></indexcommand>
<para>Equivalent to <option>--dereference-args</option> (<option>-D</option>).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-k</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-k</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">kibibytes for file sizes</indexterm></cindex>
<para>Print sizes in 1024-byte blocks, overriding the default block size
(<pxref><xrefnodename>Block size</xrefnodename></pxref>).
This option is equivalent to <option>--block-size=1K</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-l</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--count-links</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-l</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;count-links</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">hard links, counting in <command>du</command></indexterm></cindex>
<para>Count the size of all files, even if they have appeared already (as a
hard link).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-L</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--dereference</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-L</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;dereference</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">symbolic links, dereferencing in <command>du</command></indexterm></cindex>
<para>Dereference symbolic links (show the disk space used by the file
or directory that the link points to instead of the space used by
the link).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-m</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-m</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">mebibytes for file sizes</indexterm></cindex>
<para>Print sizes in 1,048,576-byte blocks, overriding the default block size
(<pxref><xrefnodename>Block size</xrefnodename></pxref>).
This option is equivalent to <option>--block-size=1M</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-P</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--no-dereference</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-P</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;no-dereference</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">symbolic links, dereferencing in <command>du</command></indexterm></cindex>
<para>For each symbolic links encountered by <command>du</command>,
consider the disk space used by the symbolic link.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-d <var>depth</var></itemformat></item>
</tableterm></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--max-depth=<var>depth</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-d <var>depth</var></indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;max-depth=<var>depth</var></indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">limiting output of <command>du</command></indexterm></cindex>
<para>Show the total for each directory (and file if &textndash;all) that is at
most MAX_DEPTH levels down from the root of the hierarchy.  The root
is at level 0, so <code>du --max-depth=0</code> is equivalent to <code>du -s</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-0</itemformat></item>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-0</indexterm></indexcommand>
<itemx spaces=" "><itemformat command="samp">--null</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;null</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">output <sc>nul</sc>-byte-terminated lines</indexterm></cindex>
<para>Output a zero byte (<acronym><acronymword>ASCII</acronymword></acronym> <sc>nul</sc>) at the end of each line,
rather than a newline. This option enables other programs to parse the
output of <command>du</command> even when that output would contain data
with embedded newlines.
</para>
<itemx spaces=" "><itemformat command="samp">--si</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;si</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">SI output</indexterm></cindex>
<para>Append an SI-style abbreviation to each size, such as <samp>M</samp> for
megabytes.  Powers of 1000 are used, not 1024; <samp>M</samp> stands for
1,000,000 bytes.  This option is equivalent to
<option>--block-size=si</option>.  Use the <option>-h</option> or
<option>--human-readable</option> option if
you prefer powers of 1024.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-s</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--summarize</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-s</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;summarize</indexterm></indexcommand>
<para>Display only a total for each argument.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-S</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--separate-dirs</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-S</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;separate-dirs</indexterm></indexcommand>
<para>Normally, in the output of <command>du</command> (when not using <option>--summarize</option>),
the size listed next to a directory name, <var>d</var>, represents the sum
of sizes of all entries beneath <var>d</var> as well as the size of <var>d</var> itself.
With <option>--separate-dirs</option>, the size reported for a directory name,
<var>d</var>, is merely the <code>stat.st_size</code>-derived size of the directory
entry, <var>d</var>.
</para>
<itemx spaces=" "><itemformat command="samp">--time</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;time</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">last modified dates, displaying in <command>du</command></indexterm></cindex>
<para>Show time of the most recent modification of any file in the directory,
or any of its subdirectories.
</para>
<itemx spaces=" "><itemformat command="samp">--time=ctime</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--time=status</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--time=use</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;time</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">ctime<r>, show the most recent</r></indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">status time<r>, show the most recent</r></indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">use time<r>, show the most recent</r></indexterm></indexcommand>
<para>Show the most recent status change time (the <samp>ctime</samp> in the inode) of
any file in the directory, instead of the modification time.
</para>
<itemx spaces=" "><itemformat command="samp">--time=atime</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--time=access</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;time</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">atime<r>, show the most recent</r></indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">access time<r>, show the most recent</r></indexterm></indexcommand>
<para>Show the most recent access time (the <samp>atime</samp> in the inode) of
any file in the directory, instead of the modification time.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--time-style=<var>style</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;time-style</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">time style</indexterm></cindex>
<para>List timestamps in style <var>style</var>.  This option has an effect only if
the <option>--time</option> option is also specified.  The <var>style</var> should
be one of the following:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">+<var>format</var></itemformat></item>
</tableterm><tableitem><vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">LC_TIME</indexterm></vindex>
<para>List timestamps using <var>format</var>, where <var>format</var> is interpreted
like the format argument of <command>date</command> (<pxref><xrefnodename>date invocation</xrefnodename></pxref>).
For example, <option>--time-style=&quot;+%Y-%m-%d %H:%M:%S&quot;</option> causes
<command>du</command> to list timestamps like <samp>2002-03-30 23:45:56</samp>.  As
with <command>date</command>, <var>format</var>&textrsquo;s interpretation is affected by the
<env>LC_TIME</env> locale category.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">full-iso</itemformat></item>
</tableterm><tableitem><para>List timestamps in full using <acronym><acronymword>ISO</acronymword></acronym> 8601 date, time, and time zone
format with nanosecond precision, e.g., <samp>2002-03-30
23:45:56.477817180 -0700</samp>.  This style is equivalent to
<samp>+%Y-%m-%d %H:%M:%S.%N %z</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">long-iso</itemformat></item>
</tableterm><tableitem><para>List <acronym><acronymword>ISO</acronymword></acronym> 8601 date and time in minutes, e.g.,
<samp>2002-03-30 23:45</samp>.  These timestamps are shorter than
<samp>full-iso</samp> timestamps, and are usually good enough for everyday
work.  This style is equivalent to <samp>+%Y-%m-%d %H:%M</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">iso</itemformat></item>
</tableterm><tableitem><para>List <acronym><acronymword>ISO</acronymword></acronym> 8601 dates for timestamps, e.g., <samp>2002-03-30</samp>.
This style is equivalent to <samp>+%Y-%m-%d</samp>.
</para></tableitem></tableentry></table>

<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">TIME_STYLE</indexterm></vindex>
<para>You can specify the default value of the <option>--time-style</option> option
with the environment variable <env>TIME_STYLE</env>; if <env>TIME_STYLE</env> is not set
the default style is <samp>long-iso</samp>.  For compatibility with <command>ls</command>,
if <env>TIME_STYLE</env> begins with <samp>+</samp> and contains a newline,
the newline and any later characters are ignored; if <env>TIME_STYLE</env>
begins with <samp>posix-</samp> the <samp>posix-</samp> is ignored; and if
<env>TIME_STYLE</env> is <samp>locale</samp> it is ignored.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-x</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--one-file-system</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-x</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;one-file-system</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">one file system, restricting <command>du</command> to</indexterm></cindex>
<para>Skip directories that are on different file systems from the one that
the argument being processed is on.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--exclude=<var>pattern</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;exclude=<var>pattern</var></indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">excluding files from <command>du</command></indexterm></cindex>
<para>When recursing, skip subdirectories or files matching <var>pattern</var>.
For example, <code>du --exclude='*.o'</code> excludes files whose names
end in <samp>.o</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-X <var>file</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--exclude-from=<var>file</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-X <var>file</var></indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;exclude-from=<var>file</var></indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">excluding files from <command>du</command></indexterm></cindex>
<para>Like <option>--exclude</option>, except take the patterns to exclude from <var>file</var>,
one per line.  If <var>file</var> is <samp>-</samp>, take the patterns from standard
input.
</para>
</tableitem></tableentry></table>

<cindex index="cp" spaces=" "><indexterm index="cp">NFS mounts from BSD to HP-UX</indexterm></cindex>
<para>On BSD systems, <command>du</command> reports sizes that are half the correct
values for files that are NFS-mounted from HP-UX systems.  On HP-UX
systems, it reports sizes that are twice the correct values for
files that are NFS-mounted from BSD systems.  This is due to a flaw
in HP-UX; it also affects the HP-UX <command>du</command> program.
</para>
<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="stat-invocation" spaces=" "><nodename>stat invocation</nodename><nodenext automatic="on">sync invocation</nodenext><nodeprev automatic="on">du invocation</nodeprev><nodeup automatic="on">Disk usage</nodeup></node>
<section spaces=" "><sectiontitle><command>stat</command>: Report file or file system status</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">stat</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">file status</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">file system status</indexterm></cindex>

<para><command>stat</command> displays information about the specified file(s).  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">stat [<var>option</var>]&dots; [<var>file</var>]&dots;
</pre></example>

<para>With no option, <command>stat</command> reports all information about the given files.
But it also can be used to report the information of the file systems the
given files are located on.  If the files are links, <command>stat</command> can
also give information about the files the links point to.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">conflicts with shell built-ins</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">built-in shell commands, conflicts with</indexterm></cindex>
<para>Due to shell aliases and built-in <command>stat</command> functions, using an
unadorned <command>stat</command> interactively or in a script may get you
different functionality than that described here.  Invoke it via
<command>env</command> (i.e., <code>env stat &dots;</code>) to avoid interference
from the shell.
</para>

<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-L</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--dereference</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-L</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;dereference</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">symbolic links, dereferencing in <command>stat</command></indexterm></cindex>
<para>Change how <command>stat</command> treats symbolic links.
With this option, <command>stat</command> acts on the file referenced
by each symbolic link argument.
Without it, <command>stat</command> acts on any symbolic link argument directly.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-f</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--file-system</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-f</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;file-system</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">file systems</indexterm></cindex>
<para>Report information about the file systems where the given files are located
instead of information about the files themselves.
This option implies the <option>-L</option> option.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-c</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--format=<var>format</var></itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-c</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;format=<var>format</var></indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">output format</indexterm></cindex>
<para>Use <var>format</var> rather than the default format.
<var>format</var> is automatically newline-terminated, so
running a command like the following with two or more <var>file</var>
operands produces a line of output for each operand:
</para><example endspaces=" ">
<pre xml:space="preserve">$ stat --format=%d:%i / /usr
2050:2
2057:2
</pre></example>

<itemx spaces=" "><itemformat command="samp">--printf=<var>format</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;printf=<var>format</var></indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">output format</indexterm></cindex>
<para>Use <var>format</var> rather than the default format.
Like <option>--format</option>, but interpret backslash escapes,
and do not output a mandatory trailing newline.
If you want a newline, include <samp>\n</samp> in the <var>format</var>.
Here&textrsquo;s how you would use <option>--printf</option> to print the device
and inode numbers of <file>/</file> and <file>/usr</file>:
</para><example endspaces=" ">
<pre xml:space="preserve">$ stat --printf='%d:%i\n' / /usr
2050:2
2057:2
</pre></example>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-t</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--terse</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-t</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;terse</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">terse output</indexterm></cindex>
<para>Print the information in terse form, suitable for parsing by other programs.
</para>
</tableitem></tableentry></table>

<para>The valid <var>format</var> directives for files with <option>--format</option> and
<option>--printf</option> are:
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet" /></itemprepend>
<listitem spaces=" "><prepend>&bullet;</prepend><para>%a - Access rights in octal
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%A - Access rights in human readable form
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%b - Number of blocks allocated (see <samp>%B</samp>)
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%B - The size in bytes of each block reported by <samp>%b</samp>
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%C - The SELinux security context of a file, if available
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%d - Device number in decimal
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%D - Device number in hex
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%f - Raw mode in hex
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%F - File type
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%g - Group ID of owner
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%G - Group name of owner
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%h - Number of hard links
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%i - Inode number
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%m - Mount point (See note below)
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%n - File name
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%N - Quoted file name with dereference if symbolic link
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%o - I/O block size
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%s - Total size, in bytes
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%t - Major device type in hex
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%T - Minor device type in hex
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%u - User ID of owner
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%U - User name of owner
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%w - Time of file birth, or <samp>-</samp> if unknown
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%W - Time of file birth as seconds since Epoch, or <samp>0</samp>
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%x - Time of last access
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%X - Time of last access as seconds since Epoch
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%y - Time of last modification
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%Y - Time of last modification as seconds since Epoch
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%z - Time of last change
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%Z - Time of last change as seconds since Epoch
</para></listitem></itemize>

<para>The <samp>%W</samp>, <samp>%X</samp>, <samp>%Y</samp>, and <samp>%Z</samp> formats accept a
precision preceded by a period to specify the number of digits to
print after the decimal point.  For example, <samp>%.3X</samp> outputs the
last access time to millisecond precision.  If a period is given but no
precision, <command>stat</command> uses 9 digits, so <samp>%.X</samp> is equivalent to
<samp>%.9X</samp>.  When discarding excess precision, time stamps are truncated
toward minus infinity.
</para>
<example endspaces=" ">
<pre xml:space="preserve">zero pad:
  $ stat -c '[%015Y]' /usr
  [000001288929712]
space align:
  $ stat -c '[%15Y]' /usr
  [     1288929712]
  $ stat -c '[%-15Y]' /usr
  [1288929712     ]
precision:
  $ stat -c '[%.3Y]' /usr
  [1288929712.114]
  $ stat -c '[%.Y]' /usr
  [1288929712.114951834]
</pre></example>

<para>The mount point printed by <samp>%m</samp> is similar to that output
by <command>df</command>, except that:
</para><itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet" /></itemprepend>
<listitem><prepend>&bullet;</prepend>
<para>stat does not dereference symlinks by default
(unless <option>-L</option> is specified)
</para></listitem><listitem><prepend>&bullet;</prepend>
<para>stat does not search for specified device nodes in the
file system list, instead operating on them directly
</para></listitem><listitem><prepend>&bullet;</prepend>
<cindex index="cp" spaces=" "><indexterm index="cp">bind mount</indexterm></cindex>
<para>stat outputs the alias for a bind mounted file, rather than
the initial mount point of its backing device.
One can recursively call stat until there is no change in output,
to get the current base mount point
</para></listitem></itemize>

<para>When listing file system information (<option>--file-system</option> (<option>-f</option>)),
you must use a different set of <var>format</var> directives:
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet" /></itemprepend>
<listitem spaces=" "><prepend>&bullet;</prepend><para>%a - Free blocks available to non-super-user
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%b - Total data blocks in file system
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%c - Total file nodes in file system
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%d - Free file nodes in file system
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%f - Free blocks in file system
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%i - File System ID in hex
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%l - Maximum length of file names
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%n - File name
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%s - Block size (for faster transfers)
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%S - Fundamental block size (for block counts)
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%t - Type in hex
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para>%T - Type in human readable form
</para></listitem></itemize>

<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">TZ</indexterm></vindex>
<para>Time stamps are listed according to the time zone rules specified by
the <env>TZ</env> environment variable, or by the system default rules if
<env>TZ</env> is not set.  <xref><xrefnodename>TZ Variable</xrefnodename><xrefprinteddesc spaces=" ">Specifying the Time Zone
with <env>TZ</env></xrefprinteddesc><xrefinfofile spaces=" ">libc</xrefinfofile><xrefprintedname spaces=" ">The GNU C Library Reference Manual</xrefprintedname></xref>.
</para>
<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="sync-invocation" spaces=" "><nodename>sync invocation</nodename><nodenext automatic="on">truncate invocation</nodenext><nodeprev automatic="on">stat invocation</nodeprev><nodeup automatic="on">Disk usage</nodeup></node>
<section spaces=" "><sectiontitle><command>sync</command>: Synchronize data on disk with memory</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">sync</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">synchronize disk and memory</indexterm></cindex>

<cindex index="cp" spaces=" "><indexterm index="cp">superblock, writing</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">inodes, written buffered</indexterm></cindex>
<para><command>sync</command> writes any data buffered in memory out to disk.  This can
include (but is not limited to) modified superblocks, modified inodes,
and delayed reads and writes.  This must be implemented by the kernel;
The <command>sync</command> program does nothing but exercise the <code>sync</code> system
call.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">crashes and corruption</indexterm></cindex>
<para>The kernel keeps data in memory to avoid doing (relatively slow) disk
reads and writes.  This improves performance, but if the computer
crashes, data may be lost or the file system corrupted as a
result.  The <command>sync</command> command ensures everything in memory
is written to disk.
</para>
<para>Any arguments are ignored, except for a lone <option>--help</option> or
<option>--version</option> (<pxref><xrefnodename>Common options</xrefnodename></pxref>).
</para>
<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="truncate-invocation" spaces=" "><nodename>truncate invocation</nodename><nodeprev automatic="on">sync invocation</nodeprev><nodeup automatic="on">Disk usage</nodeup></node>
<section spaces=" "><sectiontitle><command>truncate</command>: Shrink or extend the size of a file</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">truncate</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">truncating, file sizes</indexterm></cindex>

<para><command>truncate</command> shrinks or extends the size of each <var>file</var> to the
specified size. Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">truncate <var>option</var>&dots; <var>file</var>&dots;
</pre></example>

<cindex index="cp" spaces=" "><indexterm index="cp">files, creating</indexterm></cindex>
<para>Any <var>file</var> that does not exist is created.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">sparse files, creating</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">holes, creating files with</indexterm></cindex>
<para>If a <var>file</var> is larger than the specified size, the extra data is lost.
If a <var>file</var> is shorter, it is extended and the extended part (or hole)
reads as zero bytes.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-c</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--no-create</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-c</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;no-create</indexterm></indexcommand>
<para>Do not create files that do not exist.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-o</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--io-blocks</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-o</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;io-blocks</indexterm></indexcommand>
<para>Treat <var>size</var> as number of I/O blocks of the <var>file</var> rather than bytes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-r <var>rfile</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--reference=<var>rfile</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-r</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;reference</indexterm></indexcommand>
<para>Base the size of each <var>file</var> on the size of <var>rfile</var>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-s <var>size</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--size=<var>size</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-s</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;size</indexterm></indexcommand>
<para>Set or adjust the size of each <var>file</var> according to <var>size</var>.
<var>size</var> may be, or may be an integer optionally followed by,
one of the following multiplicative suffixes:
</para><example endspaces=" ">
<pre xml:space="preserve"><samp>KB</samp> =&gt;           1000 (KiloBytes)
<samp>K</samp>  =&gt;           1024 (KibiBytes)
<samp>MB</samp> =&gt;      1000*1000 (MegaBytes)
<samp>M</samp>  =&gt;      1024*1024 (MebiBytes)
<samp>GB</samp> =&gt; 1000*1000*1000 (GigaBytes)
<samp>G</samp>  =&gt; 1024*1024*1024 (GibiBytes)
</pre></example>
<para>and so on for <samp>T</samp>, <samp>P</samp>, <samp>E</samp>, <samp>Z</samp>, and <samp>Y</samp>.
</para>
<para><var>size</var> may also be prefixed by one of the following to adjust
the size of each <var>file</var> based on their current size:
</para><example endspaces=" ">
<pre xml:space="preserve"><samp>+</samp>  =&gt; extend by
<samp>-</samp>  =&gt; reduce by
<samp>&lt;</samp>  =&gt; at most
<samp>&gt;</samp>  =&gt; at least
<samp>/</samp>  =&gt; round down to multiple of
<samp>%</samp>  =&gt; round up to multiple of
</pre></example>

</tableitem></tableentry></table>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
</chapter>
<node name="Printing-text" spaces=" "><nodename>Printing text</nodename><nodenext automatic="on">Conditions</nodenext><nodeprev automatic="on">Disk usage</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>Printing text</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">printing text, commands for</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">commands for printing text</indexterm></cindex>

<para>This section describes commands that display text strings.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::             ">echo invocation</menunode><menudescription><pre xml:space="preserve">Print a line of text.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::           ">printf invocation</menunode><menudescription><pre xml:space="preserve">Format and print data.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::              ">yes invocation</menunode><menudescription><pre xml:space="preserve">Print a string until interrupted.
</pre></menudescription></menuentry></menu>


<node name="echo-invocation" spaces=" "><nodename>echo invocation</nodename><nodenext automatic="on">printf invocation</nodenext><nodeup automatic="on">Printing text</nodeup></node>
<section spaces=" "><sectiontitle><command>echo</command>: Print a line of text</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">echo</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">displaying text</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">printing text</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">text, displaying</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">arbitrary text, displaying</indexterm></cindex>

<para><command>echo</command> writes each given <var>string</var> to standard output, with a
space between each and a newline after the last one.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">echo [<var>option</var>]&dots; [<var>string</var>]&dots;
</pre></example>

<cindex index="cp" spaces=" "><indexterm index="cp">conflicts with shell built-ins</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">built-in shell commands, conflicts with</indexterm></cindex>
<para>Due to shell aliases and built-in <command>echo</command> functions, using an
unadorned <command>echo</command> interactively or in a script may get you
different functionality than that described here.  Invoke it via
<command>env</command> (i.e., <code>env echo &dots;</code>) to avoid interference
from the shell.
</para>

<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
Options must precede operands, and the normally-special argument
<samp>--</samp> has no special meaning and is treated like any other
<var>string</var>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">-n</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-n</indexterm></indexcommand>
<para>Do not output the trailing newline.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-e</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-e</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">backslash escapes</indexterm></cindex>
<para>Enable interpretation of the following backslash-escaped characters in
each <var>string</var>:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">\a</itemformat></item>
</tableterm><tableitem><para>alert (bell)
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">\b</itemformat></item>
</tableterm><tableitem><para>backspace
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">\c</itemformat></item>
</tableterm><tableitem><para>produce no further output
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">\e</itemformat></item>
</tableterm><tableitem><para>escape
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">\f</itemformat></item>
</tableterm><tableitem><para>form feed
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">\n</itemformat></item>
</tableterm><tableitem><para>newline
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">\r</itemformat></item>
</tableterm><tableitem><para>carriage return
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">\t</itemformat></item>
</tableterm><tableitem><para>horizontal tab
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">\v</itemformat></item>
</tableterm><tableitem><para>vertical tab
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">\\</itemformat></item>
</tableterm><tableitem><para>backslash
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">\0<var>nnn</var></itemformat></item>
</tableterm><tableitem><para>the eight-bit value that is the octal number <var>nnn</var>
(zero to three octal digits), if <var>nnn</var> is
a nine-bit value, the ninth bit is ignored
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">\<var>nnn</var></itemformat></item>
</tableterm><tableitem><para>the eight-bit value that is the octal number <var>nnn</var>
(one to three octal digits), if <var>nnn</var> is
a nine-bit value, the ninth bit is ignored
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">\x<var>hh</var></itemformat></item>
</tableterm><tableitem><para>the eight-bit value that is the hexadecimal number <var>hh</var>
(one or two hexadecimal digits)
</para></tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-E</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-E</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">backslash escapes</indexterm></cindex>
<para>Disable interpretation of backslash escapes in each <var>string</var>.
This is the default.  If <option>-e</option> and <option>-E</option> are both
specified, the last one given takes effect.
</para>
</tableitem></tableentry></table>

<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">POSIXLY_CORRECT</indexterm></vindex>
<para>If the <env>POSIXLY_CORRECT</env> environment variable is set, then when
<command>echo</command>&textrsquo;s first argument is not <option>-n</option> it outputs
option-like arguments instead of treating them as options.  For
example, <code>echo -ne hello</code> outputs <samp>-ne hello</samp> instead of
plain <samp>hello</samp>.
</para>
<para><acronym><acronymword>POSIX</acronymword></acronym> does not require support for any options, and says
that the behavior of <command>echo</command> is implementation-defined if any
<var>string</var> contains a backslash or if the first argument is
<option>-n</option>.  Portable programs can use the <command>printf</command> command
if they need to omit trailing newlines or output control characters or
backslashes.  <xref><xrefnodename>printf invocation</xrefnodename></xref>.
</para>
<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="printf-invocation" spaces=" "><nodename>printf invocation</nodename><nodenext automatic="on">yes invocation</nodenext><nodeprev automatic="on">echo invocation</nodeprev><nodeup automatic="on">Printing text</nodeup></node>
<section spaces=" "><sectiontitle><command>printf</command>: Format and print data</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">printf</indexterm></pindex>
<para><command>printf</command> does formatted printing of text.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">printf <var>format</var> [<var>argument</var>]&dots;
</pre></example>

<para><command>printf</command> prints the <var>format</var> string, interpreting <samp>%</samp>
directives and <samp>\</samp> escapes to format numeric and string arguments
in a way that is mostly similar to the C <samp>printf</samp> function.
<xref><xrefnodename>Output Conversion Syntax</xrefnodename><xrefprinteddesc spaces=" "><command>printf</command> format directives</xrefprinteddesc><xrefinfofile spaces="\n">libc</xrefinfofile><xrefprintedname spaces=" ">The GNU C Library Reference Manual</xrefprintedname></xref>, for details.
The differences are listed below.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">conflicts with shell built-ins</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">built-in shell commands, conflicts with</indexterm></cindex>
<para>Due to shell aliases and built-in <command>printf</command> functions, using an
unadorned <command>printf</command> interactively or in a script may get you
different functionality than that described here.  Invoke it via
<command>env</command> (i.e., <code>env printf &dots;</code>) to avoid interference
from the shell.
</para>

<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet" /></itemprepend>
<beforefirstitem>
</beforefirstitem><listitem><prepend>&bullet;</prepend>
<para>The <var>format</var> argument is reused as necessary to convert all the
given <var>argument</var>s.  For example, the command <samp>printf %s a b</samp>
outputs <samp>ab</samp>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Missing <var>argument</var>s are treated as null strings or as zeros,
depending on whether the context expects a string or a number.  For
example, the command <samp>printf %sx%d</samp> prints <samp>x0</samp>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<kindex index="ky" spaces=" "><indexterm index="ky" mergedindex="cp">\c</indexterm></kindex>
<para>An additional escape, <samp>\c</samp>, causes <command>printf</command> to produce no
further output.  For example, the command <samp>printf 'A%sC\cD%sF' B
E</samp> prints <samp>ABC</samp>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>The hexadecimal escape sequence <samp>\x<var>hh</var></samp> has at most two
digits, as opposed to C where it can have an unlimited number of
digits.  For example, the command <samp>printf '\x07e'</samp> prints two
bytes, whereas the C statement <samp>printf (&quot;\x07e&quot;)</samp> prints just
one.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<kindex index="ky" spaces=" "><indexterm index="ky" mergedindex="cp">%b</indexterm></kindex>
<para><command>printf</command> has an additional directive, <samp>%b</samp>, which prints its
argument string with <samp>\</samp> escapes interpreted in the same way as in
the <var>format</var> string, except that octal escapes are of the form
<samp>\0<var>ooo</var></samp> where <var>ooo</var> is 0 to 3 octal digits.  If
<samp>\<var>ooo</var></samp> is nine-bit value, ignore the ninth bit.
If a precision is also given, it limits the number of bytes printed
from the converted string.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>Numeric arguments must be single C constants, possibly with leading
<samp>+</samp> or <samp>-</samp>.  For example, <samp>printf %.4d -3</samp> outputs
<samp>-0003</samp>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">POSIXLY_CORRECT</indexterm></vindex>
<para>If the leading character of a numeric argument is <samp>&quot;</samp> or <samp>'</samp>
then its value is the numeric value of the immediately following
character.  Any remaining characters are silently ignored if the
<env>POSIXLY_CORRECT</env> environment variable is set; otherwise, a
warning is printed.  For example, <samp>printf &quot;%d&quot; &quot;'a&quot;</samp> outputs
<samp>97</samp> on hosts that use the <acronym><acronymword>ASCII</acronymword></acronym> character set, since
<samp>a</samp> has the numeric value 97 in <acronym><acronymword>ASCII</acronymword></acronym>.
</para>
</listitem></itemize>

<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">LC_NUMERIC</indexterm></vindex>
<para>A floating-point argument must use a period before any fractional
digits, but is printed according to the <env>LC_NUMERIC</env> category of the
current locale.  For example, in a locale whose radix character is a
comma, the command <samp>printf %g 3.14</samp> outputs <samp>3,14</samp> whereas
the command <samp>printf %g 3,14</samp> is an error.
<xref><xrefnodename>Floating point</xrefnodename></xref>.
</para>
<kindex index="ky" spaces=" "><indexterm index="ky" mergedindex="cp">\<var>ooo</var></indexterm></kindex>
<kindex index="ky" spaces=" "><indexterm index="ky" mergedindex="cp">\x<var>hh</var></indexterm></kindex>
<para><command>printf</command> interprets <samp>\<var>ooo</var></samp> in <var>format</var> as an octal number
(if <var>ooo</var> is 1 to 3 octal digits) specifying a byte to print,
and <samp>\x<var>hh</var></samp> as a hexadecimal number (if <var>hh</var> is 1 to 2 hex
digits) specifying a character to print.
Note however that when <samp>\<var>ooo</var></samp> specifies a number larger than 255,
<command>printf</command> ignores the ninth bit.
For example, <samp>printf '\400'</samp> is equivalent to <samp>printf '\0'</samp>.
</para>
<kindex index="ky" spaces=" "><indexterm index="ky" mergedindex="cp">\uhhhh</indexterm></kindex>
<kindex index="ky" spaces=" "><indexterm index="ky" mergedindex="cp">\Uhhhhhhhh</indexterm></kindex>
<cindex index="cp" spaces=" "><indexterm index="cp">Unicode</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">ISO/IEC 10646</indexterm></cindex>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">LC_CTYPE</indexterm></vindex>
<para><command>printf</command> interprets two character syntaxes introduced in
<acronym><acronymword>ISO</acronymword></acronym> C 99:
<samp>\u</samp> for 16-bit Unicode (<acronym><acronymword>ISO</acronymword></acronym>/<acronym><acronymword>IEC</acronymword></acronym> 10646)
characters, specified as
four hexadecimal digits <var>hhhh</var>, and <samp>\U</samp> for 32-bit Unicode
characters, specified as eight hexadecimal digits <var>hhhhhhhh</var>.
<command>printf</command> outputs the Unicode characters
according to the <env>LC_CTYPE</env> locale.  Unicode characters in the ranges
U+0000...U+009F, U+D800...U+DFFF cannot be specified by this syntax, except
for U+0024 ($), U+0040 (&arobase;), and U+0060 (<accent type="grave" bracketed="off">)</accent>.
</para>
<para>The processing of <samp>\u</samp> and <samp>\U</samp> requires a full-featured
<code>iconv</code> facility.  It is activated on systems with glibc 2.2 (or newer),
or when <code>libiconv</code> is installed prior to this package.  Otherwise
<samp>\u</samp> and <samp>\U</samp> will print as-is.
</para>
<para>The only options are a lone <option>--help</option> or
<option>--version</option>.  <xref><xrefnodename>Common options</xrefnodename></xref>.
Options must precede operands.
</para>
<para>The Unicode character syntaxes are useful for writing strings in a locale
independent way.  For example, a string containing the Euro currency symbol
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ env printf '\u20AC 14.95'
</pre></example>

<noindent></noindent>
<para>will be output correctly in all locales supporting the Euro symbol
(<acronym><acronymword>ISO</acronymword></acronym>-8859-15, UTF-8, and others).  Similarly, a Chinese string
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ env printf '\u4e2d\u6587'
</pre></example>

<noindent></noindent>
<para>will be output correctly in all Chinese locales (GB2312, BIG5, UTF-8, etc).
</para>
<para>Note that in these examples, the <command>printf</command> command has been
invoked via <command>env</command> to ensure that we run the program found via
your shell&textrsquo;s search path, and not a shell alias or a built-in function.
</para>
<para>For larger strings, you don&textrsquo;t need to look up the hexadecimal code
values of each character one by one.  <acronym><acronymword>ASCII</acronymword></acronym> characters mixed with \u
escape sequences is also known as the JAVA source file encoding.  You can
use GNU recode 3.5c (or newer) to convert strings to this encoding.  Here
is how to convert a piece of text into a shell script which will output
this text in a locale-independent way:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">$ LC_CTYPE=zh_CN.big5 /usr/local/bin/printf \
    '\u4e2d\u6587\n' &gt; sample.txt
$ recode BIG5..JAVA &lt; sample.txt \
    | sed -e &quot;s|^|/usr/local/bin/printf '|&quot; -e &quot;s|$|\\\\n'|&quot; \
    &gt; sample.sh
</pre></smallexample>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="yes-invocation" spaces=" "><nodename>yes invocation</nodename><nodeprev automatic="on">printf invocation</nodeprev><nodeup automatic="on">Printing text</nodeup></node>
<section spaces=" "><sectiontitle><command>yes</command>: Print a string until interrupted</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">yes</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">repeated output of a string</indexterm></cindex>

<para><command>yes</command> prints the command line arguments, separated by spaces and
followed by a newline, forever until it is killed.  If no arguments are
given, it prints <samp>y</samp> followed by a newline forever until killed.
</para>
<para>Upon a write error, <command>yes</command> exits with status <samp>1</samp>.
</para>
<para>The only options are a lone <option>--help</option> or <option>--version</option>.
To output an argument that begins with
<samp>-</samp>, precede it with <option>--</option>, e.g., <samp>yes -- --help</samp>.
<xref><xrefnodename>Common options</xrefnodename></xref>.
</para>

</section>
</chapter>
<node name="Conditions" spaces=" "><nodename>Conditions</nodename><nodenext automatic="on">Redirection</nodenext><nodeprev automatic="on">Printing text</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>Conditions</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">conditions</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">commands for exit status</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">exit status commands</indexterm></cindex>

<para>This section describes commands that are primarily useful for their exit
status, rather than their output.  Thus, they are often used as the
condition of shell <code>if</code> statements, or as the last command in a
pipeline.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::            ">false invocation</menunode><menudescription><pre xml:space="preserve">Do nothing, unsuccessfully.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">true invocation</menunode><menudescription><pre xml:space="preserve">Do nothing, successfully.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">test invocation</menunode><menudescription><pre xml:space="preserve">Check file types and compare values.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">expr invocation</menunode><menudescription><pre xml:space="preserve">Evaluate expressions.
</pre></menudescription></menuentry></menu>


<node name="false-invocation" spaces=" "><nodename>false invocation</nodename><nodenext automatic="on">true invocation</nodenext><nodeup automatic="on">Conditions</nodeup></node>
<section spaces=" "><sectiontitle><command>false</command>: Do nothing, unsuccessfully</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">false</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">do nothing, unsuccessfully</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">failure exit status</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">exit status of <command>false</command></indexterm></cindex>

<para><command>false</command> does nothing except return an exit status of 1, meaning
<dfn>failure</dfn>.  It can be used as a place holder in shell scripts
where an unsuccessful command is needed.
In most modern shells, <command>false</command> is a built-in command, so when
you use <samp>false</samp> in a script, you&textrsquo;re probably using the built-in
command, not the one documented here.
</para>
<para><command>false</command> honors the <option>--help</option> and <option>--version</option> options.
</para>
<para>This version of <command>false</command> is implemented as a C program, and is thus
more secure and faster than a shell script implementation, and may safely
be used as a dummy shell for the purpose of disabling accounts.
</para>
<para>Note that <command>false</command> (unlike all other programs documented herein)
exits unsuccessfully, even when invoked with
<option>--help</option> or <option>--version</option>.
</para>
<para>Portable programs should not assume that the exit status of
<command>false</command> is 1, as it is greater than 1 on some
non-<acronym><acronymword>GNU</acronymword></acronym> hosts.
</para>

</section>
<node name="true-invocation" spaces=" "><nodename>true invocation</nodename><nodenext automatic="on">test invocation</nodenext><nodeprev automatic="on">false invocation</nodeprev><nodeup automatic="on">Conditions</nodeup></node>
<section spaces=" "><sectiontitle><command>true</command>: Do nothing, successfully</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">true</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">do nothing, successfully</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">no-op</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">successful exit</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">exit status of <command>true</command></indexterm></cindex>

<para><command>true</command> does nothing except return an exit status of 0, meaning
<dfn>success</dfn>.  It can be used as a place holder in shell scripts
where a successful command is needed, although the shell built-in
command <code>:</code> (colon) may do the same thing faster.
In most modern shells, <command>true</command> is a built-in command, so when
you use <samp>true</samp> in a script, you&textrsquo;re probably using the built-in
command, not the one documented here.
</para>
<para><command>true</command> honors the <option>--help</option> and <option>--version</option> options.
</para>
<para>Note, however, that it is possible to cause <command>true</command>
to exit with nonzero status: with the <option>--help</option> or <option>--version</option>
option, and with standard
output already closed or redirected to a file that evokes an I/O error.
For example, using a Bourne-compatible shell:
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ ./true --version &gt;&amp;-
./true: write error: Bad file number
$ ./true --version &gt; /dev/full
./true: write error: No space left on device
</pre></example>

<para>This version of <command>true</command> is implemented as a C program, and is thus
more secure and faster than a shell script implementation, and may safely
be used as a dummy shell for the purpose of disabling accounts.
</para>
</section>
<node name="test-invocation" spaces=" "><nodename>test invocation</nodename><nodenext automatic="on">expr invocation</nodenext><nodeprev automatic="on">true invocation</nodeprev><nodeup automatic="on">Conditions</nodeup></node>
<section spaces=" "><sectiontitle><command>test</command>: Check file types and compare values</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">test</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">check file types</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">compare values</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">expression evaluation</indexterm></cindex>

<para><command>test</command> returns a status of 0 (true) or 1 (false) depending on the
evaluation of the conditional expression <var>expr</var>.  Each part of the
expression must be a separate argument.
</para>
<para><command>test</command> has file status checks, string operators, and numeric
comparison operators.
</para>
<para><command>test</command> has an alternate form that uses opening and closing
square brackets instead a leading <samp>test</samp>.  For example, instead
of <samp>test -d /</samp>, you can write <samp>[ -d / ]</samp>.  The square
brackets must be separate arguments; for example, <samp>[-d /]</samp> does
not have the desired effect.  Since <samp>test <var>expr</var></samp> and <samp>[
<var>expr</var> ]</samp> have the same meaning, only the former form is discussed
below.
</para>
<para>Synopses:
</para>
<example endspaces=" ">
<pre xml:space="preserve">test <var>expression</var>
test
[ <var>expression</var> ]
[ ]
[ <var>option</var>
</pre></example>

<cindex index="cp" spaces=" "><indexterm index="cp">conflicts with shell built-ins</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">built-in shell commands, conflicts with</indexterm></cindex>
<para>Due to shell aliases and built-in <command>test</command> functions, using an
unadorned <command>test</command> interactively or in a script may get you
different functionality than that described here.  Invoke it via
<command>env</command> (i.e., <code>env test &dots;</code>) to avoid interference
from the shell.
</para>

<para>If <var>expression</var> is omitted, <command>test</command> returns false.
If <var>expression</var> is a single argument,
<command>test</command> returns false if the argument is null and true
otherwise.  The argument
can be any string, including strings like <samp>-d</samp>, <samp>-1</samp>,
<samp>--</samp>, <samp>--help</samp>, and <samp>--version</samp> that most other
programs would treat as options.  To get help and version information,
invoke the commands <samp>[ --help</samp> and <samp>[ --version</samp>, without
the usual closing brackets.  <xref><xrefnodename>Common options</xrefnodename></xref>.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">exit status of <command>test</command></indexterm></cindex>
<para>Exit status:
</para>
<display endspaces=" ">
<pre xml:space="preserve">0 if the expression is true,
1 if the expression is false,
2 if an error occurred.
</pre></display>

<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::             ">File type tests</menunode><menudescription><pre xml:space="preserve">-[bcdfhLpSt]
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::     ">Access permission tests</menunode><menudescription><pre xml:space="preserve">-[gkruwxOG]
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::   ">File characteristic tests</menunode><menudescription><pre xml:space="preserve">-e -s -nt -ot -ef
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::                ">String tests</menunode><menudescription><pre xml:space="preserve">-z -n = == !=
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::               ">Numeric tests</menunode><menudescription><pre xml:space="preserve">-eq -ne -lt -le -gt -ge
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::        ">Connectives for test</menunode><menudescription><pre xml:space="preserve">! -a -o
</pre></menudescription></menuentry></menu>


<node name="File-type-tests" spaces=" "><nodename>File type tests</nodename><nodenext automatic="on">Access permission tests</nodenext><nodeup automatic="on">test invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>File type tests</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">file type tests</indexterm></cindex>

<para>These options test for particular types of files.  (Everything&textrsquo;s a file,
but not all files are the same!)
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-b <var>file</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-b</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">block special check</indexterm></cindex>
<para>True if <var>file</var> exists and is a block special device.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-c <var>file</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-c</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">character special check</indexterm></cindex>
<para>True if <var>file</var> exists and is a character special device.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-d <var>file</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-d</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">directory check</indexterm></cindex>
<para>True if <var>file</var> exists and is a directory.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-f <var>file</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-f</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">regular file check</indexterm></cindex>
<para>True if <var>file</var> exists and is a regular file.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-h <var>file</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">-L <var>file</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-L</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-h</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">symbolic link check</indexterm></cindex>
<para>True if <var>file</var> exists and is a symbolic link.
Unlike all other file-related tests, this test does not dereference
<var>file</var> if it is a symbolic link.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-p <var>file</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-p</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">named pipe check</indexterm></cindex>
<para>True if <var>file</var> exists and is a named pipe.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-S <var>file</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-S</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">socket check</indexterm></cindex>
<para>True if <var>file</var> exists and is a socket.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-t <var>fd</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-t</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">terminal check</indexterm></cindex>
<para>True if <var>fd</var> is a file descriptor that is associated with a
terminal.
</para>
</tableitem></tableentry></table>


</subsection>
<node name="Access-permission-tests" spaces=" "><nodename>Access permission tests</nodename><nodenext automatic="on">File characteristic tests</nodenext><nodeprev automatic="on">File type tests</nodeprev><nodeup automatic="on">test invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>Access permission tests</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">access permission tests</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">permission tests</indexterm></cindex>

<para>These options test for particular access permissions.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-g <var>file</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-g</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">set-group-ID check</indexterm></cindex>
<para>True if <var>file</var> exists and has its set-group-ID bit set.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-k <var>file</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-k</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">sticky bit check</indexterm></cindex>
<para>True if <var>file</var> exists and has its <dfn>sticky</dfn> bit set.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-r <var>file</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-r</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">readable file check</indexterm></cindex>
<para>True if <var>file</var> exists and read permission is granted.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-u <var>file</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-u</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">set-user-ID check</indexterm></cindex>
<para>True if <var>file</var> exists and has its set-user-ID bit set.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-w <var>file</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-w</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">writable file check</indexterm></cindex>
<para>True if <var>file</var> exists and write permission is granted.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-x <var>file</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-x</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">executable file check</indexterm></cindex>
<para>True if <var>file</var> exists and execute permission is granted
(or search permission, if it is a directory).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-O <var>file</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-O</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">owned by effective user ID check</indexterm></cindex>
<para>True if <var>file</var> exists and is owned by the current effective user ID.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-G <var>file</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-G</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">owned by effective group ID check</indexterm></cindex>
<para>True if <var>file</var> exists and is owned by the current effective group ID.
</para>
</tableitem></tableentry></table>

</subsection>
<node name="File-characteristic-tests" spaces=" "><nodename>File characteristic tests</nodename><nodenext automatic="on">String tests</nodenext><nodeprev automatic="on">Access permission tests</nodeprev><nodeup automatic="on">test invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>File characteristic tests</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">file characteristic tests</indexterm></cindex>

<para>These options test other file characteristics.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-e <var>file</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-e</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">existence-of-file check</indexterm></cindex>
<para>True if <var>file</var> exists.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-s <var>file</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-s</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">nonempty file check</indexterm></cindex>
<para>True if <var>file</var> exists and has a size greater than zero.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp"><var>file1</var> -nt <var>file2</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-nt</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">newer-than file check</indexterm></cindex>
<para>True if <var>file1</var> is newer (according to modification date) than
<var>file2</var>, or if <var>file1</var> exists and <var>file2</var> does not.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp"><var>file1</var> -ot <var>file2</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-ot</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">older-than file check</indexterm></cindex>
<para>True if <var>file1</var> is older (according to modification date) than
<var>file2</var>, or if <var>file2</var> exists and <var>file1</var> does not.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp"><var>file1</var> -ef <var>file2</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-ef</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">same file check</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">hard link check</indexterm></cindex>
<para>True if <var>file1</var> and <var>file2</var> have the same device and inode
numbers, i.e., if they are hard links to each other.
</para>
</tableitem></tableentry></table>


</subsection>
<node name="String-tests" spaces=" "><nodename>String tests</nodename><nodenext automatic="on">Numeric tests</nodenext><nodeprev automatic="on">File characteristic tests</nodeprev><nodeup automatic="on">test invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>String tests</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">string tests</indexterm></cindex>

<para>These options test string characteristics.  You may need to quote
<var>string</var> arguments for the shell.  For example:
</para>
<example endspaces=" ">
<pre xml:space="preserve">test -n &quot;$V&quot;
</pre></example>

<para>The quotes here prevent the wrong arguments from being passed to
<command>test</command> if <samp>$V</samp> is empty or contains special characters.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-z <var>string</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-z</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">zero-length string check</indexterm></cindex>
<para>True if the length of <var>string</var> is zero.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-n <var>string</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp"><var>string</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-n</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">nonzero-length string check</indexterm></cindex>
<para>True if the length of <var>string</var> is nonzero.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp"><var>string1</var> = <var>string2</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">=</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">equal string check</indexterm></cindex>
<para>True if the strings are equal.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp"><var>string1</var> == <var>string2</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">==</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">equal string check</indexterm></cindex>
<para>True if the strings are equal (synonym for =).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp"><var>string1</var> != <var>string2</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">!=</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">not-equal string check</indexterm></cindex>
<para>True if the strings are not equal.
</para>
</tableitem></tableentry></table>


</subsection>
<node name="Numeric-tests" spaces=" "><nodename>Numeric tests</nodename><nodenext automatic="on">Connectives for test</nodenext><nodeprev automatic="on">String tests</nodeprev><nodeup automatic="on">test invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>Numeric tests</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">numeric tests</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">arithmetic tests</indexterm></cindex>

<para>Numeric relational operators.  The arguments must be entirely numeric
(possibly negative), or the special expression <w><code>-l <var>string</var></code></w>,
which evaluates to the length of <var>string</var>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp"><var>arg1</var> -eq <var>arg2</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp"><var>arg1</var> -ne <var>arg2</var></itemformat></itemx>
<itemx spaces=" "><itemformat command="samp"><var>arg1</var> -lt <var>arg2</var></itemformat></itemx>
<itemx spaces=" "><itemformat command="samp"><var>arg1</var> -le <var>arg2</var></itemformat></itemx>
<itemx spaces=" "><itemformat command="samp"><var>arg1</var> -gt <var>arg2</var></itemformat></itemx>
<itemx spaces=" "><itemformat command="samp"><var>arg1</var> -ge <var>arg2</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-eq</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-ne</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-lt</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-le</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-gt</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-ge</indexterm></indexcommand>
<para>These arithmetic binary operators return true if <var>arg1</var> is equal,
not-equal, less-than, less-than-or-equal, greater-than, or
greater-than-or-equal than <var>arg2</var>, respectively.
</para>
</tableitem></tableentry></table>

<para>For example:
</para>
<example endspaces=" ">
<pre xml:space="preserve">test -1 -gt -2 &amp;&amp; echo yes
&result; yes
test -l abc -gt 1 &amp;&amp; echo yes
&result; yes
test 0x100 -eq 1
&errorglyph; test: integer expression expected before -eq
</pre></example>


</subsection>
<node name="Connectives-for-test" spaces=" "><nodename>Connectives for test</nodename><nodeprev automatic="on">Numeric tests</nodeprev><nodeup automatic="on">test invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>Connectives for <command>test</command></sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">logical connectives</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">connectives, logical</indexterm></cindex>

<para>The usual logical connectives.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">! <var>expr</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">!</indexterm></indexcommand>
<para>True if <var>expr</var> is false.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp"><var>expr1</var> -a <var>expr2</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-a</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">logical and operator</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">and operator</indexterm></cindex>
<para>True if both <var>expr1</var> and <var>expr2</var> are true.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp"><var>expr1</var> -o <var>expr2</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-o</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">logical or operator</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">or operator</indexterm></cindex>
<para>True if either <var>expr1</var> or <var>expr2</var> is true.
</para>
</tableitem></tableentry></table>


</subsection>
</section>
<node name="expr-invocation" spaces=" "><nodename>expr invocation</nodename><nodeprev automatic="on">test invocation</nodeprev><nodeup automatic="on">Conditions</nodeup></node>
<section spaces=" "><sectiontitle><command>expr</command>: Evaluate expressions</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">expr</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">expression evaluation</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">evaluation of expressions</indexterm></cindex>

<para><command>expr</command> evaluates an expression and writes the result on standard
output.  Each token of the expression must be a separate argument.
</para>
<para>Operands are either integers or strings.  Integers consist of one or
more decimal digits, with an optional leading <samp>-</samp>.
<command>expr</command> converts
anything appearing in an operand position to an integer or a string
depending on the operation being applied to it.
</para>
<para>Strings are not quoted for <command>expr</command> itself, though you may need to
quote them to protect characters with special meaning to the shell,
e.g., spaces.  However, regardless of whether it is quoted, a string
operand should not be a parenthesis or any of <command>expr</command>&textrsquo;s
operators like <code>+</code>, so you cannot safely pass an arbitrary string
<code>$str</code> to expr merely by quoting it to the shell.  One way to
work around this is to use the <sc>gnu</sc> extension <code>+</code>,
(e.g., <code>+ &quot;$str&quot; = foo</code>); a more portable way is to use
<code><w>&quot; $str&quot;</w></code> and to adjust the rest of the expression to take
the leading space into account (e.g., <code><w>&quot; $str&quot; = &quot; foo&quot;</w></code>).
</para>
<para>You should not pass a negative integer or a string with leading
<samp>-</samp> as <command>expr</command>&textrsquo;s first argument, as it might be
misinterpreted as an option; this can be avoided by parenthesization.
Also, portable scripts should not use a string operand that happens to
take the form of an integer; this can be worked around by inserting
leading spaces as mentioned above.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">parentheses for grouping</indexterm></cindex>
<para>Operators may be given as infix symbols or prefix keywords.  Parentheses
may be used for grouping in the usual manner.  You must quote
parentheses and many operators to avoid the shell evaluating them,
however.
</para>
<para>When built with support for the GNU MP library, <command>expr</command> uses
arbitrary-precision arithmetic; otherwise, it uses native arithmetic
types and may fail due to arithmetic overflow.
</para>
<para>The only options are <option>--help</option> and <option>--version</option>.  <xref><xrefnodename>Common
options</xrefnodename></xref>.  Options must precede operands.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">exit status of <command>expr</command></indexterm></cindex>
<para>Exit status:
</para>
<display endspaces=" ">
<pre xml:space="preserve">0 if the expression is neither null nor 0,
1 if the expression is null or 0,
2 if the expression is invalid,
3 if an internal error occurred (e.g., arithmetic overflow).
</pre></display>

<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::          ">String expressions</menunode><menudescription><pre xml:space="preserve">+ : match substr index length
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::         ">Numeric expressions</menunode><menudescription><pre xml:space="preserve">+ - * / %
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::          ">Relations for expr</menunode><menudescription><pre xml:space="preserve">| &amp; &lt; &lt;= = == != &gt;= &gt;
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">Examples of expr</menunode><menudescription><pre xml:space="preserve">Examples.
</pre></menudescription></menuentry></menu>


<node name="String-expressions" spaces=" "><nodename>String expressions</nodename><nodenext automatic="on">Numeric expressions</nodenext><nodeup automatic="on">expr invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>String expressions</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">string expressions</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">expressions, string</indexterm></cindex>

<para><command>expr</command> supports pattern matching and other string operators.  These
have higher precedence than both the numeric and relational operators (in
the next sections).
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp"><var>string</var> : <var>regex</var></itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp">pattern matching</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">regular expression matching</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">matching patterns</indexterm></cindex>
<para>Perform pattern matching.  The arguments are converted to strings and the
second is considered to be a (basic, a la GNU <code>grep</code>) regular
expression, with a <code>^</code> implicitly prepended.  The first argument is
then matched against this regular expression.
</para>
<para>If the match succeeds and <var>regex</var> uses <samp>\(</samp> and <samp>\)</samp>, the
<code>:</code> expression returns the part of <var>string</var> that matched the
subexpression; otherwise, it returns the number of characters matched.
</para>
<para>If the match fails, the <code>:</code> operator returns the null string if
<samp>\(</samp> and <samp>\)</samp> are used in <var>regex</var>, otherwise 0.
</para>
<kindex index="ky" spaces=" "><indexterm index="ky" mergedindex="cp">\( <r>regexp operator</r></indexterm></kindex>
<para>Only the first <samp>\( &dots; \)</samp> pair is relevant to the return
value; additional pairs are meaningful only for grouping the regular
expression operators.
</para>
<kindex index="ky" spaces=" "><indexterm index="ky" mergedindex="cp">\+ <r>regexp operator</r></indexterm></kindex>
<kindex index="ky" spaces=" "><indexterm index="ky" mergedindex="cp">\? <r>regexp operator</r></indexterm></kindex>
<kindex index="ky" spaces=" "><indexterm index="ky" mergedindex="cp">\| <r>regexp operator</r></indexterm></kindex>
<para>In the regular expression, <code>\+</code>, <code>\?</code>, and <code>\|</code> are
operators which respectively match one or more, zero or one, or separate
alternatives.  SunOS and other <command>expr</command>&textrsquo;s treat these as regular
characters.  (<acronym><acronymword>POSIX</acronymword></acronym> allows either behavior.)
<xref><xrefnodename>Top</xrefnodename><xrefinfoname spaces=" "></xrefinfoname><xrefprinteddesc spaces=" ">Regular Expression Library</xrefprinteddesc><xrefinfofile spaces=" ">regex</xrefinfofile><xrefprintedname spaces=" ">Regex</xrefprintedname></xref>, for details of
regular expression syntax.  Some examples are in <ref><xrefnodename>Examples of expr</xrefnodename></ref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">match <var>string</var> <var>regex</var></itemformat></item>
</tableterm><tableitem><findex index="fn" spaces=" "><indexterm index="fn" mergedindex="cp">match</indexterm></findex>
<para>An alternative way to do pattern matching.  This is the same as
<w><samp><var>string</var> : <var>regex</var></samp></w>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">substr <var>string</var> <var>position</var> <var>length</var></itemformat></item>
</tableterm><tableitem><findex index="fn" spaces=" "><indexterm index="fn" mergedindex="cp">substr</indexterm></findex>
<para>Returns the substring of <var>string</var> beginning at <var>position</var>
with length at most <var>length</var>.  If either <var>position</var> or
<var>length</var> is negative, zero, or non-numeric, returns the null string.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">index <var>string</var> <var>charset</var></itemformat></item>
</tableterm><tableitem><findex index="fn" spaces=" "><indexterm index="fn" mergedindex="cp">index</indexterm></findex>
<para>Returns the first position in <var>string</var> where the first character in
<var>charset</var> was found.  If no character in <var>charset</var> is found in
<var>string</var>, return 0.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">length <var>string</var></itemformat></item>
</tableterm><tableitem><findex index="fn" spaces=" "><indexterm index="fn" mergedindex="cp">length</indexterm></findex>
<para>Returns the length of <var>string</var>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">+ <var>token</var></itemformat></item>
</tableterm><tableitem><kindex index="ky" spaces=" "><indexterm index="ky" mergedindex="cp">+</indexterm></kindex>
<para>Interpret <var>token</var> as a string, even if it is a keyword like <var>match</var>
or an operator like <code>/</code>.
This makes it possible to test <code>expr length + &quot;$x&quot;</code> or
<code>expr + &quot;$x&quot; : '.*/\(.\)'</code> and have it do the right thing even if
the value of <var>$x</var> happens to be (for example) <code>/</code> or <code>index</code>.
This operator is a <acronym><acronymword>GNU</acronymword></acronym> extension.  Portable shell scripts should use
<code><w>&quot; $token&quot;</w> : <w>' \(.*\)'</w></code> instead of <code>+ &quot;$token&quot;</code>.
</para>
</tableitem></tableentry></table>

<para>To make <command>expr</command> interpret keywords as strings, you must use the
<code>quote</code> operator.
</para>

</subsection>
<node name="Numeric-expressions" spaces=" "><nodename>Numeric expressions</nodename><nodenext automatic="on">Relations for expr</nodenext><nodeprev automatic="on">String expressions</nodeprev><nodeup automatic="on">expr invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>Numeric expressions</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">numeric expressions</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">expressions, numeric</indexterm></cindex>

<para><command>expr</command> supports the usual numeric operators, in order of increasing
precedence.  These numeric operators have lower precedence than the
string operators described in the previous section, and higher precedence
than the connectives (next section).
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">+ -</itemformat></item>
</tableterm><tableitem><kindex index="ky" spaces=" "><indexterm index="ky" mergedindex="cp">+</indexterm></kindex>
<kindex index="ky" spaces=" "><indexterm index="ky" mergedindex="cp">-</indexterm></kindex>
<cindex index="cp" spaces=" "><indexterm index="cp">addition</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">subtraction</indexterm></cindex>
<para>Addition and subtraction.  Both arguments are converted to integers;
an error occurs if this cannot be done.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">* / %</itemformat></item>
</tableterm><tableitem><kindex index="ky" spaces=" "><indexterm index="ky" mergedindex="cp">*</indexterm></kindex>
<kindex index="ky" spaces=" "><indexterm index="ky" mergedindex="cp">/</indexterm></kindex>
<kindex index="ky" spaces=" "><indexterm index="ky" mergedindex="cp">%</indexterm></kindex>
<cindex index="cp" spaces=" "><indexterm index="cp">multiplication</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">division</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">remainder</indexterm></cindex>
<para>Multiplication, division, remainder.  Both arguments are converted to
integers; an error occurs if this cannot be done.
</para>
</tableitem></tableentry></table>


</subsection>
<node name="Relations-for-expr" spaces=" "><nodename>Relations for expr</nodename><nodenext automatic="on">Examples of expr</nodenext><nodeprev automatic="on">Numeric expressions</nodeprev><nodeup automatic="on">expr invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>Relations for <command>expr</command></sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">connectives, logical</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">logical connectives</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">relations, numeric or string</indexterm></cindex>

<para><command>expr</command> supports the usual logical connectives and relations.  These
have lower precedence than the string and numeric operators
(previous sections).  Here is the list, lowest-precedence operator first.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">|</itemformat></item>
</tableterm><tableitem><kindex index="ky" spaces=" "><indexterm index="ky" mergedindex="cp">|</indexterm></kindex>
<cindex index="cp" spaces=" "><indexterm index="cp">logical or operator</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">or operator</indexterm></cindex>
<para>Returns its first argument if that is neither null nor zero, otherwise
its second argument if it is neither null nor zero, otherwise 0.  It
does not evaluate its second argument if its first argument is neither
null nor zero.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">&amp;</itemformat></item>
</tableterm><tableitem><kindex index="ky" spaces=" "><indexterm index="ky" mergedindex="cp">&amp;</indexterm></kindex>
<cindex index="cp" spaces=" "><indexterm index="cp">logical and operator</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">and operator</indexterm></cindex>
<para>Return its first argument if neither argument is null or zero, otherwise
0.  It does not evaluate its second argument if its first argument is
null or zero.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">&lt; &lt;= = == != &gt;= &gt;</itemformat></item>
</tableterm><tableitem><kindex index="ky" spaces=" "><indexterm index="ky" mergedindex="cp">&lt;</indexterm></kindex>
<kindex index="ky" spaces=" "><indexterm index="ky" mergedindex="cp">&lt;=</indexterm></kindex>
<kindex index="ky" spaces=" "><indexterm index="ky" mergedindex="cp">=</indexterm></kindex>
<kindex index="ky" spaces=" "><indexterm index="ky" mergedindex="cp">==</indexterm></kindex>
<kindex index="ky" spaces=" "><indexterm index="ky" mergedindex="cp">&gt;</indexterm></kindex>
<kindex index="ky" spaces=" "><indexterm index="ky" mergedindex="cp">&gt;=</indexterm></kindex>
<cindex index="cp" spaces=" "><indexterm index="cp">comparison operators</indexterm></cindex>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">LC_COLLATE</indexterm></vindex>
<para>Compare the arguments and return 1 if the relation is true, 0 otherwise.
<code>==</code> is a synonym for <code>=</code>.  <command>expr</command> first tries to convert
both arguments to integers and do a numeric comparison; if either
conversion fails, it does a lexicographic comparison using the character
collating sequence specified by the <env>LC_COLLATE</env> locale.
</para>
</tableitem></tableentry></table>


</subsection>
<node name="Examples-of-expr" spaces=" "><nodename>Examples of expr</nodename><nodeprev automatic="on">Relations for expr</nodeprev><nodeup automatic="on">expr invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>Examples of using <command>expr</command></sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">examples of <command>expr</command></indexterm></cindex>
<para>Here are a few examples, including quoting for shell metacharacters.
</para>
<para>To add 1 to the shell variable <code>foo</code>, in Bourne-compatible shells:
</para>
<example endspaces=" ">
<pre xml:space="preserve">foo=`expr $foo + 1`
</pre></example>

<para>To print the non-directory part of the file name stored in
<code>$fname</code>, which need not contain a <code>/</code>:
</para>
<example endspaces=" ">
<pre xml:space="preserve">expr $fname : '.*/\(.*\)' '|' $fname
</pre></example>

<para>An example showing that <code>\+</code> is an operator:
</para>
<example endspaces=" ">
<pre xml:space="preserve">expr aaa : 'a\+'
&result; 3
</pre></example>

<example endspaces=" ">
<pre xml:space="preserve">expr abc : 'a\(.\)c'
&result; b
expr index abcdef cz
&result; 3
expr index index a
&errorglyph; expr: syntax error
expr index + index a
&result; 0
</pre></example>


</subsection>
</section>
</chapter>
<node name="Redirection" spaces=" "><nodename>Redirection</nodename><nodenext automatic="on">File name manipulation</nodenext><nodeprev automatic="on">Conditions</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>Redirection</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">redirection</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">commands for redirection</indexterm></cindex>

<para>Unix shells commonly provide several forms of <dfn>redirection</dfn>&textmdash;ways
to change the input source or output destination of a command.  But one
useful redirection is performed by a separate command, not by the shell;
it&textrsquo;s described here.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::              ">tee invocation</menunode><menudescription><pre xml:space="preserve">Redirect output to multiple files or processes.
</pre></menudescription></menuentry></menu>


<node name="tee-invocation" spaces=" "><nodename>tee invocation</nodename><nodeup automatic="on">Redirection</nodeup></node>
<section spaces=" "><sectiontitle><command>tee</command>: Redirect output to multiple files or processes</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">tee</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">pipe fitting</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">destinations, multiple output</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">read from stdin and write to stdout and files</indexterm></cindex>

<para>The <command>tee</command> command copies standard input to standard output and also
to any files given as arguments.  This is useful when you want not only
to send some data down a pipe, but also to save a copy.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">tee [<var>option</var>]&dots; [<var>file</var>]&dots;
</pre></example>

<para>If a file being written to does not already exist, it is created.  If a
file being written to already exists, the data it previously contained
is overwritten unless the <option>-a</option> option is used.
</para>
<para>A <var>file</var> of <samp>-</samp> causes <command>tee</command> to send another copy of
input to standard output, but this is typically not that useful as the
copies are interleaved.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">-a</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--append</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-a</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;append</indexterm></indexcommand>
<para>Append standard input to the given files rather than overwriting
them.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-i</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--ignore-interrupts</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-i</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;ignore-interrupts</indexterm></indexcommand>
<para>Ignore interrupt signals.
</para>
</tableitem></tableentry></table>

<para>The <command>tee</command> command is useful when you happen to be transferring a large
amount of data and also want to summarize that data without reading
it a second time.  For example, when you are downloading a DVD image,
you often want to verify its signature or checksum right away.
The inefficient way to do it is simply:
</para>
<example endspaces=" ">
<pre xml:space="preserve">wget http://example.com/some.iso &amp;&amp; sha1sum some.iso
</pre></example>

<para>One problem with the above is that it makes you wait for the
download to complete before starting the time-consuming SHA1 computation.
Perhaps even more importantly, the above requires reading
the DVD image a second time (the first was from the network).
</para>
<para>The efficient way to do it is to interleave the download
and SHA1 computation.  Then, you&textrsquo;ll get the checksum for
free, because the entire process parallelizes so well:
</para>
<example endspaces=" ">
<pre xml:space="preserve"># slightly contrived, to demonstrate process substitution
wget -O - http://example.com/dvd.iso \
  | tee &gt;(sha1sum &gt; dvd.sha1) &gt; dvd.iso
</pre></example>

<para>That makes <command>tee</command> write not just to the expected output file,
but also to a pipe running <command>sha1sum</command> and saving the final
checksum in a file named <file>dvd.sha1</file>.
</para>
<para>Note, however, that this example relies on a feature of modern shells
called <dfn>process substitution</dfn>
(the <samp>&gt;(command)</samp> syntax, above;
<xref><xrefnodename>Process Substitution</xrefnodename><xrefprinteddesc>Process Substitution</xrefprinteddesc><xrefinfofile spaces=" ">bashref</xrefinfofile><xrefprintedname spaces="\n">The Bash Reference Manual</xrefprintedname></xref>.),
so it works with <command>zsh</command>, <command>bash</command>, and <command>ksh</command>,
but not with <command>/bin/sh</command>.  So if you write code like this
in a shell script, be sure to start the script with <samp>#!/bin/bash</samp>.
</para>
<para>Since the above example writes to one file and one process,
a more conventional and portable use of <command>tee</command> is even better:
</para>
<example endspaces=" ">
<pre xml:space="preserve">wget -O - http://example.com/dvd.iso \
  | tee dvd.iso | sha1sum &gt; dvd.sha1
</pre></example>

<para>You can extend this example to make <command>tee</command> write to two processes,
computing MD5 and SHA1 checksums in parallel.  In this case,
process substitution is required:
</para>
<example endspaces=" ">
<pre xml:space="preserve">wget -O - http://example.com/dvd.iso \
  | tee &gt;(sha1sum &gt; dvd.sha1) \
        &gt;(md5sum &gt; dvd.md5) \
  &gt; dvd.iso
</pre></example>

<para>This technique is also useful when you want to make a <emph>compressed</emph>
copy of the contents of a pipe.
Consider a tool to graphically summarize disk usage data from <samp>du -ak</samp>.
For a large hierarchy, <samp>du -ak</samp> can run for a long time,
and can easily produce terabytes of data, so you won&textrsquo;t want to
rerun the command unnecessarily.  Nor will you want to save
the uncompressed output.
</para>
<para>Doing it the inefficient way, you can&textrsquo;t even start the GUI
until after you&textrsquo;ve compressed all of the <command>du</command> output:
</para>
<example endspaces=" ">
<pre xml:space="preserve">du -ak | gzip -9 &gt; /tmp/du.gz
gzip -d /tmp/du.gz | xdiskusage -a
</pre></example>

<para>With <command>tee</command> and process substitution, you start the GUI
right away and eliminate the decompression completely:
</para>
<example endspaces=" ">
<pre xml:space="preserve">du -ak | tee &gt;(gzip -9 &gt; /tmp/du.gz) | xdiskusage -a
</pre></example>

<para>Finally, if you regularly create more than one type of
compressed tarball at once, for example when <code>make dist</code> creates
both <command>gzip</command>-compressed and <command>bzip2</command>-compressed tarballs,
there may be a better way.
Typical <command>automake</command>-generated <file>Makefile</file> rules create
the two compressed tar archives with commands in sequence, like this
(slightly simplified):
</para>
<example endspaces=" ">
<pre xml:space="preserve">tardir=your-pkg-M.N
tar chof - &quot;$tardir&quot; | gzip  -9 -c &gt; your-pkg-M.N.tar.gz
tar chof - &quot;$tardir&quot; | bzip2 -9 -c &gt; your-pkg-M.N.tar.bz2
</pre></example>

<para>However, if the hierarchy you are archiving and compressing is larger
than a couple megabytes, and especially if you are using a multi-processor
system with plenty of memory, then you can do much better by reading the
directory contents only once and running the compression programs in parallel:
</para>
<example endspaces=" ">
<pre xml:space="preserve">tardir=your-pkg-M.N
tar chof - &quot;$tardir&quot; \
  | tee &gt;(gzip -9 -c &gt; your-pkg-M.N.tar.gz) \
  | bzip2 -9 -c &gt; your-pkg-M.N.tar.bz2
</pre></example>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
</chapter>
<node name="File-name-manipulation" spaces=" "><nodename>File name manipulation</nodename><nodenext automatic="on">Working context</nodenext><nodeprev automatic="on">Redirection</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>File name manipulation</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">file name manipulation</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">manipulation of file names</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">commands for file name manipulation</indexterm></cindex>

<para>This section describes commands that manipulate file names.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::         ">basename invocation</menunode><menudescription><pre xml:space="preserve">Strip directory and suffix from a file name.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::          ">dirname invocation</menunode><menudescription><pre xml:space="preserve">Strip last file name component.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::          ">pathchk invocation</menunode><menudescription><pre xml:space="preserve">Check file name validity and portability.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::           ">mktemp invocation</menunode><menudescription><pre xml:space="preserve">Create temporary file or directory.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::         ">realpath invocation</menunode><menudescription><pre xml:space="preserve">Print resolved file names.
</pre></menudescription></menuentry></menu>


<node name="basename-invocation" spaces=" "><nodename>basename invocation</nodename><nodenext automatic="on">dirname invocation</nodenext><nodeup automatic="on">File name manipulation</nodeup></node>
<section spaces=" "><sectiontitle><command>basename</command>: Strip directory and suffix from a file name</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">basename</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">strip directory and suffix from file names</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">directory, stripping from file names</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">suffix, stripping from file names</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">file names, stripping directory and suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">leading directory components, stripping</indexterm></cindex>

<para><command>basename</command> removes any leading directory components from
<var>name</var>.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">basename <var>name</var> [<var>suffix</var>]
</pre></example>

<para>If <var>suffix</var> is specified and is identical to the end of <var>name</var>,
it is removed from <var>name</var> as well.  Note that since trailing slashes
are removed prior to suffix matching, <var>suffix</var> will do nothing if it
contains slashes.  <command>basename</command> prints the result on standard
output.
</para>
<!-- c This test is used both here and in the section on dirname. -->
<macro name="basenameAndDirname" line=" basenameAndDirname">Together, @command{basename} and @command{dirname} are designed such
that if @samp{ls &quot;$name&quot;} succeeds, then the command sequence @samp{cd
&quot;$(dirname &quot;$name&quot;)&quot;; ls &quot;$(basename &quot;$name&quot;)&quot;} will, too.  This works
for everything except file names containing a trailing newline.
</macro>
<para>Together, <command>basename</command> and <command>dirname</command> are designed such
that if <samp>ls &quot;$name&quot;</samp> succeeds, then the command sequence <samp>cd
&quot;$(dirname &quot;$name&quot;)&quot;; ls &quot;$(basename &quot;$name&quot;)&quot;</samp> will, too.  This works
for everything except file names containing a trailing newline.
</para>
<para><acronym><acronymword>POSIX</acronymword></acronym> allows the implementation to define the results if
<var>name</var> is empty or <samp>//</samp>.  In the former case, <acronym><acronymword>GNU</acronymword></acronym>
<command>basename</command> returns the empty string.  In the latter case, the
result is <samp>//</samp> on platforms where <var>//</var> is distinct from
<var>/</var>, and <samp>/</samp> on platforms where there is no difference.
</para>
<para>The only options are <option>--help</option> and <option>--version</option>.  <xref><xrefnodename>Common
options</xrefnodename></xref>.  Options must precede operands.
</para>
<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>
<para>Examples:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve"># Output &quot;sort&quot;.
basename /usr/bin/sort

# Output &quot;stdio&quot;.
basename include/stdio.h .h
</pre></smallexample>


</section>
<node name="dirname-invocation" spaces=" "><nodename>dirname invocation</nodename><nodenext automatic="on">pathchk invocation</nodenext><nodeprev automatic="on">basename invocation</nodeprev><nodeup automatic="on">File name manipulation</nodeup></node>
<section spaces=" "><sectiontitle><command>dirname</command>: Strip last file name component</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">dirname</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">directory components, printing</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">stripping non-directory suffix</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">non-directory suffix, stripping</indexterm></cindex>

<para><command>dirname</command> prints all but the final slash-delimited component of
<var>name</var>.  Slashes on either side of the final component are also
removed.  If the string contains no slash, <command>dirname</command> prints
<samp>.</samp> (meaning the current directory).  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">dirname <var>name</var>
</pre></example>

<para><var>name</var> need not be a file name, but if it is, this operation
effectively lists the directory that contains the final component,
including the case when the final component is itself a directory.
</para>
<para>Together, <command>basename</command> and <command>dirname</command> are designed such
that if <samp>ls &quot;$name&quot;</samp> succeeds, then the command sequence <samp>cd
&quot;$(dirname &quot;$name&quot;)&quot;; ls &quot;$(basename &quot;$name&quot;)&quot;</samp> will, too.  This works
for everything except file names containing a trailing newline.
</para>
<para><acronym><acronymword>POSIX</acronymword></acronym> allows the implementation to define the results if
<var>name</var> is <samp>//</samp>.  With <acronym><acronymword>GNU</acronymword></acronym> <command>dirname</command>, the
result is <samp>//</samp> on platforms where <var>//</var> is distinct from
<var>/</var>, and <samp>/</samp> on platforms where there is no difference.
</para>
<para>The only options are <option>--help</option> and <option>--version</option>.  <xref><xrefnodename>Common
options</xrefnodename></xref>.
</para>
<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>
<para>Examples:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve"># Output &quot;/usr/bin&quot;.
dirname /usr/bin/sort
dirname /usr/bin//.//

# Output &quot;.&quot;.
dirname stdio.h
</pre></smallexample>


</section>
<node name="pathchk-invocation" spaces=" "><nodename>pathchk invocation</nodename><nodenext automatic="on">mktemp invocation</nodenext><nodeprev automatic="on">dirname invocation</nodeprev><nodeup automatic="on">File name manipulation</nodeup></node>
<section spaces=" "><sectiontitle><command>pathchk</command>: Check file name validity and portability</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">pathchk</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">file names, checking validity and portability</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">valid file names, checking for</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">portable file names, checking for</indexterm></cindex>

<para><command>pathchk</command> checks validity and portability of file names.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">pathchk [<var>option</var>]&dots; <var>name</var>&dots;
</pre></example>

<para>For each <var>name</var>, <command>pathchk</command> prints an error message if any of
these conditions is true:
</para>
<enumerate first="1" endspaces=" ">
<listitem>
<para>One of the existing directories in <var>name</var> does not have search
(execute) permission,
</para></listitem><listitem>
<para>The length of <var>name</var> is larger than the maximum supported by the
operating system.
</para></listitem><listitem>
<para>The length of one component of <var>name</var> is longer than
its file system&textrsquo;s maximum.
</para></listitem></enumerate>

<para>A nonexistent <var>name</var> is not an error, so long a file with that
name could be created under the above conditions.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
Options must precede operands.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-p</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-p</indexterm></indexcommand>
<para>Instead of performing checks based on the underlying file system,
print an error message if any of these conditions is true:
</para>
<enumerate first="1" endspaces=" ">
<listitem>
<para>A file name is empty.
</para>
</listitem><listitem>
<para>A file name contains a character outside the <acronym><acronymword>POSIX</acronymword></acronym> portable file
name character set, namely, the ASCII letters and digits, <samp>.</samp>,
<samp>_</samp>, <samp>-</samp>, and <samp>/</samp>.
</para>
</listitem><listitem>
<para>The length of a file name or one of its components exceeds the
<acronym><acronymword>POSIX</acronymword></acronym> minimum limits for portability.
</para></listitem></enumerate>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-P</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-P</indexterm></indexcommand>
<para>Print an error message if a file name is empty, or if it contains a component
that begins with <samp>-</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--portability</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;portability</indexterm></indexcommand>
<para>Print an error message if a file name is not portable to all <acronym><acronymword>POSIX</acronymword></acronym>
hosts.  This option is equivalent to <samp>-p -P</samp>.
</para>
</tableitem></tableentry></table>

<cindex index="cp" spaces=" "><indexterm index="cp">exit status of <command>pathchk</command></indexterm></cindex>
<para>Exit status:
</para>
<display endspaces=" ">
<pre xml:space="preserve">0 if all specified file names passed all checks,
1 otherwise.
</pre></display>

</section>
<node name="mktemp-invocation" spaces=" "><nodename>mktemp invocation</nodename><nodenext automatic="on">realpath invocation</nodenext><nodeprev automatic="on">pathchk invocation</nodeprev><nodeup automatic="on">File name manipulation</nodeup></node>
<section spaces=" "><sectiontitle><command>mktemp</command>: Create temporary file or directory</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">mktemp</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">file names, creating temporary</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">directory, creating temporary</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">temporary files and directories</indexterm></cindex>

<para><command>mktemp</command> manages the creation of temporary files and
directories.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">mktemp [<var>option</var>]&dots; [<var>template</var>]
</pre></example>

<para>Safely create a temporary file or directory based on <var>template</var>,
and print its name.  If given, <var>template</var> must include at least
three consecutive <samp>X</samp>s in the last component.  If omitted, the template
<samp>tmp.XXXXXXXXXX</samp> is used, and option <option>--tmpdir</option> is
implied.  The final run of <samp>X</samp>s in the <var>template</var> will be replaced
by alpha-numeric characters; thus, on a case-sensitive file system,
and with a <var>template</var> including a run of <var>n</var> instances of <samp>X</samp>,
there are <samp>62**<var>n</var></samp> potential file names.
</para>
<para>Older scripts used to create temporary files by simply joining the
name of the program with the process id (<samp>$$</samp>) as a suffix.
However, that naming scheme is easily predictable, and suffers from a
race condition where the attacker can create an appropriately named
symbolic link, such that when the script then opens a handle to what
it thought was an unused file, it is instead modifying an existing
file.  Using the same scheme to create a directory is slightly safer,
since the <command>mkdir</command> will fail if the target already exists, but
it is still inferior because it allows for denial of service attacks.
Therefore, modern scripts should use the <command>mktemp</command> command to
guarantee that the generated name will be unpredictable, and that
knowledge of the temporary file name implies that the file was created
by the current script and cannot be modified by other users.
</para>
<para>When creating a file, the resulting file has read and write
permissions for the current user, but no permissions for the group or
others; these permissions are reduced if the current umask is more
restrictive.
</para>
<para>Here are some examples (although note that if you repeat them, you
will most likely get different file names):
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet" /></itemprepend>
<beforefirstitem>
</beforefirstitem><listitem><prepend>&bullet;</prepend>
<para>Create a temporary file in the current directory.
</para><example endspaces=" ">
<pre xml:space="preserve">$ mktemp file.XXXX
file.H47c
</pre></example>

</listitem><listitem><prepend>&bullet;</prepend>
<para>Create a temporary file with a known suffix.
</para><example endspaces=" ">
<pre xml:space="preserve">$ mktemp --suffix=.txt file-XXXX
file-H08W.txt
$ mktemp file-XXXX-XXXX.txt
file-XXXX-eI9L.txt
</pre></example>

</listitem><listitem><prepend>&bullet;</prepend>
<para>Create a secure fifo relative to the user&textrsquo;s choice of <env>TMPDIR</env>,
but falling back to the current directory rather than <file>/tmp</file>.
Note that <command>mktemp</command> does not create fifos, but can create a
secure directory in which the fifo can live.  Exit the shell if the
directory or fifo could not be created.
</para><example endspaces=" ">
<pre xml:space="preserve">$ dir=$(mktemp -p &quot;$&lbrace;TMPDIR:-.&rbrace;&quot; -d dir-XXXX) || exit 1
$ fifo=$dir/fifo
$ mkfifo &quot;$fifo&quot; || &lbrace; rmdir &quot;$dir&quot;; exit 1; &rbrace;
</pre></example>

</listitem><listitem><prepend>&bullet;</prepend>
<para>Create and use a temporary file if possible, but ignore failure.  The
file will reside in the directory named by <env>TMPDIR</env>, if specified,
or else in <file>/tmp</file>.
</para><example endspaces=" ">
<pre xml:space="preserve">$ file=$(mktemp -q) &amp;&amp; &lbrace;
&gt;   # Safe to use $file only within this block.  Use quotes,
&gt;   # since $TMPDIR, and thus $file, may contain whitespace.
&gt;   echo ... &gt; &quot;$file&quot;
&gt;   rm &quot;$file&quot;
&gt; &rbrace;
</pre></example>

</listitem><listitem><prepend>&bullet;</prepend>
<para>Act as a semi-random character generator (it is not fully random,
since it is impacted by the contents of the current directory).  To
avoid security holes, do not use the resulting names to create a file.
</para><example endspaces=" ">
<pre xml:space="preserve">$ mktemp -u XXX
Gb9
$ mktemp -u XXX
nzC
</pre></example>

</listitem></itemize>

<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-d</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--directory</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-d</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;directory</indexterm></indexcommand>
<para>Create a directory rather than a file.  The directory will have read,
write, and search permissions for the current user, but no permissions
for the group or others; these permissions are reduced if the current
umask is more restrictive.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-q</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--quiet</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-q</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;quiet</indexterm></indexcommand>
<para>Suppress diagnostics about failure to create a file or directory.  The
exit status will still reflect whether a file was created.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-u</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--dry-run</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-u</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;dry-run</indexterm></indexcommand>
<para>Generate a temporary name that does not name an existing file, without
changing the file system contents.  Using the output of this command
to create a new file is inherently unsafe, as there is a window of
time between generating the name and using it where another process
can create an object by the same name.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-p <var>dir</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--tmpdir[=<var>dir</var>]</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-p</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;tmpdir</indexterm></indexcommand>
<para>Treat <var>template</var> relative to the directory <var>dir</var>.  If
<var>dir</var> is not specified (only possible with the long option
<option>--tmpdir</option>) or is the empty string, use the value of
<env>TMPDIR</env> if available, otherwise use <samp>/tmp</samp>.  If this is
specified, <var>template</var> must not be absolute.  However,
<var>template</var> can still contain slashes, although intermediate
directories must already exist.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--suffix=<var>suffix</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;suffix</indexterm></indexcommand>
<para>Append <var>suffix</var> to the <var>template</var>.  <var>suffix</var> must not
contain slash.  If <option>--suffix</option> is specified, <var>template</var> must
end in <samp>X</samp>; if it is not specified, then an appropriate
<option>--suffix</option> is inferred by finding the last <samp>X</samp> in
<var>template</var>.  This option exists for use with the default
<var>template</var> and for the creation of a <var>suffix</var> that starts with
<samp>X</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-t</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-t</indexterm></indexcommand>
<para>Treat <var>template</var> as a single file relative to the value of
<env>TMPDIR</env> if available, or to the directory specified by
<option>-p</option>, otherwise to <samp>/tmp</samp>.  <var>template</var> must not
contain slashes.  This option is deprecated; the use of <option>-p</option>
without <option>-t</option> offers better defaults (by favoring the command
line over <env>TMPDIR</env>) and more flexibility (by allowing intermediate
directories).
</para>
</tableitem></tableentry></table>

<cindex index="cp" spaces=" "><indexterm index="cp">exit status of <command>mktemp</command></indexterm></cindex>
<para>Exit status:
</para>
<display endspaces=" ">
<pre xml:space="preserve">0 if the file was created,
1 otherwise.
</pre></display>


</section>
<node name="realpath-invocation" spaces=" "><nodename>realpath invocation</nodename><nodeprev automatic="on">mktemp invocation</nodeprev><nodeup automatic="on">File name manipulation</nodeup></node>
<section spaces=" "><sectiontitle><command>realpath</command>: Print the resolved file name.</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">realpath</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">file names, canonicalization</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">symlinks, resolution</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">canonical file name</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">canonicalize a file name</indexterm></cindex>
<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">realpath</indexterm></pindex>
<findex index="fn" spaces=" "><indexterm index="fn" mergedindex="cp">realpath</indexterm></findex>

<para><command>realpath</command> expands all symbolic links and resolves references to
<samp>/./</samp>, <samp>/../</samp> and extra <samp>/</samp> characters.  By default,
all but the last component of the specified files must exist.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">realpath [<var>option</var>]&dots; <var>file</var>&dots;
</pre></example>

<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-e</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--canonicalize-existing</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-e</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;canonicalize-existing</indexterm></indexcommand>
<para>Ensure that all components of the specified file names exist.
If any component is missing or unavailable, <command>realpath</command> will output
a diagnostic unless the <option>-q</option> option is specified, and exit with a
nonzero exit code.  A trailing slash requires that the name resolve to a
directory.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-m</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--canonicalize-missing</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-m</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;canonicalize-missing</indexterm></indexcommand>
<para>If any component of a specified file name is missing or unavailable,
treat it as a directory.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-L</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--logical</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-L</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;logical</indexterm></indexcommand>
<para>Symbolic links are resolved in the specified file names,
but they are resolved after any subsequent <samp>..</samp> components are processed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-P</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--physical</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-P</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;physical</indexterm></indexcommand>
<para>Symbolic links are resolved in the specified file names,
and they are resolved before any subsequent <samp>..</samp> components are processed.
This is the default mode of operation.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-q</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--quiet</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-q</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;quiet</indexterm></indexcommand>
<para>Suppress diagnostic messages for specified file names.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-s</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--strip</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--no-symlinks</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-s</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;strip</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;no-symlinks</indexterm></indexcommand>
<para>Do not resolve symbolic links.  Only resolve references to
<samp>/./</samp>, <samp>/../</samp> and remove extra <samp>/</samp> characters.
When combined with the <option>-m</option> option, realpath operates
only on the file name, and does not touch any actual file.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-z</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--zero</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-z</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;zero</indexterm></indexcommand>
<para>Separate output items with <sc>nul</sc> characters.
</para>
<itemx spaces=" "><itemformat command="samp">--relative-to=<var>file</var></itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;relative-to</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">relpath</indexterm></cindex>
<para>Print the resolved file names relative to the specified file.
Note this option honors the <option>-m</option> and <option>-e</option> options
pertaining to file existence.
</para>
<itemx spaces=" "><itemformat command="samp">--relative-base=<var>base</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;relative-base</indexterm></indexcommand>
<para>This option is valid when used with <option>--relative-to</option>, and will restrict
the output of <option>--relative-to</option> so that relative names are output,
only when <var>file</var>s are descendants of <var>base</var>.  Otherwise output the
absolute file name.  Note: this option honors the <option>-m</option> and <option>-e</option>
options pertaining to file existence.  For example:
</para>
<example endspaces=" ">
<pre xml:space="preserve">realpath --relative-to=/usr /tmp /usr/bin
&result; ../tmp
&result; bin
realpath --relative-base=/usr --relative-to=/usr /tmp /usr/bin
&result; /tmp
&result; bin
</pre></example>

</tableitem></tableentry></table>

<cindex index="cp" spaces=" "><indexterm index="cp">exit status of <command>realpath</command></indexterm></cindex>
<para>Exit status:
</para>
<display endspaces=" ">
<pre xml:space="preserve">0 if all file names were printed without issue.
1 otherwise.
</pre></display>


</section>
</chapter>
<node name="Working-context" spaces=" "><nodename>Working context</nodename><nodenext automatic="on">User information</nodenext><nodeprev automatic="on">File name manipulation</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>Working context</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">working context</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">commands for printing the working context</indexterm></cindex>

<para>This section describes commands that display or alter the context in
which you are working: the current directory, the terminal settings, and
so forth.  See also the user-related commands in the next section.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::              ">pwd invocation</menunode><menudescription><pre xml:space="preserve">Print working directory.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">stty invocation</menunode><menudescription><pre xml:space="preserve">Print or change terminal characteristics.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::         ">printenv invocation</menunode><menudescription><pre xml:space="preserve">Print environment variables.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::              ">tty invocation</menunode><menudescription><pre xml:space="preserve">Print file name of terminal on standard input.
</pre></menudescription></menuentry></menu>


<node name="pwd-invocation" spaces=" "><nodename>pwd invocation</nodename><nodenext automatic="on">stty invocation</nodenext><nodeup automatic="on">Working context</nodeup></node>
<section spaces=" "><sectiontitle><command>pwd</command>: Print working directory</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">pwd</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">print name of current directory</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">current working directory, printing</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">working directory, printing</indexterm></cindex>


<para><command>pwd</command> prints the name of the current directory.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">pwd [<var>option</var>]&dots;
</pre></example>

<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">-L</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--logical</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-L</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;logical</indexterm></indexcommand>
<para>If the contents of the environment variable <env>PWD</env> provide an
absolute name of the current directory with no <samp>.</samp> or <samp>..</samp>
components, but possibly with symbolic links, then output those
contents.  Otherwise, fall back to default <option>-P</option> handling.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-P</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--physical</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-P</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;physical</indexterm></indexcommand>
<para>Print a fully resolved name for the current directory.  That is, all
components of the printed name will be actual directory names&textmdash;none
will be symbolic links.
</para></tableitem></tableentry></table>

<cindex index="cp" spaces=" "><indexterm index="cp">symbolic links and <command>pwd</command></indexterm></cindex>
<para>If <option>-L</option> and <option>-P</option> are both given, the last one takes
precedence.  If neither option is given, then this implementation uses
<option>-P</option> as the default unless the <env>POSIXLY_CORRECT</env>
environment variable is set.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">conflicts with shell built-ins</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">built-in shell commands, conflicts with</indexterm></cindex>
<para>Due to shell aliases and built-in <command>pwd</command> functions, using an
unadorned <command>pwd</command> interactively or in a script may get you
different functionality than that described here.  Invoke it via
<command>env</command> (i.e., <code>env pwd &dots;</code>) to avoid interference
from the shell.
</para>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="stty-invocation" spaces=" "><nodename>stty invocation</nodename><nodenext automatic="on">printenv invocation</nodenext><nodeprev automatic="on">pwd invocation</nodeprev><nodeup automatic="on">Working context</nodeup></node>
<section spaces=" "><sectiontitle><command>stty</command>: Print or change terminal characteristics</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">stty</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">change or print terminal settings</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">terminal settings</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">line settings of terminal</indexterm></cindex>

<para><command>stty</command> prints or changes terminal characteristics, such as baud rate.
Synopses:
</para>
<example endspaces=" ">
<pre xml:space="preserve">stty [<var>option</var>] [<var>setting</var>]&dots;
stty [<var>option</var>]
</pre></example>

<para>If given no line settings, <command>stty</command> prints the baud rate, line
discipline number (on systems that support it), and line settings
that have been changed from the values set by <samp>stty sane</samp>.
By default, mode reading and setting are performed on the tty line
connected to standard input, although this can be modified by the
<option>--file</option> option.
</para>
<para><command>stty</command> accepts many non-option arguments that change aspects of
the terminal line operation, as described below.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">-a</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--all</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-a</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;all</indexterm></indexcommand>
<para>Print all current settings in human-readable form.  This option may not
be used in combination with any line settings.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-F <var>device</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--file=<var>device</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-F</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;file</indexterm></indexcommand>
<para>Set the line opened by the file name specified in <var>device</var> instead of
the tty line connected to standard input.  This option is necessary
because opening a <acronym><acronymword>POSIX</acronymword></acronym> tty requires use of the
<code>O_NONDELAY</code> flag to prevent a <acronym><acronymword>POSIX</acronymword></acronym> tty from blocking
until the carrier detect line is high if
the <code>clocal</code> flag is not set.  Hence, it is not always possible
to allow the shell to open the device in the traditional manner.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-g</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--save</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-g</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;save</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">machine-readable <command>stty</command> output</indexterm></cindex>
<para>Print all current settings in a form that can be used as an argument to
another <command>stty</command> command to restore the current settings.  This option
may not be used in combination with any line settings.
</para>
</tableitem></tableentry></table>

<para>Many settings can be turned off by preceding them with a <samp>-</samp>.
Such arguments are marked below with &textldquo;May be negated&textrdquo; in their
description.  The descriptions themselves refer to the positive
case, that is, when <emph>not</emph> negated (unless stated otherwise,
of course).
</para>
<para>Some settings are not available on all <acronym><acronymword>POSIX</acronymword></acronym> systems, since they use
extensions.  Such arguments are marked below with
&textldquo;Non-<acronym><acronymword>POSIX</acronymword></acronym>&textrdquo; in their description.  On non-<acronym><acronymword>POSIX</acronymword></acronym>
systems, those or other settings also may not
be available, but it&textrsquo;s not feasible to document all the variations: just
try it and see.
</para>
<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::                     ">Control</menunode><menudescription><pre xml:space="preserve">Control settings
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::                       ">Input</menunode><menudescription><pre xml:space="preserve">Input settings
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::                      ">Output</menunode><menudescription><pre xml:space="preserve">Output settings
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::                       ">Local</menunode><menudescription><pre xml:space="preserve">Local settings
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::                 ">Combination</menunode><menudescription><pre xml:space="preserve">Combination settings
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::                  ">Characters</menunode><menudescription><pre xml:space="preserve">Special characters
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::                     ">Special</menunode><menudescription><pre xml:space="preserve">Special settings
</pre></menudescription></menuentry></menu>


<node name="Control" spaces=" "><nodename>Control</nodename><nodenext automatic="on">Input</nodenext><nodeup automatic="on">stty invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>Control settings</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">control settings</indexterm></cindex>
<para>Control settings:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">parenb</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">parenb</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">two-way parity</indexterm></cindex>
<para>Generate parity bit in output and expect parity bit in input.
May be negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">parodd</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">parodd</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">odd parity</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">even parity</indexterm></cindex>
<para>Set odd parity (even if negated).  May be negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">cs5</itemformat></item>
<itemx spaces=" "><itemformat command="samp">cs6</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">cs7</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">cs8</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">cs<var>n</var></indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">character size</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">eight-bit characters</indexterm></cindex>
<para>Set character size to 5, 6, 7, or 8 bits.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">hup</itemformat></item>
<itemx spaces=" "><itemformat command="samp">hupcl</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">hup[cl]</indexterm></indexcommand>
<para>Send a hangup signal when the last process closes the tty.  May be
negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">cstopb</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">cstopb</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">stop bits</indexterm></cindex>
<para>Use two stop bits per character (one if negated).  May be negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">cread</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">cread</indexterm></indexcommand>
<para>Allow input to be received.  May be negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">clocal</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">clocal</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">modem control</indexterm></cindex>
<para>Disable modem control signals.  May be negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">crtscts</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">crtscts</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">hardware flow control</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">flow control, hardware</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">RTS/CTS flow control</indexterm></cindex>
<para>Enable RTS/CTS flow control.  Non-<acronym><acronymword>POSIX</acronymword></acronym>.  May be negated.
</para></tableitem></tableentry></table>


</subsection>
<node name="Input" spaces=" "><nodename>Input</nodename><nodenext automatic="on">Output</nodenext><nodeprev automatic="on">Control</nodeprev><nodeup automatic="on">stty invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>Input settings</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">input settings</indexterm></cindex>
<para>These settings control operations on data received from the terminal.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">ignbrk</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">ignbrk</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">breaks, ignoring</indexterm></cindex>
<para>Ignore break characters.  May be negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">brkint</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">brkint</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">breaks, cause interrupts</indexterm></cindex>
<para>Make breaks cause an interrupt signal.  May be negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ignpar</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">ignpar</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">parity, ignoring</indexterm></cindex>
<para>Ignore characters with parity errors.  May be negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">parmrk</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">parmrk</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">parity errors, marking</indexterm></cindex>
<para>Mark parity errors (with a 255-0-character sequence).  May be negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">inpck</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">inpck</indexterm></indexcommand>
<para>Enable input parity checking.  May be negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">istrip</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">istrip</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">eight-bit input</indexterm></cindex>
<para>Clear high (8th) bit of input characters.  May be negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">inlcr</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">inlcr</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">newline, translating to return</indexterm></cindex>
<para>Translate newline to carriage return.  May be negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">igncr</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">igncr</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">return, ignoring</indexterm></cindex>
<para>Ignore carriage return.  May be negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">icrnl</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">icrnl</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">return, translating to newline</indexterm></cindex>
<para>Translate carriage return to newline.  May be negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">iutf8</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">iutf8</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">input encoding, UTF-8</indexterm></cindex>
<para>Assume input characters are UTF-8 encoded.  May be negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ixon</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">ixon</indexterm></indexcommand>
<kindex index="ky" spaces=" "><indexterm index="ky" mergedindex="cp">C-s/C-q flow control</indexterm></kindex>
<cindex index="cp" spaces=" "><indexterm index="cp">XON/XOFF flow control</indexterm></cindex>
<para>Enable XON/XOFF flow control (that is, <kbd>CTRL-S</kbd>/<kbd>CTRL-Q</kbd>).  May
be negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ixoff</itemformat></item>
<itemx spaces=" "><itemformat command="samp">tandem</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">ixoff</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">tandem</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">software flow control</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">flow control, software</indexterm></cindex>
<para>Enable sending of <code>stop</code> character when the system input buffer
is almost full, and <code>start</code> character when it becomes almost
empty again.  May be negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">iuclc</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">iuclc</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">uppercase, translating to lowercase</indexterm></cindex>
<para>Translate uppercase characters to lowercase.  Non-<acronym><acronymword>POSIX</acronymword></acronym>.  May be
negated. Note ilcuc is not implemented, as one would not be able to issue
almost any (lowercase) Unix command, after invoking it.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ixany</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">ixany</indexterm></indexcommand>
<para>Allow any character to restart output (only the start character
if negated).  Non-<acronym><acronymword>POSIX</acronymword></acronym>.  May be negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">imaxbel</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">imaxbel</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">beeping at input buffer full</indexterm></cindex>
<para>Enable beeping and not flushing input buffer if a character arrives
when the input buffer is full.  Non-<acronym><acronymword>POSIX</acronymword></acronym>.  May be negated.
</para></tableitem></tableentry></table>


</subsection>
<node name="Output" spaces=" "><nodename>Output</nodename><nodenext automatic="on">Local</nodenext><nodeprev automatic="on">Input</nodeprev><nodeup automatic="on">stty invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>Output settings</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">output settings</indexterm></cindex>
<para>These settings control operations on data sent to the terminal.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">opost</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">opost</indexterm></indexcommand>
<para>Postprocess output.  May be negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">olcuc</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">olcuc</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">lowercase, translating to output</indexterm></cindex>
<para>Translate lowercase characters to uppercase.  Non-<acronym><acronymword>POSIX</acronymword></acronym>.  May be
negated. (Note ouclc is not currently implemented.)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ocrnl</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">ocrnl</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">return, translating to newline</indexterm></cindex>
<para>Translate carriage return to newline.  Non-<acronym><acronymword>POSIX</acronymword></acronym>.  May be negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">onlcr</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">onlcr</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">newline, translating to crlf</indexterm></cindex>
<para>Translate newline to carriage return-newline.  Non-<acronym><acronymword>POSIX</acronymword></acronym>.  May be
negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">onocr</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">onocr</indexterm></indexcommand>
<para>Do not print carriage returns in the first column.  Non-<acronym><acronymword>POSIX</acronymword></acronym>.
May be negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">onlret</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">onlret</indexterm></indexcommand>
<para>Newline performs a carriage return.  Non-<acronym><acronymword>POSIX</acronymword></acronym>.  May be negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ofill</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">ofill</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">pad instead of timing for delaying</indexterm></cindex>
<para>Use fill (padding) characters instead of timing for delays.
Non-<acronym><acronymword>POSIX</acronymword></acronym>.
May be negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ofdel</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">ofdel</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">pad character</indexterm></cindex>
<para>Use <acronym><acronymword>ASCII</acronymword></acronym> <sc>del</sc> characters for fill instead of
<acronym><acronymword>ASCII</acronymword></acronym> <sc>nul</sc> characters.  Non-<acronym><acronymword>POSIX</acronymword></acronym>.
May be negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">nl1</itemformat></item>
<itemx spaces=" "><itemformat command="samp">nl0</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">nl<var>n</var></indexterm></indexcommand>
<para>Newline delay style.  Non-<acronym><acronymword>POSIX</acronymword></acronym>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">cr3</itemformat></item>
<itemx spaces=" "><itemformat command="samp">cr2</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">cr1</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">cr0</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">cr<var>n</var></indexterm></indexcommand>
<para>Carriage return delay style.  Non-<acronym><acronymword>POSIX</acronymword></acronym>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">tab3</itemformat></item>
<itemx spaces=" "><itemformat command="samp">tab2</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">tab1</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">tab0</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">tab<var>n</var></indexterm></indexcommand>
<para>Horizontal tab delay style.  Non-<acronym><acronymword>POSIX</acronymword></acronym>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">bs1</itemformat></item>
<itemx spaces=" "><itemformat command="samp">bs0</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">bs<var>n</var></indexterm></indexcommand>
<para>Backspace delay style.  Non-<acronym><acronymword>POSIX</acronymword></acronym>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">vt1</itemformat></item>
<itemx spaces=" "><itemformat command="samp">vt0</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">vt<var>n</var></indexterm></indexcommand>
<para>Vertical tab delay style.  Non-<acronym><acronymword>POSIX</acronymword></acronym>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ff1</itemformat></item>
<itemx spaces=" "><itemformat command="samp">ff0</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">ff<var>n</var></indexterm></indexcommand>
<para>Form feed delay style.  Non-<acronym><acronymword>POSIX</acronymword></acronym>.
</para></tableitem></tableentry></table>


</subsection>
<node name="Local" spaces=" "><nodename>Local</nodename><nodenext automatic="on">Combination</nodenext><nodeprev automatic="on">Output</nodeprev><nodeup automatic="on">stty invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>Local settings</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">local settings</indexterm></cindex>

<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">isig</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">isig</indexterm></indexcommand>
<para>Enable <code>interrupt</code>, <code>quit</code>, and <code>suspend</code> special
characters.  May be negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">icanon</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">icanon</indexterm></indexcommand>
<para>Enable <code>erase</code>, <code>kill</code>, <code>werase</code>, and <code>rprnt</code>
special characters.  May be negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">iexten</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">iexten</indexterm></indexcommand>
<para>Enable non-<acronym><acronymword>POSIX</acronymword></acronym> special characters.  May be negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">echo</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">echo</indexterm></indexcommand>
<para>Echo input characters.  May be negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">echoe</itemformat></item>
<itemx spaces=" "><itemformat command="samp">crterase</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">echoe</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">crterase</indexterm></indexcommand>
<para>Echo <code>erase</code> characters as backspace-space-backspace.  May be
negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">echok</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">echok</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">newline echoing after <code>kill</code></indexterm></cindex>
<para>Echo a newline after a <code>kill</code> character.  May be negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">echonl</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">echonl</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">newline, echoing</indexterm></cindex>
<para>Echo newline even if not echoing other characters.  May be negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">noflsh</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">noflsh</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">flushing, disabling</indexterm></cindex>
<para>Disable flushing after <code>interrupt</code> and <code>quit</code> special
characters.  May be negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">xcase</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">xcase</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">case translation</indexterm></cindex>
<para>Enable input and output of uppercase characters by preceding their
lowercase equivalents with <samp>\</samp>, when <code>icanon</code> is set.
Non-<acronym><acronymword>POSIX</acronymword></acronym>.  May be negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">tostop</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">tostop</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">background jobs, stopping at terminal write</indexterm></cindex>
<para>Stop background jobs that try to write to the terminal.  Non-<acronym><acronymword>POSIX</acronymword></acronym>.
May be negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">echoprt</itemformat></item>
<itemx spaces=" "><itemformat command="samp">prterase</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">echoprt</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">prterase</indexterm></indexcommand>
<para>Echo erased characters backward, between <samp>\</samp> and <samp>/</samp>.
Non-<acronym><acronymword>POSIX</acronymword></acronym>.  May be negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">echoctl</itemformat></item>
<itemx spaces=" "><itemformat command="samp">ctlecho</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">echoctl</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">ctlecho</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">control characters, using <samp>^<var>c</var></samp></indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">hat notation for control characters</indexterm></cindex>
<para>Echo control characters in hat notation (<samp>^<var>c</var></samp>) instead
of literally.  Non-<acronym><acronymword>POSIX</acronymword></acronym>.  May be negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">echoke</itemformat></item>
<itemx spaces=" "><itemformat command="samp">crtkill</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">echoke</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">crtkill</indexterm></indexcommand>
<para>Echo the <code>kill</code> special character by erasing each character on
the line as indicated by the <code>echoprt</code> and <code>echoe</code> settings,
instead of by the <code>echoctl</code> and <code>echok</code> settings.
Non-<acronym><acronymword>POSIX</acronymword></acronym>.
May be negated.
</para></tableitem></tableentry></table>


</subsection>
<node name="Combination" spaces=" "><nodename>Combination</nodename><nodenext automatic="on">Characters</nodenext><nodeprev automatic="on">Local</nodeprev><nodeup automatic="on">stty invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>Combination settings</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">combination settings</indexterm></cindex>
<para>Combination settings:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">evenp</itemformat></item>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">evenp</indexterm></indexcommand>
<itemx spaces=" "><itemformat command="samp">parity</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">parity</indexterm></indexcommand>
<para>Same as <code>parenb -parodd cs7</code>.  May be negated.  If negated, same
as <code>-parenb cs8</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">oddp</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">oddp</indexterm></indexcommand>
<para>Same as <code>parenb parodd cs7</code>.  May be negated.  If negated, same
as <code>-parenb cs8</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">nl</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">nl</indexterm></indexcommand>
<para>Same as <code>-icrnl -onlcr</code>.  May be negated.  If negated, same as
<code>icrnl -inlcr -igncr onlcr -ocrnl -onlret</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ek</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">ek</indexterm></indexcommand>
<para>Reset the <code>erase</code> and <code>kill</code> special characters to their default
values.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">sane</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">sane</indexterm></indexcommand>
<para>Same as:
</para>
<!-- c This is too long to write inline. -->
<example endspaces=" ">
<pre xml:space="preserve">cread -ignbrk brkint -inlcr -igncr icrnl -ixoff
-iuclc -ixany imaxbel opost -olcuc -ocrnl onlcr
-onocr -onlret -ofill -ofdel nl0 cr0 tab0 bs0 vt0
ff0 isig icanon iexten echo echoe echok -echonl
-noflsh -xcase -tostop -echoprt echoctl echoke
</pre></example>

<noindent></noindent>
<para>and also sets all special characters to their default values.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">cooked</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">cooked</indexterm></indexcommand>
<para>Same as <code>brkint ignpar istrip icrnl ixon opost isig icanon</code>, plus
sets the <code>eof</code> and <code>eol</code> characters to their default values
if they are the same as the <code>min</code> and <code>time</code> characters.
May be negated.  If negated, same as <code>raw</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">raw</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">raw</indexterm></indexcommand>
<para>Same as:
</para>
<example endspaces=" ">
<pre xml:space="preserve">-ignbrk -brkint -ignpar -parmrk -inpck -istrip
-inlcr -igncr -icrnl -ixon -ixoff -iuclc -ixany
-imaxbel -opost -isig -icanon -xcase min 1 time 0
</pre></example>

<noindent></noindent>
<para>May be negated.  If negated, same as <code>cooked</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">cbreak</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">cbreak</indexterm></indexcommand>
<para>Same as <option>-icanon</option>.  May be negated.  If negated, same as
<code>icanon</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">pass8</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">pass8</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">eight-bit characters</indexterm></cindex>
<para>Same as <code>-parenb -istrip cs8</code>.  May be negated.  If negated,
same as <code>parenb istrip cs7</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">litout</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">litout</indexterm></indexcommand>
<para>Same as <option>-parenb -istrip -opost cs8</option>.  May be negated.
If negated, same as <code>parenb istrip opost cs7</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">decctlq</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">decctlq</indexterm></indexcommand>
<para>Same as <option>-ixany</option>.  Non-<acronym><acronymword>POSIX</acronymword></acronym>.  May be negated.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">tabs</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">tabs</indexterm></indexcommand>
<para>Same as <code>tab0</code>.  Non-<acronym><acronymword>POSIX</acronymword></acronym>.  May be negated.  If negated, same
as <code>tab3</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">lcase</itemformat></item>
<itemx spaces=" "><itemformat command="samp">LCASE</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">lcase</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">LCASE</indexterm></indexcommand>
<para>Same as <code>xcase iuclc olcuc</code>.  Non-<acronym><acronymword>POSIX</acronymword></acronym>.  May be negated.
(Used for terminals with uppercase characters only.)
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">crt</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">crt</indexterm></indexcommand>
<para>Same as <code>echoe echoctl echoke</code>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">dec</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">dec</indexterm></indexcommand>
<para>Same as <code>echoe echoctl echoke -ixany intr ^C erase ^? kill C-u</code>.
</para></tableitem></tableentry></table>


</subsection>
<node name="Characters" spaces=" "><nodename>Characters</nodename><nodenext automatic="on">Special</nodenext><nodeprev automatic="on">Combination</nodeprev><nodeup automatic="on">stty invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>Special characters</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">special characters</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">characters, special</indexterm></cindex>

<para>The special characters&textrsquo; default values vary from system to system.
They are set with the syntax <samp>name value</samp>, where the names are
listed below and the value can be given either literally, in hat
notation (<samp>^<var>c</var></samp>), or as an integer which may start with
<samp>0x</samp> to indicate hexadecimal, <samp>0</samp> to indicate octal, or
any other digit to indicate decimal.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">disabling special characters</indexterm></cindex>
<kindex index="ky" spaces=" "><indexterm index="ky" mergedindex="cp">u<r>, and disabling special characters</r></indexterm></kindex>
<para>For GNU stty, giving a value of <code>^-</code> or <code>undef</code> disables that
special character.  (This is incompatible with Ultrix <command>stty</command>,
which uses  a value of <samp>u</samp> to disable a special character.  GNU
<command>stty</command> treats a value <samp>u</samp> like any other, namely to set that
special character to <key>U</key>.)
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">intr</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">intr</indexterm></indexcommand>
<para>Send an interrupt signal.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">quit</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">quit</indexterm></indexcommand>
<para>Send a quit signal.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">erase</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">erase</indexterm></indexcommand>
<para>Erase the last character typed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">kill</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">kill</indexterm></indexcommand>
<para>Erase the current line.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">eof</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">eof</indexterm></indexcommand>
<para>Send an end of file (terminate the input).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">eol</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">eol</indexterm></indexcommand>
<para>End the line.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">eol2</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">eol2</indexterm></indexcommand>
<para>Alternate character to end the line.  Non-<acronym><acronymword>POSIX</acronymword></acronym>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">swtch</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">swtch</indexterm></indexcommand>
<para>Switch to a different shell layer.  Non-<acronym><acronymword>POSIX</acronymword></acronym>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">start</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">start</indexterm></indexcommand>
<para>Restart the output after stopping it.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">stop</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">stop</indexterm></indexcommand>
<para>Stop the output.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">susp</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">susp</indexterm></indexcommand>
<para>Send a terminal stop signal.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">dsusp</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">dsusp</indexterm></indexcommand>
<para>Send a terminal stop signal after flushing the input.  Non-<acronym><acronymword>POSIX</acronymword></acronym>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">rprnt</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">rprnt</indexterm></indexcommand>
<para>Redraw the current line.  Non-<acronym><acronymword>POSIX</acronymword></acronym>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">werase</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">werase</indexterm></indexcommand>
<para>Erase the last word typed.  Non-<acronym><acronymword>POSIX</acronymword></acronym>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">lnext</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">lnext</indexterm></indexcommand>
<para>Enter the next character typed literally, even if it is a special
character.  Non-<acronym><acronymword>POSIX</acronymword></acronym>.
</para></tableitem></tableentry></table>


</subsection>
<node name="Special" spaces=" "><nodename>Special</nodename><nodeprev automatic="on">Characters</nodeprev><nodeup automatic="on">stty invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>Special settings</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">special settings</indexterm></cindex>

<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">min <var>n</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">min</indexterm></indexcommand>
<para>Set the minimum number of characters that will satisfy a read until
the time value has expired, when <option>-icanon</option> is set.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">time <var>n</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">time</indexterm></indexcommand>
<para>Set the number of tenths of a second before reads time out if the minimum
number of characters have not been read, when <option>-icanon</option> is set.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ispeed <var>n</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">ispeed</indexterm></indexcommand>
<para>Set the input speed to <var>n</var>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ospeed <var>n</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">ospeed</indexterm></indexcommand>
<para>Set the output speed to <var>n</var>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">rows <var>n</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">rows</indexterm></indexcommand>
<para>Tell the tty kernel driver that the terminal has <var>n</var> rows.
Non-<acronym><acronymword>POSIX</acronymword></acronym>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">cols <var>n</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">columns <var>n</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">cols</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">columns</indexterm></indexcommand>
<para>Tell the kernel that the terminal has <var>n</var> columns.  Non-<acronym><acronymword>POSIX</acronymword></acronym>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">size</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">size</indexterm></indexcommand>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">LINES</indexterm></vindex>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">COLUMNS</indexterm></vindex>
<para>Print the number of rows and columns that the kernel thinks the
terminal has.  (Systems that don&textrsquo;t support rows and columns in the kernel
typically use the environment variables <env>LINES</env> and <env>COLUMNS</env>
instead; however, GNU <command>stty</command> does not know anything about them.)
Non-<acronym><acronymword>POSIX</acronymword></acronym>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">line <var>n</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">line</indexterm></indexcommand>
<para>Use line discipline <var>n</var>.  Non-<acronym><acronymword>POSIX</acronymword></acronym>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">speed</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">speed</indexterm></indexcommand>
<para>Print the terminal speed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp"><var>n</var></itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp">baud rate, setting</indexterm></cindex>
<para>Set the input and output speeds to <var>n</var>.  <var>n</var> can be one of: 0
50 75 110 134 134.5 150 200 300 600 1200 1800 2400 4800 9600 19200
38400 <code>exta</code> <code>extb</code>.  <code>exta</code> is the same as 19200;
<code>extb</code> is the same as 38400.  Many systems, including GNU/Linux,
support higher speeds.  The <command>stty</command> command includes support
for speeds of
57600,
115200,
230400,
460800,
500000,
576000,
921600,
1000000,
1152000,
1500000,
2000000,
2500000,
3000000,
3500000,
or
4000000 where the system supports these.
0 hangs up the line if <option>-clocal</option> is set.
</para></tableitem></tableentry></table>


</subsection>
</section>
<node name="printenv-invocation" spaces=" "><nodename>printenv invocation</nodename><nodenext automatic="on">tty invocation</nodenext><nodeprev automatic="on">stty invocation</nodeprev><nodeup automatic="on">Working context</nodeup></node>
<section spaces=" "><sectiontitle><command>printenv</command>: Print all or some environment variables</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">printenv</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">printing all or some environment variables</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">environment variables, printing</indexterm></cindex>

<para><command>printenv</command> prints environment variable values.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">printenv [<var>option</var>] [<var>variable</var>]&dots;
</pre></example>

<para>If no <var>variable</var>s are specified, <command>printenv</command> prints the value of
every environment variable.  Otherwise, it prints the value of each
<var>variable</var> that is set, and nothing for those that are not set.
</para>
<para>The program accepts the following option.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-0</itemformat></item>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-0</indexterm></indexcommand>
<itemx spaces=" "><itemformat command="samp">--null</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;null</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">output <sc>nul</sc>-byte-terminated lines</indexterm></cindex>
<para>Output a zero byte (<acronym><acronymword>ASCII</acronymword></acronym> <sc>nul</sc>) at the end of each line,
rather than a newline. This option enables other programs to parse the
output of <command>printenv</command> even when that output would contain data
with embedded newlines.
</para>
</tableitem></tableentry></table>

<cindex index="cp" spaces=" "><indexterm index="cp">exit status of <command>printenv</command></indexterm></cindex>
<para>Exit status:
</para>
<display endspaces=" ">
<pre xml:space="preserve">0 if all variables specified were found
1 if at least one specified variable was not found
2 if a write error occurred
</pre></display>


</section>
<node name="tty-invocation" spaces=" "><nodename>tty invocation</nodename><nodeprev automatic="on">printenv invocation</nodeprev><nodeup automatic="on">Working context</nodeup></node>
<section spaces=" "><sectiontitle><command>tty</command>: Print file name of terminal on standard input</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">tty</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">print terminal file name</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">terminal file name, printing</indexterm></cindex>

<para><command>tty</command> prints the file name of the terminal connected to its standard
input.  It prints <samp>not a tty</samp> if standard input is not a terminal.
Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">tty [<var>option</var>]&dots;
</pre></example>

<para>The program accepts the following option.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-s</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--silent</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--quiet</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-s</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;silent</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;quiet</indexterm></indexcommand>
<para>Print nothing; only return an exit status.
</para>
</tableitem></tableentry></table>

<cindex index="cp" spaces=" "><indexterm index="cp">exit status of <command>tty</command></indexterm></cindex>
<para>Exit status:
</para>
<display endspaces=" ">
<pre xml:space="preserve">0 if standard input is a terminal
1 if standard input is not a terminal
2 if given incorrect arguments
3 if a write error occurs
</pre></display>


</section>
</chapter>
<node name="User-information" spaces=" "><nodename>User information</nodename><nodenext automatic="on">System context</nodenext><nodeprev automatic="on">Working context</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>User information</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">user information, commands for</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">commands for printing user information</indexterm></cindex>

<para>This section describes commands that print user-related information:
logins, groups, and so forth.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::               ">id invocation</menunode><menudescription><pre xml:space="preserve">Print user identity.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::          ">logname invocation</menunode><menudescription><pre xml:space="preserve">Print current login name.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::           ">whoami invocation</menunode><menudescription><pre xml:space="preserve">Print effective user ID.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::           ">groups invocation</menunode><menudescription><pre xml:space="preserve">Print group names a user is in.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">users invocation</menunode><menudescription><pre xml:space="preserve">Print login names of users currently logged in.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::              ">who invocation</menunode><menudescription><pre xml:space="preserve">Print who is currently logged in.
</pre></menudescription></menuentry></menu>


<node name="id-invocation" spaces=" "><nodename>id invocation</nodename><nodenext automatic="on">logname invocation</nodenext><nodeup automatic="on">User information</nodeup></node>
<section spaces=" "><sectiontitle><command>id</command>: Print user identity</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">id</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">real user and group IDs, printing</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">effective user and group IDs, printing</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">printing real and effective user and group IDs</indexterm></cindex>

<para><command>id</command> prints information about the given user, or the process
running it if no user is specified.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">id [<var>option</var>]&dots; [<var>username</var>]
</pre></example>

<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">POSIXLY_CORRECT</indexterm></vindex>
<para>By default, it prints the real user ID, real group ID, effective user ID
if different from the real user ID, effective group ID if different from
the real group ID, and supplemental group IDs.
In addition, if SELinux
is enabled and the <env>POSIXLY_CORRECT</env> environment variable is not set,
then print <samp>context=<var>c</var></samp>, where <var>c</var> is the security context.
</para>
<para>Each of these numeric values is preceded by an identifying string and
followed by the corresponding user or group name in parentheses.
</para>
<para>The options cause <command>id</command> to print only part of the above information.
Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">-g</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--group</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-g</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;group</indexterm></indexcommand>
<para>Print only the group ID.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-G</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--groups</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-G</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;groups</indexterm></indexcommand>
<para>Print only the group ID and the supplementary groups.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-n</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--name</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-n</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;name</indexterm></indexcommand>
<para>Print the user or group name instead of the ID number.  Requires
<option>-u</option>, <option>-g</option>, or <option>-G</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-r</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--real</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-r</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;real</indexterm></indexcommand>
<para>Print the real, instead of effective, user or group ID.  Requires
<option>-u</option>, <option>-g</option>, or <option>-G</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-u</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--user</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-u</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;user</indexterm></indexcommand>
<para>Print only the user ID.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-Z</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--context</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-Z</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;context</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">SELinux</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">security context</indexterm></cindex>
<para>Print only the security context of the current user.
If SELinux is disabled then print a warning and
set the exit status to 1.
</para>
</tableitem></tableentry></table>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>
<macro name="primaryAndSupplementaryGroups" line=" primaryAndSupplementaryGroups{cmd,arg}"><formalarg>cmd</formalarg><formalarg>arg</formalarg>Primary and supplementary groups for a process are normally inherited
from its parent and are usually unchanged since login.  This means
that if you change the group database after logging in, @command{\cmd\}
will not reflect your changes within your existing login session.
Running @command{\cmd\} with a \arg\ causes the user and group
database to be consulted afresh, and so will give a different result.
</macro>
<para>Primary and supplementary groups for a process are normally inherited
from its parent and are usually unchanged since login.  This means
that if you change the group database after logging in, <command>id</command>
will not reflect your changes within your existing login session.
Running <command>id</command> with a user argument causes the user and group
database to be consulted afresh, and so will give a different result.
</para>
</section>
<node name="logname-invocation" spaces=" "><nodename>logname invocation</nodename><nodenext automatic="on">whoami invocation</nodenext><nodeprev automatic="on">id invocation</nodeprev><nodeup automatic="on">User information</nodeup></node>
<section spaces=" "><sectiontitle><command>logname</command>: Print current login name</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">logname</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">printing user&textrsquo;s login name</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">login name, printing</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">user name, printing</indexterm></cindex>

<indexcommand command="flindex" index="fl" spaces=" "><indexterm index="fl" incode="1" mergedindex="cp">utmp</indexterm></indexcommand>
<para><command>logname</command> prints the calling user&textrsquo;s name, as found in a
system-maintained file (often <file>/var/run/utmp</file> or
<file>/etc/utmp</file>), and exits with a status of 0.  If there is no entry
for the calling process, <command>logname</command> prints
an error message and exits with a status of 1.
</para>
<para>The only options are <option>--help</option> and <option>--version</option>.  <xref><xrefnodename>Common
options</xrefnodename></xref>.
</para>
<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="whoami-invocation" spaces=" "><nodename>whoami invocation</nodename><nodenext automatic="on">groups invocation</nodenext><nodeprev automatic="on">logname invocation</nodeprev><nodeup automatic="on">User information</nodeup></node>
<section spaces=" "><sectiontitle><command>whoami</command>: Print effective user ID</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">whoami</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">effective user ID, printing</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">printing the effective user ID</indexterm></cindex>

<para><command>whoami</command> prints the user name associated with the current
effective user ID.  It is equivalent to the command <samp>id -un</samp>.
</para>
<para>The only options are <option>--help</option> and <option>--version</option>.  <xref><xrefnodename>Common
options</xrefnodename></xref>.
</para>
<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="groups-invocation" spaces=" "><nodename>groups invocation</nodename><nodenext automatic="on">users invocation</nodenext><nodeprev automatic="on">whoami invocation</nodeprev><nodeup automatic="on">User information</nodeup></node>
<section spaces=" "><sectiontitle><command>groups</command>: Print group names a user is in</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">groups</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">printing groups a user is in</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">supplementary groups, printing</indexterm></cindex>

<para><command>groups</command> prints the names of the primary and any supplementary
groups for each given <var>username</var>, or the current process if no names
are given.  If more than one name is given, the name of each user is
printed before
the list of that user&textrsquo;s groups and the user name is separated from the
group list by a colon.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">groups [<var>username</var>]&dots;
</pre></example>

<para>The group lists are equivalent to the output of the command <samp>id -Gn</samp>.
</para>
<para>Primary and supplementary groups for a process are normally inherited
from its parent and are usually unchanged since login.  This means
that if you change the group database after logging in, <command>groups</command>
will not reflect your changes within your existing login session.
Running <command>groups</command> with a list of users causes the user and group
database to be consulted afresh, and so will give a different result.
</para>
<para>The only options are <option>--help</option> and <option>--version</option>.  <xref><xrefnodename>Common
options</xrefnodename></xref>.
</para>
<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="users-invocation" spaces=" "><nodename>users invocation</nodename><nodenext automatic="on">who invocation</nodenext><nodeprev automatic="on">groups invocation</nodeprev><nodeup automatic="on">User information</nodeup></node>
<section spaces=" "><sectiontitle><command>users</command>: Print login names of users currently logged in</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">users</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">printing current usernames</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">usernames, printing current</indexterm></cindex>

<cindex index="cp" spaces=" "><indexterm index="cp">login sessions, printing users with</indexterm></cindex>
<para><command>users</command> prints on a single line a blank-separated list of user
names of users currently logged in to the current host.  Each user name
corresponds to a login session, so if a user has more than one login
session, that user&textrsquo;s name will appear the same number of times in the
output.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">users [<var>file</var>]
</pre></example>

<indexcommand command="flindex" index="fl" spaces=" "><indexterm index="fl" incode="1" mergedindex="cp">utmp</indexterm></indexcommand>
<indexcommand command="flindex" index="fl" spaces=" "><indexterm index="fl" incode="1" mergedindex="cp">wtmp</indexterm></indexcommand>
<para>With no <var>file</var> argument, <command>users</command> extracts its information from
a system-maintained file (often <file>/var/run/utmp</file> or
<file>/etc/utmp</file>).  If a file argument is given, <command>users</command> uses
that file instead.  A common choice is <file>/var/log/wtmp</file>.
</para>
<para>The only options are <option>--help</option> and <option>--version</option>.  <xref><xrefnodename>Common
options</xrefnodename></xref>.
</para>
<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="who-invocation" spaces=" "><nodename>who invocation</nodename><nodeprev automatic="on">users invocation</nodeprev><nodeup automatic="on">User information</nodeup></node>
<section spaces=" "><sectiontitle><command>who</command>: Print who is currently logged in</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">who</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">printing current user information</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">information, about current users</indexterm></cindex>

<para><command>who</command> prints information about users who are currently logged on.
Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve"><command>who</command> [<var>option</var>] [<var>file</var>] [am i]
</pre></example>

<cindex index="cp" spaces=" "><indexterm index="cp">terminal lines, currently used</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">login time</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">remote hostname</indexterm></cindex>
<para>If given no non-option arguments, <command>who</command> prints the following
information for each user currently logged on: login name, terminal
line, login time, and remote hostname or X display.
</para>
<indexcommand command="flindex" index="fl" spaces=" "><indexterm index="fl" incode="1" mergedindex="cp">utmp</indexterm></indexcommand>
<indexcommand command="flindex" index="fl" spaces=" "><indexterm index="fl" incode="1" mergedindex="cp">wtmp</indexterm></indexcommand>
<para>If given one non-option argument, <command>who</command> uses that instead of
a default system-maintained file (often <file>/var/run/utmp</file> or
<file>/etc/utmp</file>) as the name of the file containing the record of
users logged on.  <file>/var/log/wtmp</file> is commonly given as an argument
to <command>who</command> to look at who has previously logged on.
</para>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">am i</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">who am i</indexterm></indexcommand>
<para>If given two non-option arguments, <command>who</command> prints only the entry
for the user running it (determined from its standard input), preceded
by the hostname.  Traditionally, the two arguments given are <samp>am
i</samp>, as in <samp>who am i</samp>.
</para>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">TZ</indexterm></vindex>
<para>Time stamps are listed according to the time zone rules specified by
the <env>TZ</env> environment variable, or by the system default rules if
<env>TZ</env> is not set.  <xref><xrefnodename>TZ Variable</xrefnodename><xrefprinteddesc spaces=" ">Specifying the Time Zone
with <env>TZ</env></xrefprinteddesc><xrefinfofile spaces=" ">libc</xrefinfofile><xrefprintedname spaces=" ">The GNU C Library Reference Manual</xrefprintedname></xref>.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-a</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--all</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-a</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;all</indexterm></indexcommand>
<para>Same as <samp>-b -d --login -p -r -t -T -u</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-b</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--boot</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-b</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;boot</indexterm></indexcommand>
<para>Print the date and time of last system boot.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-d</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--dead</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-d</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;dead</indexterm></indexcommand>
<para>Print information corresponding to dead processes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-H</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--heading</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-H</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;heading</indexterm></indexcommand>
<para>Print a line of column headings.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-l</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--login</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-l</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;login</indexterm></indexcommand>
<para>List only the entries that correspond to processes via which the
system is waiting for a user to login.  The user name is always <samp>LOGIN</samp>.
</para>
<itemx spaces=" "><itemformat command="samp">--lookup</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;lookup</indexterm></indexcommand>
<para>Attempt to canonicalize hostnames found in utmp through a DNS lookup.  This
is not the default because it can cause significant delays on systems with
automatic dial-up internet access.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-m</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-m</indexterm></indexcommand>
<para>Same as <samp>who am i</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-p</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--process</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-p</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;process</indexterm></indexcommand>
<para>List active processes spawned by init.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-q</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--count</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-q</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;count</indexterm></indexcommand>
<para>Print only the login names and the number of users logged on.
Overrides all other options.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-r</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--runlevel</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-r</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;runlevel</indexterm></indexcommand>
<para>Print the current (and maybe previous) run-level of the init process.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-s</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-s</indexterm></indexcommand>
<para>Ignored; for compatibility with other versions of <command>who</command>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-t</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--time</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-t</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;time</indexterm></indexcommand>
<para>Print last system clock change.
</para>
<itemx spaces=" "><itemformat command="samp">-u</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-u</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">idle time</indexterm></cindex>
<para>After the login time, print the number of hours and minutes that the
user has been idle.  <samp>.</samp> means the user was active in the last minute.
<samp>old</samp> means the user has been idle for more than 24 hours.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-w</itemformat></item>
<itemx spaces=" "><itemformat command="samp">-T</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--mesg</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--message</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--writable</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-w</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-T</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;mesg</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;message</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;writable</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">message status</indexterm></cindex>
<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">write<r>, allowed</r></indexterm></pindex>
<para>After each login name print a character indicating the user&textrsquo;s message status:
</para>
<display endspaces=" ">
<pre xml:space="preserve"><samp>+</samp> allowing <code>write</code> messages
<samp>-</samp> disallowing <code>write</code> messages
<samp>?</samp> cannot find terminal device
</pre></display>

</tableitem></tableentry></table>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
</chapter>
<node name="System-context" spaces=" "><nodename>System context</nodename><nodenext automatic="on">SELinux context</nodenext><nodeprev automatic="on">User information</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>System context</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">system context</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">context, system</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">commands for system context</indexterm></cindex>

<para>This section describes commands that print or change system-wide
information.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::             ">date invocation</menunode><menudescription><pre xml:space="preserve">Print or set system date and time.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">arch invocation</menunode><menudescription><pre xml:space="preserve">Print machine hardware name.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">nproc invocation</menunode><menudescription><pre xml:space="preserve">Print the number of processors.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">uname invocation</menunode><menudescription><pre xml:space="preserve">Print system information.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::         ">hostname invocation</menunode><menudescription><pre xml:space="preserve">Print or set system name.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::           ">hostid invocation</menunode><menudescription><pre xml:space="preserve">Print numeric host identifier.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::           ">uptime invocation</menunode><menudescription><pre xml:space="preserve">Print system uptime and load.
</pre></menudescription></menuentry></menu>

<node name="date-invocation" spaces=" "><nodename>date invocation</nodename><nodenext automatic="on">arch invocation</nodenext><nodeup automatic="on">System context</nodeup></node>
<section spaces=" "><sectiontitle><command>date</command>: Print or set system date and time</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">date</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">time, printing or setting</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">printing the current time</indexterm></cindex>

<para>Synopses:
</para>
<example endspaces=" ">
<pre xml:space="preserve">date [<var>option</var>]&dots; [+<var>format</var>]
date [-u|--utc|--universal] <!-- c this avoids a newline in the output -->
[ MMDDhhmm[[CC]YY][.ss] ]
</pre></example>

<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">LC_TIME</indexterm></vindex>
<para>Invoking <command>date</command> with no <var>format</var> argument is equivalent to invoking
it with a default format that depends on the <env>LC_TIME</env> locale category.
In the default C locale, this format is <samp>'+%a %b %e %H:%M:%S %Z %Y'</samp>,
so the output looks like <samp>Thu Mar <spacecmd type="spc"/>3 13:47:51 PST 2005</samp>.
</para>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">TZ</indexterm></vindex>
<para>Normally, <command>date</command> uses the time zone rules indicated by the
<env>TZ</env> environment variable, or the system default rules if <env>TZ</env>
is not set.  <xref><xrefnodename>TZ Variable</xrefnodename><xrefprinteddesc spaces=" ">Specifying the Time Zone with
<env>TZ</env></xrefprinteddesc><xrefinfofile spaces=" ">libc</xrefinfofile><xrefprintedname spaces=" ">The GNU C Library Reference Manual</xrefprintedname></xref>.
</para>
<findex index="fn" spaces=" "><indexterm index="fn" mergedindex="cp">strftime <r>and <command>date</command></r></indexterm></findex>
<cindex index="cp" spaces=" "><indexterm index="cp">time formats</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">formatting times</indexterm></cindex>
<para>If given an argument that starts with a <samp>+</samp>, <command>date</command> prints the
current date and time (or the date and time specified by the
<option>--date</option> option, see below) in the format defined by that argument,
which is similar to that of the <code>strftime</code> function.  Except for
conversion specifiers, which start with <samp>%</samp>, characters in the
format string are printed unchanged.  The conversion specifiers are
described below.
</para>
<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::     ">Time conversion specifiers</menunode><menudescription><pre xml:space="preserve">%[HIklMNpPrRsSTXzZ]
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::     ">Date conversion specifiers</menunode><menudescription><pre xml:space="preserve">%[aAbBcCdDeFgGhjmuUVwWxyY]
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::  ">Literal conversion specifiers</menunode><menudescription><pre xml:space="preserve">%[%nt]
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::        ">Padding and other flags</menunode><menudescription><pre xml:space="preserve">Pad with zeros, spaces, etc.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::               ">Setting the time</menunode><menudescription><pre xml:space="preserve">Changing the system clock.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::               ">Options for date</menunode><menudescription><pre xml:space="preserve">Instead of the current time.
</pre></menudescription></menuentry><detailmenu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::             ">Date input formats</menunode><menudescription><pre xml:space="preserve">Specifying date strings.
</pre></menudescription></menuentry></detailmenu>
<menuentry leadingtext="* "><menunode separator="::               ">Examples of date</menunode><menudescription><pre xml:space="preserve">Examples.
</pre></menudescription></menuentry></menu>

<node name="Time-conversion-specifiers" spaces=" "><nodename>Time conversion specifiers</nodename><nodenext automatic="on">Date conversion specifiers</nodenext><nodeup automatic="on">date invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>Time conversion specifiers</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">time conversion specifiers</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">conversion specifiers, time</indexterm></cindex>

<para><command>date</command> conversion specifiers related to times.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">%H</itemformat></item>
</tableterm><tableitem><para>hour (<samp>00</samp>&dots;<samp>23</samp>)
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%I</itemformat></item>
</tableterm><tableitem><para>hour (<samp>01</samp>&dots;<samp>12</samp>)
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%k</itemformat></item>
</tableterm><tableitem><para>hour, space padded (<samp> 0</samp>&dots;<samp>23</samp>); equivalent to <samp>%_H</samp>.
This is a <acronym><acronymword>GNU</acronymword></acronym> extension.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%l</itemformat></item>
</tableterm><tableitem><para>hour, space padded (<samp> 1</samp>&dots;<samp>12</samp>); equivalent to <samp>%_I</samp>.
This is a <acronym><acronymword>GNU</acronymword></acronym> extension.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%M</itemformat></item>
</tableterm><tableitem><para>minute (<samp>00</samp>&dots;<samp>59</samp>)
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%N</itemformat></item>
</tableterm><tableitem><para>nanoseconds (<samp>000000000</samp>&dots;<samp>999999999</samp>).
This is a <acronym><acronymword>GNU</acronymword></acronym> extension.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%p</itemformat></item>
</tableterm><tableitem><para>locale&textrsquo;s equivalent of either <samp>AM</samp> or <samp>PM</samp>;
blank in many locales.
Noon is treated as <samp>PM</samp> and midnight as <samp>AM</samp>.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%P</itemformat></item>
</tableterm><tableitem><para>like <samp>%p</samp>, except lower case.
This is a <acronym><acronymword>GNU</acronymword></acronym> extension.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%r</itemformat></item>
</tableterm><tableitem><para>locale&textrsquo;s 12-hour clock time (e.g., <samp>11:11:04 PM</samp>)
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%R</itemformat></item>
</tableterm><tableitem><para>24-hour hour and minute.  Same as <samp>%H:%M</samp>.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%s</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp">epoch, seconds since</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">seconds since the epoch</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">beginning of time</indexterm></cindex>
<para>seconds since the epoch, i.e., since 1970-01-01 00:00:00 UTC.
Leap seconds are not counted unless leap second support is available.
<xref><xrefnodename>%s-examples</xrefnodename></xref>, for examples.
This is a <acronym><acronymword>GNU</acronymword></acronym> extension.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%S</itemformat></item>
</tableterm><tableitem><para>second (<samp>00</samp>&dots;<samp>60</samp>).
This may be <samp>60</samp> if leap seconds are supported.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%T</itemformat></item>
</tableterm><tableitem><para>24-hour hour, minute, and second.  Same as <samp>%H:%M:%S</samp>.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%X</itemformat></item>
</tableterm><tableitem><para>locale&textrsquo;s time representation (e.g., <samp>23:13:48</samp>)
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%z</itemformat></item>
</tableterm><tableitem><para><w><acronym><acronymword>RFC</acronymword></acronym> 2822/<acronym><acronymword>ISO</acronymword></acronym> 8601</w> style numeric time zone
(e.g., <samp>-0600</samp> or <samp>+0530</samp>), or nothing if no
time zone is determinable.  This value reflects the numeric time zone
appropriate for the current time, using the time zone rules specified
by the <env>TZ</env> environment variable.
The time (and optionally, the time zone rules) can be overridden
by the <option>--date</option> option.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%:z</itemformat></item>
</tableterm><tableitem><para><w><acronym><acronymword>RFC</acronymword></acronym> 3339/<acronym><acronymword>ISO</acronymword></acronym> 8601</w> style numeric time zone with
<samp>:</samp> (e.g., <samp>-06:00</samp> or <samp>+05:30</samp>), or nothing if no time
zone is determinable.
This is a <acronym><acronymword>GNU</acronymword></acronym> extension.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%::z</itemformat></item>
</tableterm><tableitem><para>Numeric time zone to the nearest second with <samp>:</samp> (e.g.,
<samp>-06:00:00</samp> or <samp>+05:30:00</samp>), or nothing if no time zone is
determinable.
This is a <acronym><acronymword>GNU</acronymword></acronym> extension.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%:::z</itemformat></item>
</tableterm><tableitem><para>Numeric time zone with <samp>:</samp> using the minimum necessary precision
(e.g., <samp>-06</samp>, <samp>+05:30</samp>, or <samp>-04:56:02</samp>), or nothing if
no time zone is determinable.
This is a <acronym><acronymword>GNU</acronymword></acronym> extension.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%Z</itemformat></item>
</tableterm><tableitem><para>alphabetic time zone abbreviation (e.g., <samp>EDT</samp>), or nothing if no
time zone is determinable.  See <samp>%z</samp> for how it is determined.
</para></tableitem></tableentry></table>


</subsection>
<node name="Date-conversion-specifiers" spaces=" "><nodename>Date conversion specifiers</nodename><nodenext automatic="on">Literal conversion specifiers</nodenext><nodeprev automatic="on">Time conversion specifiers</nodeprev><nodeup automatic="on">date invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>Date conversion specifiers</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">date conversion specifiers</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">conversion specifiers, date</indexterm></cindex>

<para><command>date</command> conversion specifiers related to dates.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">%a</itemformat></item>
</tableterm><tableitem><para>locale&textrsquo;s abbreviated weekday name (e.g., <samp>Sun</samp>)
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%A</itemformat></item>
</tableterm><tableitem><para>locale&textrsquo;s full weekday name, variable length (e.g., <samp>Sunday</samp>)
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%b</itemformat></item>
</tableterm><tableitem><para>locale&textrsquo;s abbreviated month name (e.g., <samp>Jan</samp>)
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%B</itemformat></item>
</tableterm><tableitem><para>locale&textrsquo;s full month name, variable length (e.g., <samp>January</samp>)
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%c</itemformat></item>
</tableterm><tableitem><para>locale&textrsquo;s date and time (e.g., <samp>Thu Mar <spacecmd type="spc"/>3 23:05:25 2005</samp>)
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%C</itemformat></item>
</tableterm><tableitem><para>century.  This is like <samp>%Y</samp>, except the last two digits are omitted.
For example, it is <samp>20</samp> if <samp>%Y</samp> is <samp>2000</samp>,
and is <samp>-0</samp> if <samp>%Y</samp> is <samp>-001</samp>.
It is normally at least two characters, but it may be more.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%d</itemformat></item>
</tableterm><tableitem><para>day of month (e.g., <samp>01</samp>)
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%D</itemformat></item>
</tableterm><tableitem><para>date; same as <samp>%m/%d/%y</samp>
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%e</itemformat></item>
</tableterm><tableitem><para>day of month, space padded; same as <samp>%_d</samp>
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%F</itemformat></item>
</tableterm><tableitem><para>full date in <acronym><acronymword>ISO</acronymword></acronym> 8601 format; same as <samp>%Y-%m-%d</samp>.
This is a good choice for a date format, as it is standard and
is easy to sort in the usual case where years are in the range
0000&dots;9999.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%g</itemformat></item>
</tableterm><tableitem><para>year corresponding to the <acronym><acronymword>ISO</acronymword></acronym> week number, but without the century
(range <samp>00</samp> through <samp>99</samp>).  This has the same format and value
as <samp>%y</samp>, except that if the <acronym><acronymword>ISO</acronymword></acronym> week number (see
<samp>%V</samp>) belongs
to the previous or next year, that year is used instead.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%G</itemformat></item>
</tableterm><tableitem><para>year corresponding to the <acronym><acronymword>ISO</acronymword></acronym> week number.  This has the
same format and value as <samp>%Y</samp>, except that if the <acronym><acronymword>ISO</acronymword></acronym>
week number (see
<samp>%V</samp>) belongs to the previous or next year, that year is used
instead.
It is normally useful only if <samp>%V</samp> is also used;
for example, the format <samp>%G-%m-%d</samp> is probably a mistake,
since it combines the ISO week number year with the conventional month and day.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%h</itemformat></item>
</tableterm><tableitem><para>same as <samp>%b</samp>
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%j</itemformat></item>
</tableterm><tableitem><para>day of year (<samp>001</samp>&dots;<samp>366</samp>)
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%m</itemformat></item>
</tableterm><tableitem><para>month (<samp>01</samp>&dots;<samp>12</samp>)
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%u</itemformat></item>
</tableterm><tableitem><para>day of week (<samp>1</samp>&dots;<samp>7</samp>) with <samp>1</samp> corresponding to Monday
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%U</itemformat></item>
</tableterm><tableitem><para>week number of year, with Sunday as the first day of the week
(<samp>00</samp>&dots;<samp>53</samp>).
Days in a new year preceding the first Sunday are in week zero.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%V</itemformat></item>
</tableterm><tableitem><para><acronym><acronymword>ISO</acronymword></acronym> week number, that is, the
week number of year, with Monday as the first day of the week
(<samp>01</samp>&dots;<samp>53</samp>).
If the week containing January 1 has four or more days in
the new year, then it is considered week 1; otherwise, it is week 53 of
the previous year, and the next week is week 1.  (See the <acronym><acronymword>ISO</acronymword></acronym> 8601
standard.)
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%w</itemformat></item>
</tableterm><tableitem><para>day of week (<samp>0</samp>&dots;<samp>6</samp>) with 0 corresponding to Sunday
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%W</itemformat></item>
</tableterm><tableitem><para>week number of year, with Monday as first day of week
(<samp>00</samp>&dots;<samp>53</samp>).
Days in a new year preceding the first Monday are in week zero.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%x</itemformat></item>
</tableterm><tableitem><para>locale&textrsquo;s date representation (e.g., <samp>12/31/99</samp>)
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%y</itemformat></item>
</tableterm><tableitem><para>last two digits of year (<samp>00</samp>&dots;<samp>99</samp>)
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%Y</itemformat></item>
</tableterm><tableitem><para>year.  This is normally at least four characters, but it may be more.
Year <samp>0000</samp> precedes year <samp>0001</samp>, and year <samp>-001</samp>
precedes year <samp>0000</samp>.
</para></tableitem></tableentry></table>


</subsection>
<node name="Literal-conversion-specifiers" spaces=" "><nodename>Literal conversion specifiers</nodename><nodenext automatic="on">Padding and other flags</nodenext><nodeprev automatic="on">Date conversion specifiers</nodeprev><nodeup automatic="on">date invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>Literal conversion specifiers</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">literal conversion specifiers</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">conversion specifiers, literal</indexterm></cindex>

<para><command>date</command> conversion specifiers that produce literal strings.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">%%</itemformat></item>
</tableterm><tableitem><para>a literal %
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%n</itemformat></item>
</tableterm><tableitem><para>a newline
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">%t</itemformat></item>
</tableterm><tableitem><para>a horizontal tab
</para></tableitem></tableentry></table>


</subsection>
<node name="Padding-and-other-flags" spaces=" "><nodename>Padding and other flags</nodename><nodenext automatic="on">Setting the time</nodenext><nodeprev automatic="on">Literal conversion specifiers</nodeprev><nodeup automatic="on">date invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>Padding and other flags</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">numeric field padding</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">padding of numeric fields</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">fields, padding numeric</indexterm></cindex>

<para>Unless otherwise specified, <command>date</command> normally pads numeric fields
with zeros, so that, for
example, numeric months are always output as two digits.
Seconds since the epoch are not padded, though,
since there is no natural width for them.
</para>
<para>As a <acronym><acronymword>GNU</acronymword></acronym> extension, <command>date</command> recognizes any of the
following optional flags after the <samp>%</samp>:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">-</itemformat></item>
</tableterm><tableitem><para>(hyphen) Do not pad the field; useful if the output is intended for
human consumption.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">_</itemformat></item>
</tableterm><tableitem><para>(underscore) Pad with spaces; useful if you need a fixed
number of characters in the output, but zeros are too distracting.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">0</itemformat></item>
</tableterm><tableitem><para>(zero) Pad with zeros even if the conversion specifier
would normally pad with spaces.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">^</itemformat></item>
</tableterm><tableitem><para>Use upper case characters if possible.
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">#</itemformat></item>
</tableterm><tableitem><para>Use opposite case characters if possible.
A field that is normally upper case becomes lower case, and vice versa.
</para></tableitem></tableentry></table>

<noindent></noindent>
<para>Here are some examples of padding:
</para>
<example endspaces=" ">
<pre xml:space="preserve">date +%d/%m -d &quot;Feb 1&quot;
&result; 01/02
date +%-d/%-m -d &quot;Feb 1&quot;
&result; 1/2
date +%_d/%_m -d &quot;Feb 1&quot;
&result;  1/ 2
</pre></example>

<para>As a <acronym><acronymword>GNU</acronymword></acronym> extension, you can specify the field width
(after any flag, if present) as a decimal number.  If the natural size of the
output of the field has less than the specified number of characters,
the result is written right adjusted and padded to the given
size.  For example, <samp>%9B</samp> prints the right adjusted month name in
a field of width 9.
</para>
<para>An optional modifier can follow the optional flag and width
specification.  The modifiers are:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">E</itemformat></item>
</tableterm><tableitem><para>Use the locale&textrsquo;s alternate representation for date and time.  This
modifier applies to the <samp>%c</samp>, <samp>%C</samp>, <samp>%x</samp>, <samp>%X</samp>,
<samp>%y</samp> and <samp>%Y</samp> conversion specifiers.  In a Japanese locale, for
example, <samp>%Ex</samp> might yield a date format based on the Japanese
Emperors&textrsquo; reigns.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">O</itemformat></item>
</tableterm><tableitem><para>Use the locale&textrsquo;s alternate numeric symbols for numbers.  This modifier
applies only to numeric conversion specifiers.
</para></tableitem></tableentry></table>

<para>If the format supports the modifier but no alternate representation
is available, it is ignored.
</para>

</subsection>
<node name="Setting-the-time" spaces=" "><nodename>Setting the time</nodename><nodenext automatic="on">Options for date</nodenext><nodeprev automatic="on">Padding and other flags</nodeprev><nodeup automatic="on">date invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>Setting the time</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">setting the time</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">time setting</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">appropriate privileges</indexterm></cindex>

<para>If given an argument that does not start with <samp>+</samp>, <command>date</command> sets
the system clock to the date and time specified by that argument (as
described below).  You must have appropriate privileges to set the
system clock.  Note for changes to persist across a reboot, the
hardware clock may need to be updated from the system clock, which
might not happen automatically on your system.
</para>
<para>The argument must consist entirely of digits, which have the following
meaning:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">MM</itemformat></item>
</tableterm><tableitem><para>month
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">DD</itemformat></item>
</tableterm><tableitem><para>day within month
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">hh</itemformat></item>
</tableterm><tableitem><para>hour
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">mm</itemformat></item>
</tableterm><tableitem><para>minute
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">CC</itemformat></item>
</tableterm><tableitem><para>first two digits of year (optional)
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">YY</itemformat></item>
</tableterm><tableitem><para>last two digits of year (optional)
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ss</itemformat></item>
</tableterm><tableitem><para>second (optional)
</para></tableitem></tableentry></table>

<para>Note, the <option>--date</option> and <option>--set</option> options may not be used with an
argument in the above format.  The <option>--universal</option> option may be used
with such an argument to indicate that the specified date and time are
relative to Coordinated Universal Time rather than to the local time zone.
</para>

</subsection>
<node name="Options-for-date" spaces=" "><nodename>Options for date</nodename><nodenext automatic="on">Examples of date</nodenext><nodeprev automatic="on">Setting the time</nodeprev><nodeup automatic="on">date invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>Options for <command>date</command></sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp"><command>date</command> options</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">options for <command>date</command></indexterm></cindex>

<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-d <var>datestr</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--date=<var>datestr</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-d</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;date</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">parsing date strings</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">date strings, parsing</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">arbitrary date strings, parsing</indexterm></cindex>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">yesterday</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">tomorrow</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">next <var>day</var></indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">last <var>day</var></indexterm></indexcommand>
<para>Display the date and time specified in <var>datestr</var> instead of the
current date and time.  <var>datestr</var> can be in almost any common
format.  It can contain month names, time zones, <samp>am</samp> and <samp>pm</samp>,
<samp>yesterday</samp>, etc.  For example, <option>--date=&quot;2004-02-27
14:19:13.489392193 +0530&quot;</option> specifies the instant of time that is
489,392,193 nanoseconds after February 27, 2004 at 2:19:13 PM in a
time zone that is 5 hours and 30 minutes east of <acronym><acronymword>UTC</acronymword></acronym>.&linebreak;
Note: input currently must be in locale independent format. E.g., the
LC_TIME=C below is needed to print back the correct date in many locales:
</para><example endspaces=" ">
<pre xml:space="preserve">date -d &quot;$(LC_TIME=C date)&quot;
</pre></example>
<para><xref><xrefnodename>Date input formats</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-f <var>datefile</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--file=<var>datefile</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-f</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;file</indexterm></indexcommand>
<para>Parse each line in <var>datefile</var> as with <option>-d</option> and display the
resulting date and time.  If <var>datefile</var> is <samp>-</samp>, use standard
input.  This is useful when you have many dates to process, because the
system overhead of starting up the <command>date</command> executable many times can
be considerable.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-I[<var>timespec</var>]</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--iso-8601[=<var>timespec</var>]</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-I[<var>timespec</var>]</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;iso-8601[=<var>timespec</var>]</indexterm></indexcommand>
<para>Display the date using the <acronym><acronymword>ISO</acronymword></acronym> 8601 format, <samp>%Y-%m-%d</samp>.
</para>
<para>The argument <var>timespec</var> specifies the number of additional
terms of the time to include.  It can be one of the following:
</para><table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">auto</itemformat></item>
</tableterm><tableitem><para>Print just the date.  This is the default if <var>timespec</var> is omitted.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">hours</itemformat></item>
</tableterm><tableitem><para>Append the hour of the day to the date.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">minutes</itemformat></item>
</tableterm><tableitem><para>Append the hours and minutes.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">seconds</itemformat></item>
</tableterm><tableitem><para>Append the hours, minutes and seconds.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ns</itemformat></item>
</tableterm><tableitem><para>Append the hours, minutes, seconds and nanoseconds.
</para></tableitem></tableentry></table>

<para>If showing any time terms, then include the time zone using the format
<samp>%z</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-r <var>file</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--reference=<var>file</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-r</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;reference</indexterm></indexcommand>
<para>Display the date and time of the last modification of <var>file</var>,
instead of the current date and time.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-R</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--rfc-822</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--rfc-2822</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-R</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;rfc-822</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;rfc-2822</indexterm></indexcommand>
<para>Display the date and time using the format <samp>%a, %d %b %Y %H:%M:%S
%z</samp>, evaluated in the C locale so abbreviations are always in English.
For example:
</para>
<example endspaces=" ">
<pre xml:space="preserve">Fri, 09 Sep 2005 13:51:39 -0700
</pre></example>

<para>This format conforms to
<uref><urefurl>ftp://ftp.rfc-editor.org/in-notes/rfc2822.txt</urefurl><urefdesc spaces=" ">Internet
<acronym><acronymword>RFCs</acronymword></acronym> 2822</urefdesc></uref> and
<uref><urefurl>ftp://ftp.rfc-editor.org/in-notes/rfc822.txt</urefurl><urefdesc spaces=" ">822</urefdesc></uref>, the
current and previous standards for Internet email.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--rfc-3339=<var>timespec</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;rfc-3339=<var>timespec</var></indexterm></indexcommand>
<para>Display the date using a format specified by
<uref><urefurl>ftp://ftp.rfc-editor.org/in-notes/rfc3339.txt</urefurl><urefdesc spaces=" ">Internet
<acronym><acronymword>RFC</acronymword></acronym> 3339</urefdesc></uref>.  This is a subset of the <acronym><acronymword>ISO</acronymword></acronym> 8601
format, except that it also permits applications to use a space rather
than a <samp>T</samp> to separate dates from times.  Unlike the other
standard formats, <acronym><acronymword>RFC</acronymword></acronym> 3339 format is always suitable as
input for the <option>--date</option> (<option>-d</option>) and <option>--file</option>
(<option>-f</option>) options, regardless of the current locale.
</para>
<para>The argument <var>timespec</var> specifies how much of the time to include.
It can be one of the following:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">date</itemformat></item>
</tableterm><tableitem><para>Print just the full-date, e.g., <samp>2005-09-14</samp>.
This is equivalent to the format <samp>%Y-%m-%d</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">seconds</itemformat></item>
</tableterm><tableitem><para>Print the full-date and full-time separated by a space, e.g.,
<samp>2005-09-14 00:56:06+05:30</samp>.  The output ends with a numeric
time-offset; here the <samp>+05:30</samp> means that local time is five
hours and thirty minutes east of <acronym><acronymword>UTC</acronymword></acronym>.  This is equivalent to
the format <samp>%Y-%m-%d %H:%M:%S%:z</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">ns</itemformat></item>
</tableterm><tableitem><para>Like <samp>seconds</samp>, but also print nanoseconds, e.g.,
<samp>2005-09-14 00:56:06.998458565+05:30</samp>.
This is equivalent to the format <samp>%Y-%m-%d %H:%M:%S.%N%:z</samp>.
</para>
</tableitem></tableentry></table>

</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-s <var>datestr</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--set=<var>datestr</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-s</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;set</indexterm></indexcommand>
<para>Set the date and time to <var>datestr</var>.  See <option>-d</option> above.
See also <ref><xrefnodename>Setting the time</xrefnodename></ref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-u</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--utc</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--universal</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-u</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;utc</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;universal</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">Coordinated Universal Time</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">UTC</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">Greenwich Mean Time</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">GMT</indexterm></cindex>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">TZ</indexterm></vindex>
<para>Use Coordinated Universal Time (<acronym><acronymword>UTC</acronymword></acronym>) by operating as if the
<env>TZ</env> environment variable were set to the string <samp>UTC0</samp>.
Coordinated
Universal Time is often called &textldquo;Greenwich Mean Time&textrdquo; (<sc>gmt</sc>) for
historical reasons.
</para></tableitem></tableentry></table>


</subsection>
<node name="Examples-of-date" spaces=" "><nodename>Examples of date</nodename><nodeprev automatic="on">Options for date</nodeprev><nodeup automatic="on">date invocation</nodeup></node>
<subsection spaces=" "><sectiontitle>Examples of <command>date</command></sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">examples of <command>date</command></indexterm></cindex>

<para>Here are a few examples.  Also see the documentation for the <option>-d</option>
option in the previous section.
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet" /></itemprepend>
<beforefirstitem>
</beforefirstitem><listitem><prepend>&bullet;</prepend>
<para>To print the date of the day before yesterday:
</para>
<example endspaces=" ">
<pre xml:space="preserve">date --date='2 days ago'
</pre></example>

</listitem><listitem><prepend>&bullet;</prepend>
<para>To print the date of the day three months and one day hence:
</para>
<example endspaces=" ">
<pre xml:space="preserve">date --date='3 months 1 day'
</pre></example>

</listitem><listitem><prepend>&bullet;</prepend>
<para>To print the day of year of Christmas in the current year:
</para>
<example endspaces=" ">
<pre xml:space="preserve">date --date='25 Dec' +%j
</pre></example>

</listitem><listitem><prepend>&bullet;</prepend>
<para>To print the current full month name and the day of the month:
</para>
<example endspaces=" ">
<pre xml:space="preserve">date '+%B %d'
</pre></example>

<para>But this may not be what you want because for the first nine days of
the month, the <samp>%d</samp> expands to a zero-padded two-digit field,
for example <samp>date -d 1may '+%B %d'</samp> will print <samp>May 01</samp>.
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>To print a date without the leading zero for one-digit days
of the month, you can use the (<acronym><acronymword>GNU</acronymword></acronym> extension)
<samp>-</samp> flag to suppress
the padding altogether:
</para>
<example endspaces=" ">
<pre xml:space="preserve">date -d 1may '+%B %-d
</pre></example>

</listitem><listitem><prepend>&bullet;</prepend>
<para>To print the current date and time in the format required by many
non-<acronym><acronymword>GNU</acronymword></acronym> versions of <command>date</command> when setting the system clock:
</para>
<example endspaces=" ">
<pre xml:space="preserve">date +%m%d%H%M%Y.%S
</pre></example>

</listitem><listitem><prepend>&bullet;</prepend>
<para>To set the system clock forward by two minutes:
</para>
<example endspaces=" ">
<pre xml:space="preserve">date --set='+2 minutes'
</pre></example>

</listitem><listitem><prepend>&bullet;</prepend>
<para>To print the date in <acronym><acronymword>RFC</acronymword></acronym> 2822 format,
use <samp>date --rfc-2822</samp>.  Here is some example output:
</para>
<example endspaces=" ">
<pre xml:space="preserve">Fri, 09 Sep 2005 13:51:39 -0700
</pre></example>

<anchor name="_0025s_002dexamples">%s-examples</anchor>
</listitem><listitem><prepend>&bullet;</prepend>
<para>To convert a date string to the number of seconds since the epoch
(which is 1970-01-01 00:00:00 UTC), use the <option>--date</option> option with
the <samp>%s</samp> format.  That can be useful in sorting and/or graphing
and/or comparing data by date.  The following command outputs the
number of the seconds since the epoch for the time two minutes after the
epoch:
</para>
<example endspaces=" ">
<pre xml:space="preserve">date --date='1970-01-01 00:02:00 +0000' +%s
120
</pre></example>

<para>If you do not specify time zone information in the date string,
<command>date</command> uses your computer&textrsquo;s idea of the time zone when
interpreting the string.  For example, if your computer&textrsquo;s time zone is
that of Cambridge, Massachusetts, which was then 5 hours (i.e., 18,000
seconds) behind UTC:
</para>
<example endspaces=" ">
<pre xml:space="preserve"># local time zone used
date --date='1970-01-01 00:02:00' +%s
18120
</pre></example>

</listitem><listitem><prepend>&bullet;</prepend>
<para>If you&textrsquo;re sorting or graphing dated data, your raw date values may be
represented as seconds since the epoch.  But few people can look at
the date <samp>946684800</samp> and casually note &textldquo;Oh, that&textrsquo;s the first second
of the year 2000 in Greenwich, England.&textrdquo;
</para>
<example endspaces=" ">
<pre xml:space="preserve">date --date='2000-01-01 UTC' +%s
946684800
</pre></example>

<para>An alternative is to use the <option>--utc</option> (<option>-u</option>) option.
Then you may omit <samp>UTC</samp> from the date string.  Although this
produces the same result for <samp>%s</samp> and many other format sequences,
with a time zone offset different from zero, it would give a different
result for zone-dependent formats like <samp>%z</samp>.
</para>
<example endspaces=" ">
<pre xml:space="preserve">date -u --date=2000-01-01 +%s
946684800
</pre></example>

<para>To convert such an unwieldy number of seconds back to
a more readable form, use a command like this:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve"># local time zone used
date -d '1970-01-01 UTC 946684800 seconds' +&quot;%Y-%m-%d %T %z&quot;
1999-12-31 19:00:00 -0500
</pre></smallexample>

<para>Or if you do not mind depending on the <samp>&arobase;</samp> feature present since
coreutils 5.3.0, you could shorten this to:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">date -d &arobase;946684800 +&quot;%F %T %z&quot;
1999-12-31 19:00:00 -0500
</pre></smallexample>

<para>Often it is better to output UTC-relative date and time:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">date -u -d '1970-01-01 946684800 seconds' +&quot;%Y-%m-%d %T %z&quot;
2000-01-01 00:00:00 +0000
</pre></smallexample>

</listitem></itemize>


</subsection>
</section>
<node name="arch-invocation" spaces=" "><nodename>arch invocation</nodename><nodenext automatic="on">nproc invocation</nodenext><nodeprev automatic="on">date invocation</nodeprev><nodeup automatic="on">System context</nodeup></node>
<section spaces=" "><sectiontitle><command>arch</command>: Print machine hardware name</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">arch</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">print machine hardware name</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">system information, printing</indexterm></cindex>

<para><command>arch</command> prints the machine hardware name,
and is equivalent to <samp>uname -m</samp>.
Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">arch [<var>option</var>]
</pre></example>

<para>The program accepts the <ref><xrefnodename>Common options</xrefnodename></ref> only.
</para>
<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="nproc-invocation" spaces=" "><nodename>nproc invocation</nodename><nodenext automatic="on">uname invocation</nodenext><nodeprev automatic="on">arch invocation</nodeprev><nodeup automatic="on">System context</nodeup></node>
<section spaces=" "><sectiontitle><command>nproc</command>: Print the number of available processors</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">nproc</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">Print the number of processors</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">system information, printing</indexterm></cindex>

<para>Print the number of processing units available to the current process,
which may be less than the number of online processors.
If this information is not accessible, then print the number of
processors installed.  If the <env>OMP_NUM_THREADS</env> environment variable is
set, then it will determine the returned value.  The result is guaranteed to be
greater than zero.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">nproc [<var>option</var>]
</pre></example>

<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">--all</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;all</indexterm></indexcommand>
<para>Print the number of installed processors on the system, which may
be greater than the number online or available to the current process.
The <env>OMP_NUM_THREADS</env> environment variable is not honored in this case.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--ignore=<var>number</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;ignore</indexterm></indexcommand>
<para>If possible, exclude this <var>number</var> of processing units.
</para>
</tableitem></tableentry></table>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="uname-invocation" spaces=" "><nodename>uname invocation</nodename><nodenext automatic="on">hostname invocation</nodenext><nodeprev automatic="on">nproc invocation</nodeprev><nodeup automatic="on">System context</nodeup></node>
<section spaces=" "><sectiontitle><command>uname</command>: Print system information</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">uname</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">print system information</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">system information, printing</indexterm></cindex>

<para><command>uname</command> prints information about the machine and operating system
it is run on.  If no options are given, <command>uname</command> acts as if the
<option>-s</option> option were given.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">uname [<var>option</var>]&dots;
</pre></example>

<para>If multiple options or <option>-a</option> are given, the selected information is
printed in this order:
</para>
<example endspaces=" ">
<pre xml:space="preserve"><var>kernel-name</var> <var>nodename</var> <var>kernel-release</var> <var>kernel-version</var>
<var>machine</var> <var>processor</var> <var>hardware-platform</var> <var>operating-system</var>
</pre></example>

<para>The information may contain internal spaces, so such output cannot be
parsed reliably.  In the following example, <var>release</var> is
<samp>2.2.18ss.e820-bda652a #4 SMP Tue Jun 5 11:24:08 PDT 2001</samp>:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">uname -a
&result; Linux dum 2.2.18 #4 SMP Tue Jun 5 11:24:08 PDT 2001 i686<!-- c -->
 unknown unknown GNU/Linux
</pre></smallexample>


<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-a</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--all</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-a</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;all</indexterm></indexcommand>
<para>Print all of the below information, except omit the processor type
and the hardware platform name if they are unknown.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-i</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--hardware-platform</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-i</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;hardware-platform</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">implementation, hardware</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">hardware platform</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">platform, hardware</indexterm></cindex>
<para>Print the hardware platform name
(sometimes called the hardware implementation).
Print <samp>unknown</samp> if the kernel does not make this information
easily available, as is the case with Linux kernels.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-m</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--machine</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-m</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;machine</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">machine type</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">hardware class</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">hardware type</indexterm></cindex>
<para>Print the machine hardware name (sometimes called the hardware class
or hardware type).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-n</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--nodename</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-n</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;nodename</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">hostname</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">node name</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">network node name</indexterm></cindex>
<para>Print the network node hostname.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-p</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--processor</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-p</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;processor</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">host processor type</indexterm></cindex>
<para>Print the processor type (sometimes called the instruction set
architecture or ISA).
Print <samp>unknown</samp> if the kernel does not make this information
easily available, as is the case with Linux kernels.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-o</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--operating-system</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-o</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;operating-system</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">operating system name</indexterm></cindex>
<para>Print the name of the operating system.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-r</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--kernel-release</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-r</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;kernel-release</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">kernel release</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">release of kernel</indexterm></cindex>
<para>Print the kernel release.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-s</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--kernel-name</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-s</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;kernel-name</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">kernel name</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">name of kernel</indexterm></cindex>
<para>Print the kernel name.
<acronym><acronymword>POSIX</acronymword></acronym> 1003.1-2001 (<pxref><xrefnodename>Standards conformance</xrefnodename></pxref>) calls this
&textldquo;the implementation of the operating system&textrdquo;, because the
<acronym><acronymword>POSIX</acronymword></acronym> specification itself has no notion of &textldquo;kernel&textrdquo;.
The kernel name might be the same as the operating system name printed
by the <option>-o</option> or <option>--operating-system</option> option, but it might
differ.  Some operating systems (e.g., FreeBSD, HP-UX) have the same
name as their underlying kernels; others (e.g., GNU/Linux, Solaris)
do not.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-v</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--kernel-version</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-v</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;kernel-version</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">kernel version</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">version of kernel</indexterm></cindex>
<para>Print the kernel version.
</para>
</tableitem></tableentry></table>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="hostname-invocation" spaces=" "><nodename>hostname invocation</nodename><nodenext automatic="on">hostid invocation</nodenext><nodeprev automatic="on">uname invocation</nodeprev><nodeup automatic="on">System context</nodeup></node>
<section spaces=" "><sectiontitle><command>hostname</command>: Print or set system name</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">hostname</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">setting the hostname</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">printing the hostname</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">system name, printing</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">appropriate privileges</indexterm></cindex>

<para>With no arguments, <command>hostname</command> prints the name of the current host
system.  With one argument, it sets the current host name to the
specified string.  You must have appropriate privileges to set the host
name.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">hostname [<var>name</var>]
</pre></example>

<para>The only options are <option>--help</option> and <option>--version</option>.  <xref><xrefnodename>Common
options</xrefnodename></xref>.
</para>
<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="hostid-invocation" spaces=" "><nodename>hostid invocation</nodename><nodenext automatic="on">uptime invocation</nodenext><nodeprev automatic="on">hostname invocation</nodeprev><nodeup automatic="on">System context</nodeup></node>
<section spaces=" "><sectiontitle><command>hostid</command>: Print numeric host identifier</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">hostid</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">printing the host identifier</indexterm></cindex>

<para><command>hostid</command> prints the numeric identifier of the current host
in hexadecimal.  This command accepts no arguments.
The only options are <option>--help</option> and <option>--version</option>.
<xref><xrefnodename>Common options</xrefnodename></xref>.
</para>
<para>For example, here&textrsquo;s what it prints on one system I use:
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ hostid
1bac013d
</pre></example>

<para>On that system, the 32-bit quantity happens to be closely
related to the system&textrsquo;s Internet address, but that isn&textrsquo;t always
the case.
</para>
<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>
</section>
<node name="uptime-invocation" spaces=" "><nodename>uptime invocation</nodename><nodeprev automatic="on">hostid invocation</nodeprev><nodeup automatic="on">System context</nodeup></node>
<section spaces=" "><sectiontitle><command>uptime</command>: Print system uptime and load</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">uptime</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">printing the system uptime and load</indexterm></cindex>

<para><command>uptime</command> prints the current time, the system&textrsquo;s uptime, the
number of logged-in users and the current load average.
</para>
<para>If an argument is specified, it is used as the file to be read
to discover how many users are logged in.  If no argument is
specified, a system default is used (<command>uptime --help</command> indicates
the default setting).
</para>
<para>The only options are <option>--help</option> and <option>--version</option>.
<xref><xrefnodename>Common options</xrefnodename></xref>.
</para>
<para>For example, here&textrsquo;s what it prints right now on one system I use:
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ uptime
 14:07  up   3:35,  3 users,  load average: 1.39, 1.15, 1.04
</pre></example>

<para>The precise method of calculation of load average varies somewhat
between systems.  Some systems calculate it as the average number of
runnable processes over the last 1, 5 and 15 minutes, but some systems
also include processes in the uninterruptible sleep state (that is,
those processes which are waiting for disk I/O).  The Linux kernel
includes uninterruptible processes.
</para>
</section>
</chapter>
<node name="SELinux-context" spaces=" "><nodename>SELinux context</nodename><nodenext automatic="on">Modified command invocation</nodenext><nodeprev automatic="on">System context</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>SELinux context</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">SELinux context</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">SELinux, context</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">commands for SELinux context</indexterm></cindex>

<para>This section describes commands for operations with SELinux
contexts.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::            ">chcon invocation</menunode><menudescription><pre xml:space="preserve">Change SELinux context of file
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::           ">runcon invocation</menunode><menudescription><pre xml:space="preserve">Run a command in specified SELinux context
</pre></menudescription></menuentry></menu>

<node name="chcon-invocation" spaces=" "><nodename>chcon invocation</nodename><nodenext automatic="on">runcon invocation</nodenext><nodeup automatic="on">SELinux context</nodeup></node>
<section spaces=" "><sectiontitle><command>chcon</command>: Change SELinux context of file</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">chcon</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">changing security context</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">change SELinux context</indexterm></cindex>

<para><command>chcon</command> changes the SELinux security context of the selected files.
Synopses:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">chcon [<var>option</var>]&dots; <var>context</var> <var>file</var>&dots;
chcon [<var>option</var>]&dots; [-u <var>user</var>] [-r <var>role</var>] [-l <var>range</var>]<!-- c -->
 [-t <var>type</var>] <var>file</var>&dots;
chcon [<var>option</var>]&dots; --reference=<var>rfile</var> <var>file</var>&dots;
</pre></smallexample>

<para>Change the SELinux security context of each <var>file</var> to <var>context</var>.
With <option>--reference</option>, change the security context of each <var>file</var>
to that of <var>rfile</var>.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-h</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--no-dereference</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-h</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;no-dereference</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">no dereference</indexterm></cindex>
<para>Affect symbolic links instead of any referenced file.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--reference=<var>rfile</var></itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;reference</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">reference file</indexterm></cindex>
<para>Use <var>rfile</var>&textrsquo;s security context rather than specifying a <var>context</var> value.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-R</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--recursive</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-R</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;recursive</indexterm></indexcommand>
<para>Operate on files and directories recursively.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-H</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-H</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">symbolic link to directory, traverse if on the command line</indexterm></cindex>
<para>If <option>--recursive</option> (<option>-R</option>) is specified and
a command line argument is a symbolic link to a directory, traverse it.
<xref><xrefnodename>Traversing symlinks</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-L</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-L</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">symbolic link to directory, traverse each that is encountered</indexterm></cindex>
<para>In a recursive traversal, traverse every symbolic link to a directory
that is encountered.
<xref><xrefnodename>Traversing symlinks</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-P</itemformat></item>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-P</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">symbolic link to directory, never traverse</indexterm></cindex>
<para>Do not traverse any symbolic links.
This is the default if none of <option>-H</option>, <option>-L</option>,
or <option>-P</option> is specified.
<xref><xrefnodename>Traversing symlinks</xrefnodename></xref>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-v</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--verbose</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-v</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;verbose</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">diagnostic</indexterm></cindex>
<para>Output a diagnostic for every file processed.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-u <var>user</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--user=<var>user</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-u</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;user</indexterm></indexcommand>
<para>Set user <var>user</var> in the target security context.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-r <var>role</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--role=<var>role</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-r</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;role</indexterm></indexcommand>
<para>Set role <var>role</var> in the target security context.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-t <var>type</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--type=<var>type</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-t</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;type</indexterm></indexcommand>
<para>Set type <var>type</var> in the target security context.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-l <var>range</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--range=<var>range</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-l</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;range</indexterm></indexcommand>
<para>Set range <var>range</var> in the target security context.
</para>
</tableitem></tableentry></table>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>
</section>
<node name="runcon-invocation" spaces=" "><nodename>runcon invocation</nodename><nodeprev automatic="on">chcon invocation</nodeprev><nodeup automatic="on">SELinux context</nodeup></node>
<section spaces=" "><sectiontitle><command>runcon</command>: Run a command in specified SELinux context</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">runcon</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">run with security context</indexterm></cindex>


<para><command>runcon</command> runs file in specified SELinux security context.
</para>
<para>Synopses:
</para><smallexample endspaces=" ">
<pre xml:space="preserve">runcon <var>context</var> <var>command</var> [<var>args</var>]
runcon [ -c ] [-u <var>user</var>] [-r <var>role</var>] [-t <var>type</var>]<!-- c -->
 [-l <var>range</var>] <var>command</var> [<var>args</var>]
</pre></smallexample>

<para>Run <var>command</var> with completely-specified <var>context</var>, or with
current or transitioned security context modified by one or more of <var>level</var>,
<var>role</var>, <var>type</var> and <var>user</var>.
</para>
<para>If none of <option>-c</option>, <option>-t</option>, <option>-u</option>, <option>-r</option>, or <option>-l</option>
is specified, the first argument is used as the complete context.
Any additional arguments after <var>command</var>
are interpreted as arguments to the command.
</para>
<para>With neither <var>context</var> nor <var>command</var>, print the current
security context.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-c</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--compute</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-c</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;compute</indexterm></indexcommand>
<para>Compute process transition context before modifying.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-u <var>user</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--user=<var>user</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-u</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;user</indexterm></indexcommand>
<para>Set user <var>user</var> in the target security context.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-r <var>role</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--role=<var>role</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-r</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;role</indexterm></indexcommand>
<para>Set role <var>role</var> in the target security context.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-t <var>type</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--type=<var>type</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-t</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;type</indexterm></indexcommand>
<para>Set type <var>type</var> in the target security context.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-l <var>range</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--range=<var>range</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-l</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;range</indexterm></indexcommand>
<para>Set range <var>range</var> in the target security context.
</para>
</tableitem></tableentry></table>

<cindex index="cp" spaces=" "><indexterm index="cp">exit status of <command>runcon</command></indexterm></cindex>
<para>Exit status:
</para>
<display endspaces=" ">
<pre xml:space="preserve">126 if <var>command</var> is found but cannot be invoked
127 if <command>runcon</command> itself fails or if <var>command</var> cannot be found
the exit status of <var>command</var> otherwise
</pre></display>

</section>
</chapter>
<node name="Modified-command-invocation" spaces=" "><nodename>Modified command invocation</nodename><nodenext automatic="on">Process control</nodenext><nodeprev automatic="on">SELinux context</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>Modified command invocation</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">modified command invocation</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">invocation of commands, modified</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">commands for invoking other commands</indexterm></cindex>

<para>This section describes commands that run other commands in some context
different than the current one: a modified environment, as a different
user, etc.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::           ">chroot invocation</menunode><menudescription><pre xml:space="preserve">Modify the root directory.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::              ">env invocation</menunode><menudescription><pre xml:space="preserve">Modify environment variables.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">nice invocation</menunode><menudescription><pre xml:space="preserve">Modify niceness.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">nohup invocation</menunode><menudescription><pre xml:space="preserve">Immunize to hangups.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::           ">stdbuf invocation</menunode><menudescription><pre xml:space="preserve">Modify buffering of standard streams.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::               ">su invocation</menunode><menudescription><pre xml:space="preserve">Modify user and group ID.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::          ">timeout invocation</menunode><menudescription><pre xml:space="preserve">Run with time limit.
</pre></menudescription></menuentry></menu>


<node name="chroot-invocation" spaces=" "><nodename>chroot invocation</nodename><nodenext automatic="on">env invocation</nodenext><nodeup automatic="on">Modified command invocation</nodeup></node>
<section spaces=" "><sectiontitle><command>chroot</command>: Run a command with a different root directory</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">chroot</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">running a program in a specified root directory</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">root directory, running a program in a specified</indexterm></cindex>

<para><command>chroot</command> runs a command with a specified root directory.
On many systems, only the super-user can do this.<footnote><para>However,
some systems (e.g., FreeBSD) can be configured to allow certain regular
users to use the <code>chroot</code> system call, and hence to run this program.
Also, on Cygwin, anyone can run the <command>chroot</command> command, because the
underlying function is non-privileged due to lack of support in MS-Windows.</para></footnote>
Synopses:
</para>
<example endspaces=" ">
<pre xml:space="preserve">chroot <var>option</var> <var>newroot</var> [<var>command</var> [<var>args</var>]&dots;]
chroot <var>option</var>
</pre></example>

<para>Ordinarily, file names are looked up starting at the root of the
directory structure, i.e., <file>/</file>.  <command>chroot</command> changes the root to
the directory <var>newroot</var> (which must exist) and then runs
<var>command</var> with optional <var>args</var>.  If <var>command</var> is not
specified, the default is the value of the <env>SHELL</env> environment
variable or <command>/bin/sh</command> if not set, invoked with the <option>-i</option> option.
<var>command</var> must not be a special built-in utility
(<pxref><xrefnodename>Special built-in utilities</xrefnodename></pxref>).
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
Options must precede operands.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><itemx spaces=" "><itemformat command="samp">--userspec=<var>user</var>[:<var>group</var>]</itemformat></itemx>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;userspec</indexterm></indexcommand>
<para>By default, <var>command</var> is run with the same credentials
as the invoking process.
Use this option to run it as a different <var>user</var> and/or with a
different primary <var>group</var>.
</para>
<itemx spaces=" "><itemformat command="samp">--groups=<var>groups</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;groups</indexterm></indexcommand>
<para>Use this option to specify the supplementary <var>groups</var> to be
used by the new process.
The items in the list (names or numeric IDs) must be separated by commas.
</para>
</tableitem></tableentry></table>

<para>Here are a few tips to help avoid common problems in using chroot.
To start with a simple example, make <var>command</var> refer to a statically
linked binary.  If you were to use a dynamically linked executable, then
you&textrsquo;d have to arrange to have the shared libraries in the right place under
your new root directory.
</para>
<para>For example, if you create a statically linked <command>ls</command> executable,
and put it in <file>/tmp/empty</file>, you can run this command as root:
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ chroot /tmp/empty /ls -Rl /
</pre></example>

<para>Then you&textrsquo;ll see output like this:
</para>
<example endspaces=" ">
<pre xml:space="preserve">/:
total 1023
-rwxr-xr-x 1 0 0 1041745 Aug 16 11:17 ls
</pre></example>

<para>If you want to use a dynamically linked executable, say <command>bash</command>,
then first run <samp>ldd bash</samp> to see what shared objects it needs.
Then, in addition to copying the actual binary, also copy the listed
files to the required positions under your intended new root directory.
Finally, if the executable requires any other files (e.g., data, state,
device files), copy them into place, too.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">exit status of <command>chroot</command></indexterm></cindex>
<para>Exit status:
</para>
<display endspaces=" ">
<pre xml:space="preserve">125 if <command>chroot</command> itself fails
126 if <var>command</var> is found but cannot be invoked
127 if <var>command</var> cannot be found
the exit status of <var>command</var> otherwise
</pre></display>


</section>
<node name="env-invocation" spaces=" "><nodename>env invocation</nodename><nodenext automatic="on">nice invocation</nodenext><nodeprev automatic="on">chroot invocation</nodeprev><nodeup automatic="on">Modified command invocation</nodeup></node>
<section spaces=" "><sectiontitle><command>env</command>: Run a command in a modified environment</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">env</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">environment, running a program in a modified</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">modified environment, running a program in a</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">running a program in a modified environment</indexterm></cindex>

<para><command>env</command> runs a command with a modified environment.  Synopses:
</para>
<example endspaces=" ">
<pre xml:space="preserve">env [<var>option</var>]&dots; [<var>name</var>=<var>value</var>]&dots; <!-- c -->
[<var>command</var> [<var>args</var>]&dots;]
env
</pre></example>

<para>Operands of the form <samp><var>variable</var>=<var>value</var></samp> set
the environment variable <var>variable</var> to value <var>value</var>.
<var>value</var> may be empty (<samp><var>variable</var>=</samp>).  Setting a variable
to an empty value is different from unsetting it.
These operands are evaluated left-to-right, so if two operands
mention the same variable the earlier is ignored.
</para>
<para>Environment variable names can be empty, and can contain any
characters other than <samp>=</samp> and <acronym><acronymword>ASCII</acronymword></acronym> <sc>nul</sc>.
However, it is wise to limit yourself to names that
consist solely of underscores, digits, and <acronym><acronymword>ASCII</acronymword></acronym> letters,
and that begin with a non-digit, as applications like the shell do not
work well with other names.
</para>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">PATH</indexterm></vindex>
<para>The first operand that does not contain the character <samp>=</samp>
specifies the program to invoke; it is
searched for according to the <env>PATH</env> environment variable.  Any
remaining arguments are passed as arguments to that program.
The program should not be a special built-in utility
(<pxref><xrefnodename>Special built-in utilities</xrefnodename></pxref>).
</para>
<para>Modifications to <env>PATH</env> take effect prior to searching for
<var>command</var>.  Use caution when reducing <env>PATH</env>; behavior is
not portable when <env>PATH</env> is undefined or omits key directories
such as <file>/bin</file>.
</para>
<para>In the rare case that a utility contains a <samp>=</samp> in the name, the
only way to disambiguate it from a variable assignment is to use an
intermediate command for <var>command</var>, and pass the problematic
program name via <var>args</var>.  For example, if <file>./prog=</file> is an
executable in the current <env>PATH</env>:
</para>
<example endspaces=" ">
<pre xml:space="preserve">env prog= true # runs 'true', with prog= in environment
env ./prog= true # runs 'true', with ./prog= in environment
env -- prog= true # runs 'true', with prog= in environment
env sh -c '\prog= true' # runs 'prog=' with argument 'true'
env sh -c 'exec &quot;$&arobase;&quot;' sh prog= true # also runs 'prog='
</pre></example>

<cindex index="cp" spaces=" "><indexterm index="cp">environment, printing</indexterm></cindex>

<para>If no command name is specified following the environment
specifications, the resulting environment is printed.  This is like
specifying the <command>printenv</command> program.
</para>
<para>For some examples, suppose the environment passed to <command>env</command>
contains <samp>LOGNAME=rms</samp>, <samp>EDITOR=emacs</samp>, and
<samp>PATH=.:/gnubin:/hacks</samp>:
</para>
<itemize commandarg="bullet" spaces=" " endspaces=" "><itemprepend><formattingcommand command="bullet" /></itemprepend>
<beforefirstitem>
</beforefirstitem><listitem><prepend>&bullet;</prepend>
<para>Output the current environment.
</para><example endspaces=" ">
<pre xml:space="preserve">$ env | LC_ALL=C sort
EDITOR=emacs
LOGNAME=rms
PATH=.:/gnubin:/hacks
</pre></example>

</listitem><listitem><prepend>&bullet;</prepend>
<para>Run <command>foo</command> with a reduced environment, preserving only the
original <env>PATH</env> to avoid problems in locating <command>foo</command>.
</para><example endspaces=" ">
<pre xml:space="preserve">env - PATH=&quot;$PATH&quot; foo
</pre></example>

</listitem><listitem><prepend>&bullet;</prepend>
<para>Run <command>foo</command> with the environment containing <samp>LOGNAME=rms</samp>,
<samp>EDITOR=emacs</samp>, and <samp>PATH=.:/gnubin:/hacks</samp>, and guarantees
that <command>foo</command> was found in the file system rather than as a shell
built-in.
</para><example endspaces=" ">
<pre xml:space="preserve">env foo
</pre></example>

</listitem><listitem><prepend>&bullet;</prepend>
<para>Run <command>nemacs</command> with the environment containing <samp>LOGNAME=foo</samp>,
<samp>EDITOR=emacs</samp>, <samp>PATH=.:/gnubin:/hacks</samp>, and
<samp>DISPLAY=gnu:0</samp>.
</para><example endspaces=" ">
<pre xml:space="preserve">env DISPLAY=gnu:0 LOGNAME=foo nemacs
</pre></example>

</listitem><listitem><prepend>&bullet;</prepend>
<para>Attempt to run the program <command>/energy/--</command> (as that is the only
possible path search result); if the command exists, the environment
will contain <samp>LOGNAME=rms</samp> and <samp>PATH=/energy</samp>, and the
arguments will be <samp>e=mc2</samp>, <samp>bar</samp>, and <samp>baz</samp>.
</para><example endspaces=" ">
<pre xml:space="preserve">env -u EDITOR PATH=/energy -- e=mc2 bar baz
</pre></example>

</listitem></itemize>


<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
Options must precede operands.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-0</itemformat></item>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-0</indexterm></indexcommand>
<itemx spaces=" "><itemformat command="samp">--null</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;null</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">output <sc>nul</sc>-byte-terminated lines</indexterm></cindex>
<para>Output a zero byte (<acronym><acronymword>ASCII</acronymword></acronym> <sc>nul</sc>) at the end of each line,
rather than a newline. This option enables other programs to parse the
output of <command>env</command> even when that output would contain data
with embedded newlines.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-u <var>name</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--unset=<var>name</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-u</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;unset</indexterm></indexcommand>
<para>Remove variable <var>name</var> from the environment, if it was in the
environment.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-</itemformat></item>
<itemx spaces=" "><itemformat command="samp">-i</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--ignore-environment</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-i</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;ignore-environment</indexterm></indexcommand>
<para>Start with an empty environment, ignoring the inherited environment.
</para>
</tableitem></tableentry></table>

<cindex index="cp" spaces=" "><indexterm index="cp">exit status of <command>env</command></indexterm></cindex>
<para>Exit status:
</para>
<display endspaces=" ">
<pre xml:space="preserve">0   if no <var>command</var> is specified and the environment is output
125 if <command>env</command> itself fails
126 if <var>command</var> is found but cannot be invoked
127 if <var>command</var> cannot be found
the exit status of <var>command</var> otherwise
</pre></display>


</section>
<node name="nice-invocation" spaces=" "><nodename>nice invocation</nodename><nodenext automatic="on">nohup invocation</nodenext><nodeprev automatic="on">env invocation</nodeprev><nodeup automatic="on">Modified command invocation</nodeup></node>
<section spaces=" "><sectiontitle><command>nice</command>: Run a command with modified niceness</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">nice</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">niceness</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">scheduling, affecting</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">appropriate privileges</indexterm></cindex>

<para><command>nice</command> prints or modifies a process&textrsquo;s <dfn>niceness</dfn>,
a parameter that affects whether the process is scheduled favorably.
Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">nice [<var>option</var>]&dots; [<var>command</var> [<var>arg</var>]&dots;]
</pre></example>

<para>If no arguments are given, <command>nice</command> prints the current niceness.
Otherwise, <command>nice</command> runs the given <var>command</var> with its
niceness adjusted.  By default, its niceness is incremented by 10.
</para>
<para>Niceness values range at least from &minus;20 (process has high priority
and gets more resources, thus slowing down other processes) through 19
(process has lower priority and runs slowly itself, but has less impact
on the speed of other running processes).  Some systems
may have a wider range of nicenesses; conversely, other systems may
enforce more restrictive limits.  An attempt to set the niceness
outside the supported range is treated as an attempt to use the
minimum or maximum supported value.
</para>
<para>A niceness should not be confused with a scheduling priority, which
lets applications determine the order in which threads are scheduled
to run.  Unlike a priority, a niceness is merely advice to the
scheduler, which the scheduler is free to ignore.  Also, as a point of
terminology, <acronym><acronymword>POSIX</acronymword></acronym> defines the behavior of <command>nice</command> in
terms of a <dfn>nice value</dfn>, which is the nonnegative difference
between a niceness and the minimum niceness.  Though <command>nice</command>
conforms to <acronym><acronymword>POSIX</acronymword></acronym>, its documentation and diagnostics use the
term &textldquo;niceness&textrdquo; for compatibility with historical practice.
</para>
<para><var>command</var> must not be a special built-in utility (<pxref><xrefnodename>Special
built-in utilities</xrefnodename></pxref>).
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">conflicts with shell built-ins</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">built-in shell commands, conflicts with</indexterm></cindex>
<para>Due to shell aliases and built-in <command>nice</command> functions, using an
unadorned <command>nice</command> interactively or in a script may get you
different functionality than that described here.  Invoke it via
<command>env</command> (i.e., <code>env nice &dots;</code>) to avoid interference
from the shell.
</para>

<para>The program accepts the following option.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
Options must precede operands.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">-n <var>adjustment</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--adjustment=<var>adjustment</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-n</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;adjustment</indexterm></indexcommand>
<para>Add <var>adjustment</var> instead of 10 to the command&textrsquo;s niceness.  If
<var>adjustment</var> is negative and you lack appropriate privileges,
<command>nice</command> issues a warning but otherwise acts as if you specified
a zero adjustment.
</para>
<para>For compatibility <command>nice</command> also supports an obsolete
option syntax <option>-<var>adjustment</var></option>.  New scripts should use
<option>-n <var>adjustment</var></option> instead.
</para>
</tableitem></tableentry></table>

<cindex index="cp" spaces=" "><indexterm index="cp">exit status of <command>nice</command></indexterm></cindex>
<para>Exit status:
</para>
<display endspaces=" ">
<pre xml:space="preserve">0   if no <var>command</var> is specified and the niceness is output
125 if <command>nice</command> itself fails
126 if <var>command</var> is found but cannot be invoked
127 if <var>command</var> cannot be found
the exit status of <var>command</var> otherwise
</pre></display>

<para>It is sometimes useful to run a non-interactive program with reduced niceness.
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ nice factor 4611686018427387903
</pre></example>

<para>Since <command>nice</command> prints the current niceness,
you can invoke it through itself to demonstrate how it works.
</para>
<para>The default behavior is to increase the niceness by <samp>10</samp>:
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ nice
0
$ nice nice
10
$ nice -n 10 nice
10
</pre></example>

<para>The <var>adjustment</var> is relative to the current niceness.  In the
next example, the first <command>nice</command> invocation runs the second one
with niceness 10, and it in turn runs the final one with a niceness
that is 3 more:
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ nice nice -n 3 nice
13
</pre></example>

<para>Specifying a niceness larger than the supported range
is the same as specifying the maximum supported value:
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ nice -n 10000000000 nice
19
</pre></example>

<para>Only a privileged user may run a process with lower niceness:
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ nice -n -1 nice
nice: cannot set niceness: Permission denied
0
$ sudo nice -n -1 nice
-1
</pre></example>


</section>
<node name="nohup-invocation" spaces=" "><nodename>nohup invocation</nodename><nodenext automatic="on">stdbuf invocation</nodenext><nodeprev automatic="on">nice invocation</nodeprev><nodeup automatic="on">Modified command invocation</nodeup></node>
<section spaces=" "><sectiontitle><command>nohup</command>: Run a command immune to hangups</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">nohup</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">hangups, immunity to</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">immunity to hangups</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">logging out and continuing to run</indexterm></cindex>

<indexcommand command="flindex" index="fl" spaces=" "><indexterm index="fl" incode="1" mergedindex="cp">nohup.out</indexterm></indexcommand>
<para><command>nohup</command> runs the given <var>command</var> with hangup signals ignored,
so that the command can continue running in the background after you log
out.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">nohup <var>command</var> [<var>arg</var>]&dots;
</pre></example>

<para>If standard input is a terminal, it is redirected from
<file>/dev/null</file> so that terminal sessions do not mistakenly consider
the terminal to be used by the command.  This is a <acronym><acronymword>GNU</acronymword></acronym>
extension; programs intended to be portable to non-<acronym><acronymword>GNU</acronymword></acronym> hosts
should use <samp>nohup <var>command</var> [<var>arg</var>]&dots; &lt;/dev/null</samp>
instead.
</para>
<indexcommand command="flindex" index="fl" spaces=" "><indexterm index="fl" incode="1" mergedindex="cp">nohup.out</indexterm></indexcommand>
<para>If standard output is a terminal, the command&textrsquo;s standard output is appended
to the file <file>nohup.out</file>; if that cannot be written to, it is appended
to the file <file>$HOME/nohup.out</file>; and if that cannot be written to, the
command is not run.
Any <file>nohup.out</file> or <file>$HOME/nohup.out</file> file created by
<command>nohup</command> is made readable and writable only to the user,
regardless of the current umask settings.
</para>
<para>If standard error is a terminal, it is normally redirected to the same file
descriptor as the (possibly-redirected) standard output.
However, if standard output is closed, standard error terminal output
is instead appended to the file <file>nohup.out</file> or
<file>$HOME/nohup.out</file> as above.
</para>
<para>To capture the command&textrsquo;s output to a file other than <file>nohup.out</file>
you can redirect it.  For example, to capture the output of
<command>make</command>:
</para>
<example endspaces=" ">
<pre xml:space="preserve">nohup make &gt; make.log
</pre></example>

<para><command>nohup</command> does not automatically put the command it runs in the
background; you must do that explicitly, by ending the command line
with an <samp>&amp;</samp>.  Also, <command>nohup</command> does not alter the
niceness of <var>command</var>; use <command>nice</command> for that,
e.g., <samp>nohup nice <var>command</var></samp>.
</para>
<para><var>command</var> must not be a special built-in utility (<pxref><xrefnodename>Special
built-in utilities</xrefnodename></pxref>).
</para>
<para>The only options are <option>--help</option> and <option>--version</option>.  <xref><xrefnodename>Common
options</xrefnodename></xref>.  Options must precede operands.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">exit status of <command>nohup</command></indexterm></cindex>
<para>Exit status:
</para>
<display endspaces=" ">
<pre xml:space="preserve">125 if <command>nohup</command> itself fails, and <env>POSIXLY_CORRECT</env> is not set
126 if <var>command</var> is found but cannot be invoked
127 if <var>command</var> cannot be found
the exit status of <var>command</var> otherwise
</pre></display>

<para>If <env>POSIXLY_CORRECT</env> is set, internal failures give status 127
instead of 125.
</para>

</section>
<node name="stdbuf-invocation" spaces=" "><nodename>stdbuf invocation</nodename><nodenext automatic="on">su invocation</nodenext><nodeprev automatic="on">nohup invocation</nodeprev><nodeup automatic="on">Modified command invocation</nodeup></node>
<section spaces=" "><sectiontitle><command>stdbuf</command>: Run a command with modified I/O stream buffering</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">stdbuf</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">standard streams, buffering</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">line buffered</indexterm></cindex>

<para><command>stdbuf</command> allows one to modify the buffering operations of the
three standard I/O streams associated with a program.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">stdbuf <var>option</var>&dots; <var>command</var>
</pre></example>

<para><var>command</var> must start with the name of a program that
</para><enumerate first="1" endspaces=" ">
<listitem>
<para>uses the ISO C <code>FILE</code> streams for input/output (note the
programs <command>dd</command> and <command>cat</command> don&textrsquo;t do that),
</para>
</listitem><listitem>
<para>does not adjust the buffering of its standard streams (note the
program <command>tee</command> is not in this category).
</para></listitem></enumerate>

<para>Any additional <var>arg</var>s are passed as additional arguments to the
<var>command</var>.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">-i <var>mode</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--input=<var>mode</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-i</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;input</indexterm></indexcommand>
<para>Adjust the standard input stream buffering.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-o <var>mode</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--output=<var>mode</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-o</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;output</indexterm></indexcommand>
<para>Adjust the standard output stream buffering.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-e <var>mode</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--error=<var>mode</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-e</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;error</indexterm></indexcommand>
<para>Adjust the standard error stream buffering.
</para>
</tableitem></tableentry></table>

<para>The <var>mode</var> can be specified as follows:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<beforefirstitem>
</beforefirstitem><tableentry><tableterm><item spaces=" "><itemformat command="samp">L</itemformat></item>
</tableterm><tableitem><para>Set the stream to line buffered mode.
In this mode data is coalesced until a newline is output or
input is read from any stream attached to a terminal device.
This option is invalid with standard input.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">0</itemformat></item>
</tableterm><tableitem><para>Disable buffering of the selected stream.
In this mode, data is output immediately and only the
amount of data requested is read from input.
Note the difference in function for input and output.
Disabling buffering for input will not influence the responsiveness
or blocking behavior of the stream input functions.
For example <code>fread</code> will still block until <code>EOF</code> or error,
even if the underlying <code>read</code> returns less data than requested.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp"><var>size</var></itemformat></item>
</tableterm><tableitem><para>Specify the size of the buffer to use in fully buffered mode.
<var>size</var> may be, or may be an integer optionally followed by,
one of the following multiplicative suffixes:
</para><example endspaces=" ">
<pre xml:space="preserve"><samp>KB</samp> =&gt;           1000 (KiloBytes)
<samp>K</samp>  =&gt;           1024 (KibiBytes)
<samp>MB</samp> =&gt;      1000*1000 (MegaBytes)
<samp>M</samp>  =&gt;      1024*1024 (MebiBytes)
<samp>GB</samp> =&gt; 1000*1000*1000 (GigaBytes)
<samp>G</samp>  =&gt; 1024*1024*1024 (GibiBytes)
</pre></example>
<para>and so on for <samp>T</samp>, <samp>P</samp>, <samp>E</samp>, <samp>Z</samp>, and <samp>Y</samp>.
</para>
</tableitem></tableentry></table>

<cindex index="cp" spaces=" "><indexterm index="cp">exit status of <command>stdbuf</command></indexterm></cindex>
<para>Exit status:
</para>
<display endspaces=" ">
<pre xml:space="preserve">125 if <command>stdbuf</command> itself fails
126 if <var>command</var> is found but cannot be invoked
127 if <var>command</var> cannot be found
the exit status of <var>command</var> otherwise
</pre></display>


</section>
<node name="su-invocation" spaces=" "><nodename>su invocation</nodename><nodenext automatic="on">timeout invocation</nodenext><nodeprev automatic="on">stdbuf invocation</nodeprev><nodeup automatic="on">Modified command invocation</nodeup></node>
<section spaces=" "><sectiontitle><command>su</command>: Run a command with substitute user and group ID</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">su</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">substitute user and group IDs</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">user ID, switching</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">super-user, becoming</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">root, becoming</indexterm></cindex>

<para><command>su</command> allows one user to temporarily become another user.  It runs a
command (often an interactive shell) with the real and effective user
ID, group ID, and supplemental groups of a given <var>user</var>.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">su [<var>option</var>]&dots; [<var>user</var> [<var>arg</var>]&dots;]
</pre></example>

<cindex index="cp" spaces=" "><indexterm index="cp">passwd entry, and <command>su</command> shell</indexterm></cindex>
<indexcommand command="flindex" index="fl" spaces=" "><indexterm index="fl" incode="1" mergedindex="cp">/bin/sh</indexterm></indexcommand>
<indexcommand command="flindex" index="fl" spaces=" "><indexterm index="fl" incode="1" mergedindex="cp">/etc/passwd</indexterm></indexcommand>
<para>If no <var>user</var> is given, the default is <code>root</code>, the super-user.
The shell to use is taken from <var>user</var>&textrsquo;s <code>passwd</code> entry, or
<file>/bin/sh</file> if none is specified there.  If <var>user</var> has a
password, <command>su</command> prompts for the password unless run by a user with
effective user ID of zero (the super-user).
</para>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">HOME</indexterm></vindex>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">SHELL</indexterm></vindex>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">USER</indexterm></vindex>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">LOGNAME</indexterm></vindex>
<cindex index="cp" spaces=" "><indexterm index="cp">login shell</indexterm></cindex>
<para>By default, <command>su</command> does not change the current directory.
It sets the environment variables <env>HOME</env> and <env>SHELL</env>
from the password entry for <var>user</var>, and if <var>user</var> is not
the super-user, sets <env>USER</env> and <env>LOGNAME</env> to <var>user</var>.
By default, the shell is not a login shell.
</para>
<para>Any additional <var>arg</var>s are passed as additional arguments to the
shell.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp"><option>-su</option></indexterm></cindex>
<para>GNU <command>su</command> does not treat <file>/bin/sh</file> or any other shells specially
(e.g., by setting <code>argv[0]</code> to <option>-su</option>, passing <option>-c</option> only
to certain shells, etc.).
</para>
<findex index="fn" spaces=" "><indexterm index="fn" mergedindex="cp">syslog</indexterm></findex>
<para><command>su</command> can optionally be compiled to use <code>syslog</code> to report
failed, and optionally successful, <command>su</command> attempts.  (If the system
supports <code>syslog</code>.)  However, GNU <command>su</command> does not check if the
user is a member of the <code>wheel</code> group; see below.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">-c <var>command</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--command=<var>command</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-c</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;command</indexterm></indexcommand>
<para>Pass <var>command</var>, a single command line to run, to the shell with
a <option>-c</option> option instead of starting an interactive shell.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-f</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--fast</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-f</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;fast</indexterm></indexcommand>
<indexcommand command="flindex" index="fl" spaces=" "><indexterm index="fl" incode="1" mergedindex="cp">.cshrc</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">file name pattern expansion, disabled</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">globbing, disabled</indexterm></cindex>
<para>Pass the <option>-f</option> option to the shell.  This probably only makes sense
if the shell run is <command>csh</command> or <command>tcsh</command>, for which the <option>-f</option>
option prevents reading the startup file (<file>.cshrc</file>).  With
Bourne-like shells, the <option>-f</option> option disables file name pattern
expansion (globbing), which is not likely to be useful.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-</itemformat></item>
<itemx spaces=" "><itemformat command="samp">-l</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--login</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-l</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;login</indexterm></indexcommand>
<!-- c other variables already indexed above -->
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">TERM</indexterm></vindex>
<vindex index="vr" spaces=" "><indexterm index="vr" mergedindex="cp">PATH</indexterm></vindex>
<cindex index="cp" spaces=" "><indexterm index="cp">login shell, creating</indexterm></cindex>
<para>Make the shell a login shell.  This means the following.  Unset all
environment variables except <env>TERM</env>, <env>HOME</env>, and <env>SHELL</env>
(which are set as described above), and <env>USER</env> and <env>LOGNAME</env>
(which are set, even for the super-user, as described above), and set
<env>PATH</env> to a compiled-in default value.  Change to <var>user</var>&textrsquo;s home
directory.  Prepend <samp>-</samp> to the shell&textrsquo;s name, intended to make it
read its login startup file(s).
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-m</itemformat></item>
<itemx spaces=" "><itemformat command="samp">-p</itemformat></itemx>
<itemx spaces=" "><itemformat command="samp">--preserve-environment</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-m</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-p</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;preserve-environment</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">environment, preserving</indexterm></cindex>
<indexcommand command="flindex" index="fl" spaces=" "><indexterm index="fl" incode="1" mergedindex="cp">/etc/shells</indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">restricted shell</indexterm></cindex>
<para>Do not change the environment variables <env>HOME</env>, <env>USER</env>,
<env>LOGNAME</env>, or <env>SHELL</env>.  Run the shell given in the environment
variable <env>SHELL</env> instead of the shell from <var>user</var>&textrsquo;s passwd
entry, unless the user running <command>su</command> is not the super-user and
<var>user</var>&textrsquo;s shell is restricted.  A <dfn>restricted shell</dfn> is one that
is not listed in the file <file>/etc/shells</file>, or in a compiled-in list
if that file does not exist.  Parts of what this option does can be
overridden by <option>--login</option> and <option>--shell</option>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-s <var>shell</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--shell=<var>shell</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-s</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;shell</indexterm></indexcommand>
<para>Run <var>shell</var> instead of the shell from <var>user</var>&textrsquo;s passwd entry,
unless the user running <command>su</command> is not the super-user and <var>user</var>&textrsquo;s
shell is restricted (see <option>-m</option> just above).
</para>
</tableitem></tableentry></table>

<cindex index="cp" spaces=" "><indexterm index="cp">exit status of <command>su</command></indexterm></cindex>
<para>Exit status:
</para>
<display endspaces=" ">
<pre xml:space="preserve">125 if <command>su</command> itself fails
126 if subshell is found but cannot be invoked
127 if subshell cannot be found
the exit status of the subshell otherwise
</pre></display>

<cindex index="cp" spaces=" "><indexterm index="cp">wheel group, not supported</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">group wheel, not supported</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">fascism</indexterm></cindex>
<subsection spaces=" "><sectiontitle>Why GNU <command>su</command> does not support the <samp>wheel</samp> group</sectiontitle>

<para>(This section is by Richard Stallman.)
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">Twenex</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">MIT AI lab</indexterm></cindex>
<para>Sometimes a few of the users try to hold total power over all the
rest.  For example, in 1984, a few users at the MIT AI lab decided to
seize power by changing the operator password on the Twenex system and
keeping it secret from everyone else.  (I was able to thwart this coup
and give power back to the users by patching the kernel, but I
wouldn&textrsquo;t know how to do that in Unix.)
</para>
<para>However, occasionally the rulers do tell someone.  Under the usual
<command>su</command> mechanism, once someone learns the root password who
sympathizes with the ordinary users, he or she can tell the rest.  The
&textldquo;wheel group&textrdquo; feature would make this impossible, and thus cement the
power of the rulers.
</para>
<para>I&textrsquo;m on the side of the masses, not that of the rulers.  If you are
used to supporting the bosses and sysadmins in whatever they do, you
might find this idea strange at first.
</para>

</subsection>
</section>
<node name="timeout-invocation" spaces=" "><nodename>timeout invocation</nodename><nodeprev automatic="on">su invocation</nodeprev><nodeup automatic="on">Modified command invocation</nodeup></node>
<section spaces=" "><sectiontitle><command>timeout</command>: Run a command with a time limit</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">timeout</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">time limit</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">run commands with bounded time</indexterm></cindex>

<para><command>timeout</command> runs the given <var>command</var> and kills it if it is
still running after the specified time interval.  Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">timeout [<var>option</var>] <var>duration</var> <var>command</var> [<var>arg</var>]&dots;
</pre></example>

<para><var>command</var> must not be a special built-in utility (<pxref><xrefnodename>Special
built-in utilities</xrefnodename></pxref>).
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
Options must precede operands.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><itemx spaces=" "><itemformat command="samp">--foreground</itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;foreground</indexterm></indexcommand>
<para>Don&textrsquo;t create a separate background program group, so that
the managed <var>command</var> can use the foreground TTY normally.
This is needed to support timing out commands not started
directly from an interactive shell, in two situations.
</para><enumerate first="1" endspaces=" ">
<listitem>
<para><var>command</var> is interactive and needs to read from the terminal for example
</para></listitem><listitem>
<para>the user wants to support sending signals directly to <var>command</var>
from the terminal (like Ctrl-C for example)
</para></listitem></enumerate>

<para>Note in this mode of operation, any children of <var>command</var>
will not be timed out.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-k <var>duration</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--kill-after=<var>duration</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-k</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;kill-after</indexterm></indexcommand>
<para>Ensure the monitored <var>command</var> is killed by also sending a <samp>KILL</samp>
signal, after the specified <var>duration</var>.  Without this option, if the
selected signal proves not to be fatal, <command>timeout</command> does not kill
the <var>command</var>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-s <var>signal</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--signal=<var>signal</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-s</indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;signal</indexterm></indexcommand>
<para>Send this <var>signal</var> to <var>command</var> on timeout, rather than the
default <samp>TERM</samp> signal. <var>signal</var> may be a name like <samp>HUP</samp>
or a number. Also see <xref><xrefnodename>Signal specifications</xrefnodename></xref>.
</para></tableitem></tableentry></table>

<cindex index="cp" spaces=" "><indexterm index="cp">time units</indexterm></cindex>
<para><var>duration</var> is a floating point number followed by an optional unit:
</para><display endspaces=" ">
<pre xml:space="preserve"><samp>s</samp> for seconds (the default)
<samp>m</samp> for minutes
<samp>h</samp> for hours
<samp>d</samp> for days
</pre></display>
<para>A duration of 0 disables the associated timeout.
Note that the actual timeout duration is dependent on system conditions,
which should be especially considered when specifying sub-second timeouts.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">exit status of <command>timeout</command></indexterm></cindex>
<para>Exit status:
</para>
<display endspaces=" ">
<pre xml:space="preserve">124 if <var>command</var> times out
125 if <command>timeout</command> itself fails
126 if <var>command</var> is found but cannot be invoked
127 if <var>command</var> cannot be found
the exit status of <var>command</var> otherwise
</pre></display>


</section>
</chapter>
<node name="Process-control" spaces=" "><nodename>Process control</nodename><nodenext automatic="on">Delaying</nodenext><nodeprev automatic="on">Modified command invocation</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>Process control</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">processes, commands for controlling</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">commands for controlling processes</indexterm></cindex>

<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::             ">kill invocation</menunode><menudescription><pre xml:space="preserve">Sending a signal to processes.
</pre></menudescription></menuentry></menu>


<node name="kill-invocation" spaces=" "><nodename>kill invocation</nodename><nodeup automatic="on">Process control</nodeup></node>
<section spaces=" "><sectiontitle><command>kill</command>: Send a signal to processes</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">kill</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">send a signal to processes</indexterm></cindex>

<para>The <command>kill</command> command sends a signal to processes, causing them
to terminate or otherwise act upon receiving the signal in some way.
Alternatively, it lists information about signals.  Synopses:
</para>
<example endspaces=" ">
<pre xml:space="preserve">kill [-s <var>signal</var> | --signal <var>signal</var> | -<var>signal</var>] <var>pid</var>&dots;
kill [-l | --list | -t | --table] [<var>signal</var>]&dots;
</pre></example>

<cindex index="cp" spaces=" "><indexterm index="cp">conflicts with shell built-ins</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">built-in shell commands, conflicts with</indexterm></cindex>
<para>Due to shell aliases and built-in <command>kill</command> functions, using an
unadorned <command>kill</command> interactively or in a script may get you
different functionality than that described here.  Invoke it via
<command>env</command> (i.e., <code>env kill &dots;</code>) to avoid interference
from the shell.
</para>

<para>The first form of the <command>kill</command> command sends a signal to all
<var>pid</var> arguments.  The default signal to send if none is specified
is <samp>TERM</samp>.  The special signal number <samp>0</samp> does not denote a
valid signal, but can be used to test whether the <var>pid</var> arguments
specify processes to which a signal could be sent.
</para>
<para>If <var>pid</var> is positive, the signal is sent to the process with the
process ID <var>pid</var>.  If <var>pid</var> is zero, the signal is sent to all
processes in the process group of the current process.  If <var>pid</var>
is &minus;1, the signal is sent to all processes for which the user has
permission to send a signal.  If <var>pid</var> is less than &minus;1, the signal
is sent to all processes in the process group that equals the absolute
value of <var>pid</var>.
</para>
<para>If <var>pid</var> is not positive, a system-dependent set of system
processes is excluded from the list of processes to which the signal
is sent.
</para>
<para>If a negative <var>pid</var> argument is desired as the first one, it
should be preceded by <option>--</option>.  However, as a common extension to
<acronym><acronymword>POSIX</acronymword></acronym>, <option>--</option> is not required with <samp>kill
-<var>signal</var> -<var>pid</var></samp>.  The following commands are equivalent:
</para>
<example endspaces=" ">
<pre xml:space="preserve">kill -15 -1
kill -TERM -1
kill -s TERM -- -1
kill -- -1
</pre></example>

<para>The first form of the <command>kill</command> command succeeds if every <var>pid</var>
argument specifies at least one process that the signal was sent to.
</para>
<para>The second form of the <command>kill</command> command lists signal information.
Either the <option>-l</option> or <option>--list</option> option, or the <option>-t</option>
or <option>--table</option> option must be specified.  Without any
<var>signal</var> argument, all supported signals are listed.  The output
of <option>-l</option> or <option>--list</option> is a list of the signal names, one
per line; if <var>signal</var> is already a name, the signal number is
printed instead.  The output of <option>-t</option> or <option>--table</option> is a
table of signal numbers, names, and descriptions.  This form of the
<command>kill</command> command succeeds if all <var>signal</var> arguments are valid
and if there is no output error.
</para>
<para>The <command>kill</command> command also supports the <option>--help</option> and
<option>--version</option> options.  <xref><xrefnodename>Common options</xrefnodename></xref>.
</para>
<para>A <var>signal</var> may be a signal name like <samp>HUP</samp>, or a signal
number like <samp>1</samp>, or an exit status of a process terminated by the
signal.  A signal name can be given in canonical form or prefixed by
<samp>SIG</samp>.  The case of the letters is ignored, except for the
<option>-<var>signal</var></option> option which must use upper case to avoid
ambiguity with lower case option letters.  For a list of supported
signal names and numbers see <xref><xrefnodename>Signal specifications</xrefnodename></xref>.
</para>
</section>
</chapter>
<node name="Delaying" spaces=" "><nodename>Delaying</nodename><nodenext automatic="on">Numeric operations</nodenext><nodeprev automatic="on">Process control</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>Delaying</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">delaying commands</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">commands for delaying</indexterm></cindex>

<!-- c Perhaps @command{wait} or other commands should be described here also? -->

<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::            ">sleep invocation</menunode><menudescription><pre xml:space="preserve">Delay for a specified time.
</pre></menudescription></menuentry></menu>


<node name="sleep-invocation" spaces=" "><nodename>sleep invocation</nodename><nodeup automatic="on">Delaying</nodeup></node>
<section spaces=" "><sectiontitle><command>sleep</command>: Delay for a specified time</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">sleep</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">delay for a specified time</indexterm></cindex>

<para><command>sleep</command> pauses for an amount of time specified by the sum of
the values of the command line arguments.
Synopsis:
</para>
<example endspaces=" ">
<pre xml:space="preserve">sleep <var>number</var>[smhd]&dots;
</pre></example>

<cindex index="cp" spaces=" "><indexterm index="cp">time units</indexterm></cindex>
<para>Each argument is a number followed by an optional unit; the default
is seconds.  The units are:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">s</itemformat></item>
</tableterm><tableitem><para>seconds
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">m</itemformat></item>
</tableterm><tableitem><para>minutes
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">h</itemformat></item>
</tableterm><tableitem><para>hours
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">d</itemformat></item>
</tableterm><tableitem><para>days
</para></tableitem></tableentry></table>

<para>Historical implementations of <command>sleep</command> have required that
<var>number</var> be an integer, and only accepted a single argument
without a suffix.  However, GNU <command>sleep</command> accepts
arbitrary floating point numbers.  <xref><xrefnodename>Floating point</xrefnodename></xref>.
</para>
<para>The only options are <option>--help</option> and <option>--version</option>.  <xref><xrefnodename>Common
options</xrefnodename></xref>.
</para>
<!-- c sleep is a shell built-in at least with Solaris 11's /bin/sh -->
<cindex index="cp" spaces=" "><indexterm index="cp">conflicts with shell built-ins</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">built-in shell commands, conflicts with</indexterm></cindex>
<para>Due to shell aliases and built-in <command>sleep</command> functions, using an
unadorned <command>sleep</command> interactively or in a script may get you
different functionality than that described here.  Invoke it via
<command>env</command> (i.e., <code>env sleep &dots;</code>) to avoid interference
from the shell.
</para>

<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
</chapter>
<node name="Numeric-operations" spaces=" "><nodename>Numeric operations</nodename><nodenext automatic="on">File permissions</nodenext><nodeprev automatic="on">Delaying</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>Numeric operations</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">numeric operations</indexterm></cindex>
<para>These programs do numerically-related operations.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::              ">factor invocation</menunode><menudescription><pre xml:space="preserve">Show factors of numbers.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::                 ">seq invocation</menunode><menudescription><pre xml:space="preserve">Print sequences of numbers.
</pre></menudescription></menuentry></menu>


<node name="factor-invocation" spaces=" "><nodename>factor invocation</nodename><nodenext automatic="on">seq invocation</nodenext><nodeup automatic="on">Numeric operations</nodeup></node>
<section spaces=" "><sectiontitle><command>factor</command>: Print prime factors</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">factor</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">prime factors</indexterm></cindex>

<para><command>factor</command> prints prime factors.  Synopses:
</para>
<example endspaces=" ">
<pre xml:space="preserve">factor [<var>number</var>]&dots;
factor <var>option</var>
</pre></example>

<para>If no <var>number</var> is specified on the command line, <command>factor</command> reads
numbers from standard input, delimited by newlines, tabs, or spaces.
</para>
<para>The <command>factor</command> command supports only a small number of options:
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">--help</itemformat></item>
</tableterm><tableitem><para>Print a short help on standard output, then exit without further
processing.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">--version</itemformat></item>
</tableterm><tableitem><para>Print the program version on standard output, then exit without further
processing.
</para></tableitem></tableentry></table>

<para>Factoring the product of the eighth and ninth Mersenne primes
takes about 30 milliseconds of CPU time on a 2.2 GHz Athlon.
</para>
<example endspaces=" ">
<pre xml:space="preserve">M8=$(echo 2^31-1|bc)
M9=$(echo 2^61-1|bc)
n=$(echo &quot;$M8 * $M9&quot; | bc)
/usr/bin/time -f %U factor $n
4951760154835678088235319297: 2147483647 2305843009213693951
0.03
</pre></example>

<para>Similarly, factoring the eighth Fermat number <math>2^{256}+1</math> takes
about 20 seconds on the same machine.
</para>
<para>Factoring large numbers is, in general, hard.  The Pollard Rho
algorithm used by <command>factor</command> is particularly effective for
numbers with relatively small factors.  If you wish to factor large
numbers which do not have small factors (for example, numbers which
are the product of two large primes), other methods are far better.
</para>
<para>If <command>factor</command> is built without using GNU MP, only
single-precision arithmetic is available, and so large numbers
(typically <math>2^{64}</math> and above) will not be supported.  The single-precision
code uses an algorithm which is designed for factoring smaller
numbers.
</para>
<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
<node name="seq-invocation" spaces=" "><nodename>seq invocation</nodename><nodeprev automatic="on">factor invocation</nodeprev><nodeup automatic="on">Numeric operations</nodeup></node>
<section spaces=" "><sectiontitle><command>seq</command>: Print numeric sequences</sectiontitle>

<pindex index="pg" spaces=" "><indexterm index="pg" mergedindex="cp">seq</indexterm></pindex>
<cindex index="cp" spaces=" "><indexterm index="cp">numeric sequences</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">sequence of numbers</indexterm></cindex>

<para><command>seq</command> prints a sequence of numbers to standard output.  Synopses:
</para>
<example endspaces=" ">
<pre xml:space="preserve">seq [<var>option</var>]&dots; <var>last</var>
seq [<var>option</var>]&dots; <var>first</var> <var>last</var>
seq [<var>option</var>]&dots; <var>first</var> <var>increment</var> <var>last</var>
</pre></example>

<para><command>seq</command> prints the numbers from <var>first</var> to <var>last</var> by
<var>increment</var>.  By default, each number is printed on a separate line.
When <var>increment</var> is not specified, it defaults to <samp>1</samp>,
even when <var>first</var> is larger than <var>last</var>.
<var>first</var> also defaults to <samp>1</samp>.  So <code>seq 1</code> prints
<samp>1</samp>, but <code>seq 0</code> and <code>seq 10 5</code> produce no output.
Floating-point numbers may be specified.  <xref><xrefnodename>Floating point</xrefnodename></xref>.
</para>
<para>The program accepts the following options.  Also see <ref><xrefnodename>Common options</xrefnodename></ref>.
Options must precede operands.
</para>
<table commandarg="samp" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="samp">-f <var>format</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--format=<var>format</var></itemformat></itemx>
</tableterm><tableitem><indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">-f <var>format</var></indexterm></indexcommand>
<indexcommand command="opindex" index="op" spaces=" "><indexterm index="op" incode="1" mergedindex="cp">&textndash;format=<var>format</var></indexterm></indexcommand>
<cindex index="cp" spaces=" "><indexterm index="cp">formatting of numbers in <command>seq</command></indexterm></cindex>
<para>Print all numbers using <var>format</var>.
<var>format</var> must contain exactly one of the <samp>printf</samp>-style
floating point conversion specifications <samp>%a</samp>, <samp>%e</samp>,
<samp>%f</samp>, <samp>%g</samp>, <samp>%A</samp>, <samp>%E</samp>, <samp>%F</samp>, <samp>%G</samp>.
The <samp>%</samp> may be followed by zero or more flags taken from the set
<samp>-+#0 '</samp>, then an optional width containing one or more digits,
then an optional precision consisting of a <samp>.</samp> followed by zero
or more digits.  <var>format</var> may also contain any number of <samp>%%</samp>
conversion specifications.  All conversion specifications have the
same meaning as with <samp>printf</samp>.
</para>
<para>The default format is derived from <var>first</var>, <var>step</var>, and
<var>last</var>.  If these all use a fixed point decimal representation,
the default format is <samp>%.<var>p</var>f</samp>, where <var>p</var> is the minimum
precision that can represent the output numbers exactly.  Otherwise,
the default format is <samp>%g</samp>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-s <var>string</var></itemformat></item>
<itemx spaces=" "><itemformat command="samp">--separator=<var>string</var></itemformat></itemx>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp">separator for numbers in <command>seq</command></indexterm></cindex>
<para>Separate numbers with <var>string</var>; default is a newline.
The output always terminates with a newline.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="samp">-w</itemformat></item>
<itemx spaces=" "><itemformat command="samp">--equal-width</itemformat></itemx>
</tableterm><tableitem><para>Print all numbers with the same width, by padding with leading zeros.
<var>first</var>, <var>step</var>, and <var>last</var> should all use a fixed point
decimal representation.
(To have other kinds of padding, use <option>--format</option>).
</para>
</tableitem></tableentry></table>

<para>You can get finer-grained control over output with <option>-f</option>:
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ seq -f '(%9.2E)' -9e5 1.1e6 1.3e6
(-9.00E+05)
( 2.00E+05)
( 1.30E+06)
</pre></example>

<para>If you want hexadecimal integer output, you can use <command>printf</command>
to perform the conversion:
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ printf '%x\n' `seq 1048575 1024 1050623`
fffff
1003ff
1007ff
</pre></example>

<para>For very long lists of numbers, use xargs to avoid
system limitations on the length of an argument list:
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ seq 1000000 | xargs printf '%x\n' | tail -n 3
f423e
f423f
f4240
</pre></example>

<para>To generate octal output, use the printf <code>%o</code> format instead
of <code>%x</code>.
</para>
<para>On most systems, seq can produce whole-number output for values up to
at least <math>2^{53}</math>.  Larger integers are approximated.  The details
differ depending on your floating-point implementation.
<xref><xrefnodename>Floating point</xrefnodename></xref>.  A common
case is that <command>seq</command> works with integers through <math>2^{64}</math>,
and larger integers may not be numerically correct:
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ seq 18446744073709551616 1 18446744073709551618
18446744073709551616
18446744073709551616
18446744073709551618
</pre></example>

<para>Be careful when using <command>seq</command> with outlandish values: otherwise
you may see surprising results, as <command>seq</command> uses floating point
internally.  For example, on the x86 platform, where the internal
representation uses a 64-bit fraction, the command:
</para>
<example endspaces=" ">
<pre xml:space="preserve">seq 1 0.0000000000000000001 1.0000000000000000009
</pre></example>

<para>outputs 1.0000000000000000007 twice and skips 1.0000000000000000008.
</para>
<para>An exit status of zero indicates success,
and a nonzero value indicates failure.
</para>

</section>
</chapter>
<node name="File-permissions" spaces=" "><nodename>File permissions</nodename><nodenext automatic="on">Opening the software toolbox</nodenext><nodeprev automatic="on">Numeric operations</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>File permissions</sectiontitle>
<!-- c File mode bits -->

<!-- c Copyright (C) 1994, 1996, 1999-2001, 2003-2006, 2008-2012 Free Software -->
<!-- c Foundation, Inc. -->

<!-- c Permission is granted to copy, distribute and/or modify this document -->
<!-- c under the terms of the GNU Free Documentation License, Version 1.3 or -->
<!-- c any later version published by the Free Software Foundation; with no -->
<!-- c Invariant Sections, with no Front-Cover Texts, and with no Back-Cover -->
<!-- c Texts.  A copy of the license is included in the ``GNU Free -->
<!-- c Documentation License'' file as part of this distribution. -->

<para>Each file has a set of <dfn>file mode bits</dfn> that control the kinds of
access that users have to that file.  They can be represented either in
symbolic form or as an octal number.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::              ">Mode Structure</menunode><menudescription><pre xml:space="preserve">Structure of file mode bits.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::              ">Symbolic Modes</menunode><menudescription><pre xml:space="preserve">Mnemonic representation of file mode bits.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::               ">Numeric Modes</menunode><menudescription><pre xml:space="preserve">File mode bits as octal numbers.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator=":: ">Directory Setuid and Setgid</menunode><menudescription><pre xml:space="preserve">Set-user-ID and set-group-ID on directories.
</pre></menudescription></menuentry></menu>

<node name="Mode-Structure" spaces=" "><nodename>Mode Structure</nodename><nodenext automatic="on">Symbolic Modes</nodenext><nodeup automatic="on">File permissions</nodeup></node>
<section spaces=" "><sectiontitle>Structure of File Mode Bits</sectiontitle>

<para>The file mode bits have two parts: the <dfn>file permission bits</dfn>,
which control ordinary access to the file, and <dfn>special mode
bits</dfn>, which affect only some files.
</para>
<para>There are three kinds of permissions that a user can have for a file:
</para>
<enumerate first="1" endspaces=" ">
<listitem>
<cindex index="cp" spaces=" "><indexterm index="cp">read permission</indexterm></cindex>
<para>permission to read the file.  For directories, this means permission to
list the contents of the directory.
</para></listitem><listitem>
<cindex index="cp" spaces=" "><indexterm index="cp">write permission</indexterm></cindex>
<para>permission to write to (change) the file.  For directories, this means
permission to create and remove files in the directory.
</para></listitem><listitem>
<cindex index="cp" spaces=" "><indexterm index="cp">execute/search permission</indexterm></cindex>
<para>permission to execute the file (run it as a program).  For directories,
this means permission to access files in the directory.
</para></listitem></enumerate>

<para>There are three categories of users who may have different permissions
to perform any of the above operations on a file:
</para>
<enumerate first="1" endspaces=" ">
<listitem>
<para>the file&textrsquo;s owner;
</para></listitem><listitem>
<para>other users who are in the file&textrsquo;s group;
</para></listitem><listitem>
<para>everyone else.
</para></listitem></enumerate>

<cindex index="cp" spaces=" "><indexterm index="cp">owner, default</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">group owner, default</indexterm></cindex>
<para>Files are given an owner and group when they are created.  Usually the
owner is the current user and the group is the group of the directory
the file is in, but this varies with the operating system, the
file system the file is created on, and the way the file is created.  You
can change the owner and group of a file by using the <command>chown</command> and
<command>chgrp</command> commands.
</para>
<para>In addition to the three sets of three permissions listed above, the
file mode bits have three special components, which affect only
executable files (programs) and, on most systems, directories:
</para>
<enumerate first="1" endspaces=" ">
<listitem>
<cindex index="cp" spaces=" "><indexterm index="cp">set-user-ID</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">setuid</indexterm></cindex>
<para>Set the process&textrsquo;s effective user ID to that of the file upon execution
(called the <dfn>set-user-ID bit</dfn>, or sometimes the <dfn>setuid bit</dfn>).
For directories on a few systems, give files created in the directory
the same owner as the directory, no matter who creates them, and set
the set-user-ID bit of newly-created subdirectories.
</para></listitem><listitem>
<cindex index="cp" spaces=" "><indexterm index="cp">set-group-ID</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">setgid</indexterm></cindex>
<para>Set the process&textrsquo;s effective group ID to that of the file upon execution
(called the <dfn>set-group-ID bit</dfn>, or sometimes the <dfn>setgid bit</dfn>).
For directories on most systems, give files created in the directory
the same group as the directory, no matter what group the user who
creates them is in, and set the set-group-ID bit of newly-created
subdirectories.
</para></listitem><listitem>
<cindex index="cp" spaces=" "><indexterm index="cp">sticky</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">swap space, saving text image in</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">text image, saving in swap space</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">restricted deletion flag</indexterm></cindex>
<para>Prevent unprivileged users from removing or renaming a file in a directory
unless they own the file or the directory; this is called the
<dfn>restricted deletion flag</dfn> for the directory, and is commonly
found on world-writable directories like <file>/tmp</file>.
</para>
<para>For regular files on some older systems, save the program&textrsquo;s text image on the
swap device so it will load more quickly when run; this is called the
<dfn>sticky bit</dfn>.
</para></listitem></enumerate>

<para>In addition to the file mode bits listed above, there may be file attributes
specific to the file system, e.g., access control lists (ACLs), whether a
file is compressed, whether a file can be modified (immutability), and whether
a file can be dumped.  These are usually set using programs
specific to the file system.  For example:
<!-- c should probably say a lot more about ACLs... someday -->
</para>
<table commandarg="asis" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="asis">ext2</itemformat></item>
</tableterm><tableitem><para>On <acronym><acronymword>GNU</acronymword></acronym> and <acronym><acronymword>GNU</acronymword></acronym>/Linux the file attributes specific to
the ext2 file system are set using <command>chattr</command>.
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="asis">FFS</itemformat></item>
</tableterm><tableitem><para>On FreeBSD the file flags specific to the FFS
file system are set using <command>chflags</command>.
</para></tableitem></tableentry></table>

<para>Even if a file&textrsquo;s mode bits allow an operation on that file,
that operation may still fail, because:
</para>
<itemize commandarg="bullet" endspaces=" ">
<listitem><prepend>&bullet;</prepend>
<para>the file-system-specific attributes or flags do not permit it; or
</para>
</listitem><listitem><prepend>&bullet;</prepend>
<para>the file system is mounted as read-only.
</para></listitem></itemize>

<para>For example, if the immutable attribute is set on a file,
it cannot be modified, regardless of the fact that you
may have just run <code>chmod a+w FILE</code>.
</para>
</section>
<node name="Symbolic-Modes" spaces=" "><nodename>Symbolic Modes</nodename><nodenext automatic="on">Numeric Modes</nodenext><nodeprev automatic="on">Mode Structure</nodeprev><nodeup automatic="on">File permissions</nodeup></node>
<section spaces=" "><sectiontitle>Symbolic Modes</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">symbolic modes</indexterm></cindex>
<para><dfn>Symbolic modes</dfn> represent changes to files&textrsquo; mode bits as
operations on single-character symbols.  They allow you to modify either
all or selected parts of files&textrsquo; mode bits, optionally based on
their previous values, and perhaps on the current <code>umask</code> as well
(<pxref><xrefnodename>Umask and Protection</xrefnodename></pxref>).
</para>
<para>The format of symbolic modes is:
</para>
<example endspaces=" ">
<pre xml:space="preserve"><r>[</r>ugoa&dots;<r>][</r>+-=<r>]</r><var>perms</var>&dots;<r>[</r>,&dots;<r>]</r>
</pre></example>

<noindent></noindent>
<para>where <var>perms</var> is either zero or more letters from the set
<samp>rwxXst</samp>, or a single letter from the set <samp>ugo</samp>.
</para>
<para>The following sections describe the operators and other details of
symbolic modes.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::          ">Setting Permissions</menunode><menudescription><pre xml:space="preserve">Basic operations on permissions.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::          ">Copying Permissions</menunode><menudescription><pre xml:space="preserve">Copying existing permissions.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::   ">Changing Special Mode Bits</menunode><menudescription><pre xml:space="preserve">Special mode bits.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::    ">Conditional Executability</menunode><menudescription><pre xml:space="preserve">Conditionally affecting executability.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">Multiple Changes</menunode><menudescription><pre xml:space="preserve">Making multiple changes.
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::              ">Umask and Protection</menunode><menudescription><pre xml:space="preserve">The effect of the umask.
</pre></menudescription></menuentry></menu>

<node name="Setting-Permissions" spaces=" "><nodename>Setting Permissions</nodename><nodenext automatic="on">Copying Permissions</nodenext><nodeup automatic="on">Symbolic Modes</nodeup></node>
<subsection spaces=" "><sectiontitle>Setting Permissions</sectiontitle>

<para>The basic symbolic operations on a file&textrsquo;s permissions are adding,
removing, and setting the permission that certain users have to read,
write, and execute or search the file.  These operations have the following
format:
</para>
<example endspaces=" ">
<pre xml:space="preserve"><var>users</var> <var>operation</var> <var>permissions</var>
</pre></example>

<noindent></noindent>
<para>The spaces between the three parts above are shown for readability only;
symbolic modes cannot contain spaces.
</para>
<para>The <var>users</var> part tells which users&textrsquo; access to the file is changed.
It consists of one or more of the following letters (or it can be empty;
<pxref><xrefnodename>Umask and Protection</xrefnodename></pxref>, for a description of what happens then).  When
more than one of these letters is given, the order that they are in does
not matter.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">u</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp">owner of file, permissions for</indexterm></cindex>
<para>the user who owns the file;
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">g</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp">group, permissions for</indexterm></cindex>
<para>other users who are in the file&textrsquo;s group;
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">o</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp">other permissions</indexterm></cindex>
<para>all other users;
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">a</itemformat></item>
</tableterm><tableitem><para>all users; the same as <samp>ugo</samp>.
</para></tableitem></tableentry></table>

<para>The <var>operation</var> part tells how to change the affected users&textrsquo; access
to the file, and is one of the following symbols:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">+</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp">adding permissions</indexterm></cindex>
<para>to add the <var>permissions</var> to whatever permissions the <var>users</var>
already have for the file;
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp">removing permissions</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">subtracting permissions</indexterm></cindex>
<para>to remove the <var>permissions</var> from whatever permissions the
<var>users</var> already have for the file;
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">=</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp">setting permissions</indexterm></cindex>
<para>to make the <var>permissions</var> the only permissions that the <var>users</var>
have for the file.
</para></tableitem></tableentry></table>

<para>The <var>permissions</var> part tells what kind of access to the file should
be changed; it is normally zero or more of the following letters.  As with the
<var>users</var> part, the order does not matter when more than one letter is
given.  Omitting the <var>permissions</var> part is useful only with the
<samp>=</samp> operation, where it gives the specified <var>users</var> no access
at all to the file.
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">r</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp">read permission, symbolic</indexterm></cindex>
<para>the permission the <var>users</var> have to read the file;
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">w</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp">write permission, symbolic</indexterm></cindex>
<para>the permission the <var>users</var> have to write to the file;
</para></tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">x</itemformat></item>
</tableterm><tableitem><cindex index="cp" spaces=" "><indexterm index="cp">execute/search permission, symbolic</indexterm></cindex>
<para>the permission the <var>users</var> have to execute the file,
or search it if it is a directory.
</para></tableitem></tableentry></table>

<para>For example, to give everyone permission to read and write a regular file,
but not to execute it, use:
</para>
<example endspaces=" ">
<pre xml:space="preserve">a=rw
</pre></example>

<para>To remove write permission for all users other than the file&textrsquo;s
owner, use:
</para>
<example endspaces=" ">
<pre xml:space="preserve">go-w
</pre></example>

<noindent></noindent>
<para>The above command does not affect the access that the owner of
the file has to it, nor does it affect whether other users can
read or execute the file.
</para>
<para>To give everyone except a file&textrsquo;s owner no permission to do anything with
that file, use the mode below.  Other users could still remove the file,
if they have write permission on the directory it is in.
</para>
<example endspaces=" ">
<pre xml:space="preserve">go=
</pre></example>

<noindent></noindent>
<para>Another way to specify the same thing is:
</para>
<example endspaces=" ">
<pre xml:space="preserve">og-rwx
</pre></example>

</subsection>
<node name="Copying-Permissions" spaces=" "><nodename>Copying Permissions</nodename><nodenext automatic="on">Changing Special Mode Bits</nodenext><nodeprev automatic="on">Setting Permissions</nodeprev><nodeup automatic="on">Symbolic Modes</nodeup></node>
<subsection spaces=" "><sectiontitle>Copying Existing Permissions</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">copying existing permissions</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">permissions, copying existing</indexterm></cindex>
<para>You can base a file&textrsquo;s permissions on its existing permissions.  To do
this, instead of using a series of <samp>r</samp>, <samp>w</samp>, or <samp>x</samp>
letters after the
operator, you use the letter <samp>u</samp>, <samp>g</samp>, or <samp>o</samp>.  For
example, the mode
</para>
<example endspaces=" ">
<pre xml:space="preserve">o+g
</pre></example>

<noindent></noindent>
<para>adds the permissions for users who are in a file&textrsquo;s group to the
permissions that other users have for the file.  Thus, if the file
started out as mode 664 (<samp>rw-rw-r--</samp>), the above mode would change
it to mode 666 (<samp>rw-rw-rw-</samp>).  If the file had started out as mode
741 (<samp>rwxr----x</samp>), the above mode would change it to mode 745
(<samp>rwxr--r-x</samp>).  The <samp>-</samp> and <samp>=</samp> operations work
analogously.
</para>
</subsection>
<node name="Changing-Special-Mode-Bits" spaces=" "><nodename>Changing Special Mode Bits</nodename><nodenext automatic="on">Conditional Executability</nodenext><nodeprev automatic="on">Copying Permissions</nodeprev><nodeup automatic="on">Symbolic Modes</nodeup></node>
<subsection spaces=" "><sectiontitle>Changing Special Mode Bits</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">changing special mode bits</indexterm></cindex>
<para>In addition to changing a file&textrsquo;s read, write, and execute/search permissions,
you can change its special mode bits.  <xref><xrefnodename>Mode Structure</xrefnodename></xref>, for a
summary of these special mode bits.
</para>
<para>To change the file mode bits to set the user ID on execution, use
<samp>u</samp> in the <var>users</var> part of the symbolic mode and
<samp>s</samp> in the <var>permissions</var> part.
</para>
<para>To change the file mode bits to set the group ID on execution, use
<samp>g</samp> in the <var>users</var> part of the symbolic mode and
<samp>s</samp> in the <var>permissions</var> part.
</para>
<para>To set both user and group ID on execution, omit the <var>users</var> part
of the symbolic mode (or use <samp>a</samp>) and use <samp>s</samp> in the
<var>permissions</var> part.
</para>
<para>To change the file mode bits to set the restricted deletion flag or sticky bit,
omit the <var>users</var> part of the symbolic mode (or use <samp>a</samp>) and use
<samp>t</samp> in the <var>permissions</var> part.
</para>
<para>For example, to set the set-user-ID mode bit of a program,
you can use the mode:
</para>
<example endspaces=" ">
<pre xml:space="preserve">u+s
</pre></example>

<para>To remove both set-user-ID and set-group-ID mode bits from
it, you can use the mode:
</para>
<example endspaces=" ">
<pre xml:space="preserve">a-s
</pre></example>

<para>To set the restricted deletion flag or sticky bit, you can use
the mode:
</para>
<example endspaces=" ">
<pre xml:space="preserve">+t
</pre></example>

<para>The combination <samp>o+s</samp> has no effect.  On <acronym><acronymword>GNU</acronymword></acronym> systems
the combinations <samp>u+t</samp> and <samp>g+t</samp> have no effect, and
<samp>o+t</samp> acts like plain <samp>+t</samp>.
</para>
<para>The <samp>=</samp> operator is not very useful with special mode bits.
For example, the mode:
</para>
<example endspaces=" ">
<pre xml:space="preserve">o=t
</pre></example>

<noindent></noindent>
<para>does set the restricted deletion flag or sticky bit, but it also
removes all read, write, and execute/search permissions that users not in the
file&textrsquo;s group might have had for it.
</para>
<para><xref><xrefnodename>Directory Setuid and Setgid</xrefnodename></xref>, for additional rules concerning
set-user-ID and set-group-ID bits and directories.
</para>
</subsection>
<node name="Conditional-Executability" spaces=" "><nodename>Conditional Executability</nodename><nodenext automatic="on">Multiple Changes</nodenext><nodeprev automatic="on">Changing Special Mode Bits</nodeprev><nodeup automatic="on">Symbolic Modes</nodeup></node>
<subsection spaces=" "><sectiontitle>Conditional Executability</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">conditional executability</indexterm></cindex>
<para>There is one more special type of symbolic permission: if you use
<samp>X</samp> instead of <samp>x</samp>, execute/search permission is affected only if the
file is a directory or already had execute permission.
</para>
<para>For example, this mode:
</para>
<example endspaces=" ">
<pre xml:space="preserve">a+X
</pre></example>

<noindent></noindent>
<para>gives all users permission to search directories, or to execute files if
anyone could execute them before.
</para>
</subsection>
<node name="Multiple-Changes" spaces=" "><nodename>Multiple Changes</nodename><nodenext automatic="on">Umask and Protection</nodenext><nodeprev automatic="on">Conditional Executability</nodeprev><nodeup automatic="on">Symbolic Modes</nodeup></node>
<subsection spaces=" "><sectiontitle>Making Multiple Changes</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">multiple changes to permissions</indexterm></cindex>
<para>The format of symbolic modes is actually more complex than described
above (<pxref><xrefnodename>Setting Permissions</xrefnodename></pxref>).  It provides two ways to make
multiple changes to files&textrsquo; mode bits.
</para>
<para>The first way is to specify multiple <var>operation</var> and
<var>permissions</var> parts after a <var>users</var> part in the symbolic mode.
</para>
<para>For example, the mode:
</para>
<example endspaces=" ">
<pre xml:space="preserve">og+rX-w
</pre></example>

<noindent></noindent>
<para>gives users other than the owner of the file read permission and, if
it is a directory or if someone already had execute permission
to it, gives them execute/search permission; and it also denies them write
permission to the file.  It does not affect the permission that the
owner of the file has for it.  The above mode is equivalent to
the two modes:
</para>
<example endspaces=" ">
<pre xml:space="preserve">og+rX
og-w
</pre></example>

<para>The second way to make multiple changes is to specify more than one
simple symbolic mode, separated by commas.  For example, the mode:
</para>
<example endspaces=" ">
<pre xml:space="preserve">a+r,go-w
</pre></example>

<noindent></noindent>
<para>gives everyone permission to read the file and removes write
permission on it for all users except its owner.  Another example:
</para>
<example endspaces=" ">
<pre xml:space="preserve">u=rwx,g=rx,o=
</pre></example>

<noindent></noindent>
<para>sets all of the permission bits for the file explicitly.  (It
gives users who are not in the file&textrsquo;s group no permission at all for
it.)
</para>
<para>The two methods can be combined.  The mode:
</para>
<example endspaces=" ">
<pre xml:space="preserve">a+r,g+x-w
</pre></example>

<noindent></noindent>
<para>gives all users permission to read the file, and gives users who are in
the file&textrsquo;s group permission to execute/search it as well, but not permission
to write to it.  The above mode could be written in several different
ways; another is:
</para>
<example endspaces=" ">
<pre xml:space="preserve">u+r,g+rx,o+r,g-w
</pre></example>

</subsection>
<node name="Umask-and-Protection" spaces=" "><nodename>Umask and Protection</nodename><nodeprev automatic="on">Multiple Changes</nodeprev><nodeup automatic="on">Symbolic Modes</nodeup></node>
<subsection spaces=" "><sectiontitle>The Umask and Protection</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">umask and modes</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">modes and umask</indexterm></cindex>
<para>If the <var>users</var> part of a symbolic mode is omitted, it defaults to
<samp>a</samp> (affect all users), except that any permissions that are
<emph>set</emph> in the system variable <code>umask</code> are <emph>not affected</emph>.
The value of <code>umask</code> can be set using the
<code>umask</code> command.  Its default value varies from system to system.
</para>
<cindex index="cp" spaces=" "><indexterm index="cp">giving away permissions</indexterm></cindex>
<para>Omitting the <var>users</var> part of a symbolic mode is generally not useful
with operations other than <samp>+</samp>.  It is useful with <samp>+</samp> because
it allows you to use <code>umask</code> as an easily customizable protection
against giving away more permission to files than you intended to.
</para>
<para>As an example, if <code>umask</code> has the value 2, which removes write
permission for users who are not in the file&textrsquo;s group, then the mode:
</para>
<example endspaces=" ">
<pre xml:space="preserve">+w
</pre></example>

<noindent></noindent>
<para>adds permission to write to the file to its owner and to other users who
are in the file&textrsquo;s group, but <emph>not</emph> to other users.  In contrast,
the mode:
</para>
<example endspaces=" ">
<pre xml:space="preserve">a+w
</pre></example>

<noindent></noindent>
<para>ignores <code>umask</code>, and <emph>does</emph> give write permission for
the file to all users.
</para>
</subsection>
</section>
<node name="Numeric-Modes" spaces=" "><nodename>Numeric Modes</nodename><nodenext automatic="on">Directory Setuid and Setgid</nodenext><nodeprev automatic="on">Symbolic Modes</nodeprev><nodeup automatic="on">File permissions</nodeup></node>
<section spaces=" "><sectiontitle>Numeric Modes</sectiontitle>

<cindex index="cp" spaces=" "><indexterm index="cp">numeric modes</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">file mode bits, numeric</indexterm></cindex>
<cindex index="cp" spaces=" "><indexterm index="cp">octal numbers for file modes</indexterm></cindex>
<para>As an
alternative to giving a symbolic mode, you can give an octal (base 8)
number that represents the mode.
This number is always interpreted in octal; you do not have to add a
leading <samp>0</samp>, as you do in C.  Mode <samp>0055</samp> is the same as
mode <samp>55</samp>.
</para>
<para>A numeric mode is usually shorter than the corresponding symbolic
mode, but it is limited in that normally it cannot take into account the
previous file mode bits; it can only set them absolutely.
(As discussed in the next section, the set-user-ID and set-group-ID
bits of directories are an exception to this general limitation.)
</para>
<para>The permissions granted to the user,
to other users in the file&textrsquo;s group,
and to other users not in the file&textrsquo;s group each require three
bits, which are represented as one octal digit.  The three special
mode bits also require one bit each, and they are as a group
represented as another octal digit.  Here is how the bits are arranged,
starting with the lowest valued bit:
</para>
<example endspaces=" ">
<pre xml:space="preserve">Value in  Corresponding
Mode      Mode Bit

          Other users not in the file's group:
   1      Execute/search
   2      Write
   4      Read

          Other users in the file's group:
  10      Execute/search
  20      Write
  40      Read

          The file's owner:
 100      Execute/search
 200      Write
 400      Read

          Special mode bits:
1000      Restricted deletion flag or sticky bit
2000      Set group ID on execution
4000      Set user ID on execution
</pre></example>

<para>For example, numeric mode <samp>4755</samp> corresponds to symbolic mode
<samp>u=rwxs,go=rx</samp>, and numeric mode <samp>664</samp> corresponds to symbolic mode
<samp>ug=rw,o=r</samp>.  Numeric mode <samp>0</samp> corresponds to symbolic mode
<samp>a=</samp>.
</para>
</section>
<node name="Directory-Setuid-and-Setgid" spaces=" "><nodename>Directory Setuid and Setgid</nodename><nodeprev automatic="on">Numeric Modes</nodeprev><nodeup automatic="on">File permissions</nodeup></node>
<section spaces=" "><sectiontitle>Directories and the Set-User-ID and Set-Group-ID Bits</sectiontitle>

<para>On most systems, if a directory&textrsquo;s set-group-ID bit is set, newly
created subfiles inherit the same group as the directory, and newly
created subdirectories inherit the set-group-ID bit of the parent
directory.  On a few systems, a directory&textrsquo;s set-user-ID bit has a
similar effect on the ownership of new subfiles and the set-user-ID
bits of new subdirectories.  These mechanisms let users share files
more easily, by lessening the need to use <command>chmod</command> or
<command>chown</command> to share new files.
</para>
<para>These convenience mechanisms rely on the set-user-ID and set-group-ID
bits of directories.  If commands like <command>chmod</command> and
<command>mkdir</command> routinely cleared these bits on directories, the
mechanisms would be less convenient and it would be harder to share
files.  Therefore, a command like <command>chmod</command> does not affect the
set-user-ID or set-group-ID bits of a directory unless the user
specifically mentions them in a symbolic mode, or sets them in
a numeric mode.  For example, on systems that support
set-group-ID inheritance:
</para>
<example endspaces=" ">
<pre xml:space="preserve"># These commands leave the set-user-ID and
# set-group-ID bits of the subdirectories alone,
# so that they retain their default values.
mkdir A B C
chmod 755 A
chmod 0755 B
chmod u=rwx,go=rx C
mkdir -m 755 D
mkdir -m 0755 E
mkdir -m u=rwx,go=rx F
</pre></example>

<para>If you want to try to set these bits, you must mention them
explicitly in the symbolic or numeric modes, e.g.:
</para>
<example endspaces=" ">
<pre xml:space="preserve"># These commands try to set the set-user-ID
# and set-group-ID bits of the subdirectories.
mkdir G H
chmod 6755 G
chmod u=rwx,go=rx,a+s H
mkdir -m 6755 I
mkdir -m u=rwx,go=rx,a+s J
</pre></example>

<para>If you want to try to clear these bits, you must mention them
explicitly in a symbolic mode, e.g.:
</para>
<example endspaces=" ">
<pre xml:space="preserve"># This command tries to clear the set-user-ID
# and set-group-ID bits of the directory D.
chmod a-s D
</pre></example>

<para>This behavior is a <acronym><acronymword>GNU</acronymword></acronym> extension.  Portable scripts should
not rely on requests to set or clear these bits on directories, as
<acronym><acronymword>POSIX</acronymword></acronym> allows implementations to ignore these requests.
</para>
<include spaces=" ">parse-datetime.texi</include>

<!-- c              What's GNU? -->
<!-- c              Arnold Robbins -->
</section>
</chapter>
<node name="Opening-the-software-toolbox" spaces=" "><nodename>Opening the software toolbox</nodename><nodenext automatic="on">GNU Free Documentation License</nodenext><nodeprev automatic="on">File permissions</nodeprev><nodeup automatic="on">Top</nodeup></node>
<chapter spaces=" "><sectiontitle>Opening the Software Toolbox</sectiontitle>

<para>An earlier version of this chapter appeared in
<uref><urefurl>http://www.linuxjournal.com/article.php?sid=2762</urefurl><urefdesc spaces=" ">the
<cite>What&textrsquo;s GNU?</cite> column of the June 1994 <cite>Linux Journal</cite></urefdesc></uref>.
It was written by Arnold Robbins.
</para>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::        ">Toolbox introduction</menunode><menudescription><pre xml:space="preserve">Toolbox introduction
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">I/O redirection</menunode><menudescription><pre xml:space="preserve">I/O redirection
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">The who command</menunode><menudescription><pre xml:space="preserve">The <command>who</command> command
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::             ">The cut command</menunode><menudescription><pre xml:space="preserve">The <command>cut</command> command
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">The sort command</menunode><menudescription><pre xml:space="preserve">The <command>sort</command> command
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::            ">The uniq command</menunode><menudescription><pre xml:space="preserve">The <command>uniq</command> command
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::  ">Putting the tools together</menunode><menudescription><pre xml:space="preserve">Putting the tools together
</pre></menudescription></menuentry></menu>


<node name="Toolbox-introduction" spaces=" "><nodename>Toolbox introduction</nodename><nodenext automatic="on">I/O redirection</nodenext><nodeup automatic="on">Opening the software toolbox</nodeup></node>
<unnumberedsec spaces=" "><sectiontitle>Toolbox Introduction</sectiontitle>

<para>This month&textrsquo;s column is only peripherally related to the GNU Project, in
that it describes a number of the GNU tools on your GNU/Linux system
and how they
might be used.  What it&textrsquo;s really about is the &textldquo;Software Tools&textrdquo; philosophy
of program development and usage.
</para>
<para>The software tools philosophy was an important and integral concept
in the initial design and development of Unix (of which Linux and GNU are
essentially clones).  Unfortunately, in the modern day press of
Internetworking and flashy GUIs, it seems to have fallen by the
wayside.  This is a shame, since it provides a powerful mental model
for solving many kinds of problems.
</para>
<para>Many people carry a Swiss Army knife around in their pants pockets (or
purse).  A Swiss Army knife is a handy tool to have: it has several knife
blades, a screwdriver, tweezers, toothpick, nail file, corkscrew, and perhaps
a number of other things on it.  For the everyday, small miscellaneous jobs
where you need a simple, general purpose tool, it&textrsquo;s just the thing.
</para>
<para>On the other hand, an experienced carpenter doesn&textrsquo;t build a house using
a Swiss Army knife.  Instead, he has a toolbox chock full of specialized
tools&textmdash;a saw, a hammer, a screwdriver, a plane, and so on.  And he knows
exactly when and where to use each tool; you won&textrsquo;t catch him hammering nails
with the handle of his screwdriver.
</para>
<para>The Unix developers at Bell Labs were all professional programmers and trained
computer scientists.  They had found that while a one-size-fits-all program
might appeal to a user because there&textrsquo;s only one program to use, in practice
such programs are
</para>
<enumerate first="a" spaces=" " endspaces=" "><enumeratefirst>a</enumeratefirst>
<listitem>
<para>difficult to write,
</para>
</listitem><listitem>
<para>difficult to maintain and
debug, and
</para>
</listitem><listitem>
<para>difficult to extend to meet new situations.
</para></listitem></enumerate>

<para>Instead, they felt that programs should be specialized tools.  In short, each
program &textldquo;should do one thing well.&textrdquo;  No more and no less.  Such programs are
simpler to design, write, and get right&textmdash;they only do one thing.
</para>
<para>Furthermore, they found that with the right machinery for hooking programs
together, that the whole was greater than the sum of the parts.  By combining
several special purpose programs, you could accomplish a specific task
that none of the programs was designed for, and accomplish it much more
quickly and easily than if you had to write a special purpose program.
We will see some (classic) examples of this further on in the column.
(An important additional point was that, if necessary, take a detour
and build any software tools you may need first, if you don&textrsquo;t already
have something appropriate in the toolbox.)
</para>
</unnumberedsec>
<node name="I_002fO-redirection" spaces=" "><nodename>I/O redirection</nodename><nodenext automatic="on">The who command</nodenext><nodeprev automatic="on">Toolbox introduction</nodeprev><nodeup automatic="on">Opening the software toolbox</nodeup></node>
<unnumberedsec spaces=" "><sectiontitle>I/O Redirection</sectiontitle>

<para>Hopefully, you are familiar with the basics of I/O redirection in the
shell, in particular the concepts of &textldquo;standard input,&textrdquo; &textldquo;standard output,&textrdquo;
and &textldquo;standard error&textrdquo;.  Briefly, &textldquo;standard input&textrdquo; is a data source, where
data comes from.  A program should not need to either know or care if the
data source is a disk file, a keyboard, a magnetic tape, or even a punched
card reader.  Similarly, &textldquo;standard output&textrdquo; is a data sink, where data goes
to.  The program should neither know nor care where this might be.
Programs that only read their standard input, do something to the data,
and then send it on, are called <dfn>filters</dfn>, by analogy to filters in a
water pipeline.
</para>
<para>With the Unix shell, it&textrsquo;s very easy to set up data pipelines:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">program_to_create_data | filter1 | ... | filterN &gt; final.pretty.data
</pre></smallexample>

<para>We start out by creating the raw data; each filter applies some successive
transformation to the data, until by the time it comes out of the pipeline,
it is in the desired form.
</para>
<para>This is fine and good for standard input and standard output.  Where does the
standard error come in to play?  Well, think about <command>filter1</command> in
the pipeline above.  What happens if it encounters an error in the data it
sees?  If it writes an error message to standard output, it will just
disappear down the pipeline into <command>filter2</command>&textrsquo;s input, and the
user will probably never see it.  So programs need a place where they can send
error messages so that the user will notice them.  This is standard error,
and it is usually connected to your console or window, even if you have
redirected standard output of your program away from your screen.
</para>
<para>For filter programs to work together, the format of the data has to be
agreed upon.  The most straightforward and easiest format to use is simply
lines of text.  Unix data files are generally just streams of bytes, with
lines delimited by the <acronym><acronymword>ASCII</acronymword></acronym> <sc>lf</sc> (Line Feed) character,
conventionally called a &textldquo;newline&textrdquo; in the Unix literature.  (This is
<code>'\n'</code> if you&textrsquo;re a C programmer.)  This is the format used by all
the traditional filtering programs.  (Many earlier operating systems
had elaborate facilities and special purpose programs for managing
binary data.  Unix has always shied away from such things, under the
philosophy that it&textrsquo;s easiest to simply be able to view and edit your
data with a text editor.)
</para>
<para>OK, enough introduction.  Let&textrsquo;s take a look at some of the tools, and then
we&textrsquo;ll see how to hook them together in interesting ways.   In the following
discussion, we will only present those command line options that interest
us.  As you should always do, double check your system documentation
for the full story.
</para>
</unnumberedsec>
<node name="The-who-command" spaces=" "><nodename>The who command</nodename><nodenext automatic="on">The cut command</nodenext><nodeprev automatic="on">I/O redirection</nodeprev><nodeup automatic="on">Opening the software toolbox</nodeup></node>
<unnumberedsec spaces=" "><sectiontitle>The <command>who</command> Command</sectiontitle>

<para>The first program is the <command>who</command> command.  By itself, it generates a
list of the users who are currently logged in.  Although I&textrsquo;m writing
this on a single-user system, we&textrsquo;ll pretend that several people are
logged in:
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ who
&printglyph; arnold   console Jan 22 19:57
&printglyph; miriam   ttyp0   Jan 23 14:19(:0.0)
&printglyph; bill     ttyp1   Jan 21 09:32(:0.0)
&printglyph; arnold   ttyp2   Jan 23 20:48(:0.0)
</pre></example>

<para>Here, the <samp>$</samp> is the usual shell prompt, at which I typed <samp>who</samp>.
There are three people logged in, and I am logged in twice.  On traditional
Unix systems, user names are never more than eight characters long.  This
little bit of trivia will be useful later.  The output of <command>who</command> is nice,
but the data is not all that exciting.
</para>
</unnumberedsec>
<node name="The-cut-command" spaces=" "><nodename>The cut command</nodename><nodenext automatic="on">The sort command</nodenext><nodeprev automatic="on">The who command</nodeprev><nodeup automatic="on">Opening the software toolbox</nodeup></node>
<unnumberedsec spaces=" "><sectiontitle>The <command>cut</command> Command</sectiontitle>

<para>The next program we&textrsquo;ll look at is the <command>cut</command> command.  This program
cuts out columns or fields of input data.  For example, we can tell it
to print just the login name and full name from the <file>/etc/passwd</file>
file.  The <file>/etc/passwd</file> file has seven fields, separated by
colons:
</para>
<example endspaces=" ">
<pre xml:space="preserve">arnold:xyzzy:2076:10:Arnold D. Robbins:/home/arnold:/bin/bash
</pre></example>

<para>To get the first and fifth fields, we would use <command>cut</command> like this:
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ cut -d: -f1,5 /etc/passwd
&printglyph; root:Operator
&dots;
&printglyph; arnold:Arnold D. Robbins
&printglyph; miriam:Miriam A. Robbins
&dots;
</pre></example>

<para>With the <option>-c</option> option, <command>cut</command> will cut out specific characters
(i.e., columns) in the input lines.  This is useful for input data
that has fixed width fields, and does not have a field separator.  For
example, list the Monday dates for the current month:
</para>
<!-- c Is using cal ok?  Looked at gcal, but I don't like it. -->
<example endspaces=" ">
<pre xml:space="preserve">$ cal | cut -c 3-5
&printglyph;Mo
&printglyph;
&printglyph;  6
&printglyph; 13
&printglyph; 20
&printglyph; 27
</pre></example>

</unnumberedsec>
<node name="The-sort-command" spaces=" "><nodename>The sort command</nodename><nodenext automatic="on">The uniq command</nodenext><nodeprev automatic="on">The cut command</nodeprev><nodeup automatic="on">Opening the software toolbox</nodeup></node>
<unnumberedsec spaces=" "><sectiontitle>The <command>sort</command> Command</sectiontitle>

<para>Next we&textrsquo;ll look at the <command>sort</command> command.  This is one of the most
powerful commands on a Unix-style system; one that you will often find
yourself using when setting up fancy data plumbing.
</para>
<para>The <command>sort</command>
command reads and sorts each file named on the command line.  It then
merges the sorted data and writes it to standard output.  It will read
standard input if no files are given on the command line (thus
making it into a filter).  The sort is based on the character collating
sequence or based on user-supplied ordering criteria.
</para>

</unnumberedsec>
<node name="The-uniq-command" spaces=" "><nodename>The uniq command</nodename><nodenext automatic="on">Putting the tools together</nodenext><nodeprev automatic="on">The sort command</nodeprev><nodeup automatic="on">Opening the software toolbox</nodeup></node>
<unnumberedsec spaces=" "><sectiontitle>The <command>uniq</command> Command</sectiontitle>

<para>Finally (at least for now), we&textrsquo;ll look at the <command>uniq</command> program.  When
sorting data, you will often end up with duplicate lines, lines that
are identical.  Usually, all you need is one instance of each line.
This is where <command>uniq</command> comes in.  The <command>uniq</command> program reads its
standard input.  It prints only one
copy of each repeated line.  It does have several options.  Later on,
we&textrsquo;ll use the <option>-c</option> option, which prints each unique line, preceded
by a count of the number of times that line occurred in the input.
</para>

</unnumberedsec>
<node name="Putting-the-tools-together" spaces=" "><nodename>Putting the tools together</nodename><nodeprev automatic="on">The uniq command</nodeprev><nodeup automatic="on">Opening the software toolbox</nodeup></node>
<unnumberedsec spaces=" "><sectiontitle>Putting the Tools Together</sectiontitle>

<para>Now, let&textrsquo;s suppose this is a large ISP server system with dozens of users
logged in.  The management wants the system administrator to write a
program that will
generate a sorted list of logged in users.  Furthermore, even if a user
is logged in multiple times, his or her name should only show up in the
output once.
</para>
<para>The administrator could sit down with the system documentation and write a C
program that did this.  It would take perhaps a couple of hundred lines
of code and about two hours to write it, test it, and debug it.
However, knowing the software toolbox, the administrator can instead start out
by generating just a list of logged on users:
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ who | cut -c1-8
&printglyph; arnold
&printglyph; miriam
&printglyph; bill
&printglyph; arnold
</pre></example>

<para>Next, sort the list:
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ who | cut -c1-8 | sort
&printglyph; arnold
&printglyph; arnold
&printglyph; bill
&printglyph; miriam
</pre></example>

<para>Finally, run the sorted list through <command>uniq</command>, to weed out duplicates:
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ who | cut -c1-8 | sort | uniq
&printglyph; arnold
&printglyph; bill
&printglyph; miriam
</pre></example>

<para>The <command>sort</command> command actually has a <option>-u</option> option that does what
<command>uniq</command> does.  However, <command>uniq</command> has other uses for which one
cannot substitute <samp>sort -u</samp>.
</para>
<para>The administrator puts this pipeline into a shell script, and makes it
available for
all the users on the system (<samp>#</samp> is the system administrator,
or <code>root</code>, prompt):
</para>
<example endspaces=" ">
<pre xml:space="preserve"># cat &gt; /usr/local/bin/listusers
who | cut -c1-8 | sort | uniq
^D
# chmod +x /usr/local/bin/listusers
</pre></example>

<para>There are four major points to note here.  First, with just four
programs, on one command line, the administrator was able to save about two
hours worth of work.  Furthermore, the shell pipeline is just about as
efficient as the C program would be, and it is much more efficient in
terms of programmer time.  People time is much more expensive than
computer time, and in our modern &textldquo;there&textrsquo;s never enough time to do
everything&textrdquo; society, saving two hours of programmer time is no mean
feat.
</para>
<para>Second, it is also important to emphasize that with the
<emph>combination</emph> of the tools, it is possible to do a special
purpose job never imagined by the authors of the individual programs.
</para>
<para>Third, it is also valuable to build up your pipeline in stages, as we did here.
This allows you to view the data at each stage in the pipeline, which helps
you acquire the confidence that you are indeed using these tools correctly.
</para>
<para>Finally, by bundling the pipeline in a shell script, other users can use
your command, without having to remember the fancy plumbing you set up for
them.  In terms of how you run them, shell scripts and compiled programs are
indistinguishable.
</para>
<para>After the previous warm-up exercise, we&textrsquo;ll look at two additional, more
complicated pipelines.  For them, we need to introduce two more tools.
</para>
<para>The first is the <command>tr</command> command, which stands for &textldquo;transliterate.&textrdquo;
The <command>tr</command> command works on a character-by-character basis, changing
characters.  Normally it is used for things like mapping upper case to
lower case:
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ echo ThIs ExAmPlE HaS MIXED case! | tr '[:upper:]' '[:lower:]'
&printglyph; this example has mixed case!
</pre></example>

<para>There are several options of interest:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-c</itemformat></item>
</tableterm><tableitem><para>work on the complement of the listed characters, i.e.,
operations apply to characters not in the given set
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-d</itemformat></item>
</tableterm><tableitem><para>delete characters in the first set from the output
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-s</itemformat></item>
</tableterm><tableitem><para>squeeze repeated characters in the output into just one character.
</para></tableitem></tableentry></table>

<para>We will be using all three options in a moment.
</para>
<para>The other command we&textrsquo;ll look at is <command>comm</command>.  The <command>comm</command>
command takes two sorted input files as input data, and prints out the
files&textrsquo; lines in three columns.  The output columns are the data lines
unique to the first file, the data lines unique to the second file, and
the data lines that are common to both.  The <option>-1</option>, <option>-2</option>, and
<option>-3</option> command line options <emph>omit</emph> the respective columns.  (This is
non-intuitive and takes a little getting used to.)  For example:
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ cat f1
&printglyph; 11111
&printglyph; 22222
&printglyph; 33333
&printglyph; 44444
$ cat f2
&printglyph; 00000
&printglyph; 22222
&printglyph; 33333
&printglyph; 55555
$ comm f1 f2
&printglyph;         00000
&printglyph; 11111
&printglyph;                 22222
&printglyph;                 33333
&printglyph; 44444
&printglyph;         55555
</pre></example>

<para>The file name <file>-</file> tells <command>comm</command> to read standard input
instead of a regular file.
</para>
<para>Now we&textrsquo;re ready to build a fancy pipeline.  The first application is a word
frequency counter.  This helps an author determine if he or she is over-using
certain words.
</para>
<para>The first step is to change the case of all the letters in our input file
to one case.  &textldquo;The&textrdquo; and &textldquo;the&textrdquo; are the same word when doing counting.
</para>
<example endspaces=" ">
<pre xml:space="preserve">$ tr '[:upper:]' '[:lower:]' &lt; whats.gnu | ...
</pre></example>

<para>The next step is to get rid of punctuation.  Quoted words and unquoted words
should be treated identically; it&textrsquo;s easiest to just get the punctuation out of
the way.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">$ tr '[:upper:]' '[:lower:]' &lt; whats.gnu | tr -cd '[:alnum:]_ \n' | ...
</pre></smallexample>

<para>The second <command>tr</command> command operates on the complement of the listed
characters, which are all the letters, the digits, the underscore, and
the blank.  The <samp>\n</samp> represents the newline character; it has to
be left alone.  (The <acronym><acronymword>ASCII</acronymword></acronym> tab character should also be included for
good measure in a production script.)
</para>
<para>At this point, we have data consisting of words separated by blank space.
The words only contain alphanumeric characters (and the underscore).  The
next step is break the data apart so that we have one word per line.  This
makes the counting operation much easier, as we will see shortly.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">$ tr '[:upper:]' '[:lower:]' &lt; whats.gnu | tr -cd '[:alnum:]_ \n' |
&gt; tr -s ' ' '\n' | ...
</pre></smallexample>

<para>This command turns blanks into newlines.  The <option>-s</option> option squeezes
multiple newline characters in the output into just one.  This helps us
avoid blank lines.  (The <samp>&gt;</samp> is the shell&textrsquo;s &textldquo;secondary prompt.&textrdquo;
This is what the shell prints when it notices you haven&textrsquo;t finished
typing in all of a command.)
</para>
<para>We now have data consisting of one word per line, no punctuation, all one
case.  We&textrsquo;re ready to count each word:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">$ tr '[:upper:]' '[:lower:]' &lt; whats.gnu | tr -cd '[:alnum:]_ \n' |
&gt; tr -s ' ' '\n' | sort | uniq -c | ...
</pre></smallexample>

<para>At this point, the data might look something like this:
</para>
<example endspaces=" ">
<pre xml:space="preserve">     60 a
      2 able
      6 about
      1 above
      2 accomplish
      1 acquire
      1 actually
      2 additional
</pre></example>

<para>The output is sorted by word, not by count!  What we want is the most
frequently used words first.  Fortunately, this is easy to accomplish,
with the help of two more <command>sort</command> options:
</para>
<table commandarg="code" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="code">-n</itemformat></item>
</tableterm><tableitem><para>do a numeric sort, not a textual one
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="code">-r</itemformat></item>
</tableterm><tableitem><para>reverse the order of the sort
</para></tableitem></tableentry></table>

<para>The final pipeline looks like this:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">$ tr '[:upper:]' '[:lower:]' &lt; whats.gnu | tr -cd '[:alnum:]_ \n' |
&gt; tr -s ' ' '\n' | sort | uniq -c | sort -n -r
&printglyph;    156 the
&printglyph;     60 a
&printglyph;     58 to
&printglyph;     51 of
&printglyph;     51 and
&dots;
</pre></smallexample>

<para>Whew!  That&textrsquo;s a lot to digest.  Yet, the same principles apply.  With six
commands, on two lines (really one long one split for convenience), we&textrsquo;ve
created a program that does something interesting and useful, in much
less time than we could have written a C program to do the same thing.
</para>
<para>A minor modification to the above pipeline can give us a simple spelling
checker!  To determine if you&textrsquo;ve spelled a word correctly, all you have to
do is look it up in a dictionary.  If it is not there, then chances are
that your spelling is incorrect.  So, we need a dictionary.
The conventional location for a dictionary is <file>/usr/dict/words</file>.
On my GNU/Linux system,<footnote><para>Redhat Linux 6.1, for the November 2000
revision of this article.</para></footnote>
this is a sorted, 45,402 word dictionary.
</para>
<para>Now, how to compare our file with the dictionary?  As before, we generate
a sorted list of words, one per line:
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">$ tr '[:upper:]' '[:lower:]' &lt; whats.gnu | tr -cd '[:alnum:]_ \n' |
&gt; tr -s ' ' '\n' | sort -u | ...
</pre></smallexample>

<para>Now, all we need is a list of words that are <emph>not</emph> in the
dictionary.  Here is where the <command>comm</command> command comes in.
</para>
<smallexample endspaces=" ">
<pre xml:space="preserve">$ tr '[:upper:]' '[:lower:]' &lt; whats.gnu | tr -cd '[:alnum:]_ \n' |
&gt; tr -s ' ' '\n' | sort -u |
&gt; comm -23 - /usr/dict/words
</pre></smallexample>

<para>The <option>-2</option> and <option>-3</option> options eliminate lines that are only in the
dictionary (the second file), and lines that are in both files.  Lines
only in the first file (standard input, our stream of words), are
words that are not in the dictionary.  These are likely candidates for
spelling errors.  This pipeline was the first cut at a production
spelling checker on Unix.
</para>
<para>There are some other tools that deserve brief mention.
</para>
<table commandarg="command" spaces=" " endspaces=" ">
<tableentry><tableterm><item spaces=" "><itemformat command="command">grep</itemformat></item>
</tableterm><tableitem><para>search files for text that matches a regular expression
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="command">wc</itemformat></item>
</tableterm><tableitem><para>count lines, words, characters
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="command">tee</itemformat></item>
</tableterm><tableitem><para>a T-fitting for data pipes, copies data to files and to standard output
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="command">sed</itemformat></item>
</tableterm><tableitem><para>the stream editor, an advanced tool
</para>
</tableitem></tableentry><tableentry><tableterm><item spaces=" "><itemformat command="command">awk</itemformat></item>
</tableterm><tableitem><para>a data manipulation language, another advanced tool
</para></tableitem></tableentry></table>

<para>The software tools philosophy also espoused the following bit of
advice: &textldquo;Let someone else do the hard part.&textrdquo;  This means, take
something that gives you most of what you need, and then massage it the
rest of the way until it&textrsquo;s in the form that you want.
</para>
<para>To summarize:
</para>
<enumerate first="1" spaces=" " endspaces=" "><enumeratefirst>1</enumeratefirst>
<listitem>
<para>Each program should do one thing well.  No more, no less.
</para>
</listitem><listitem>
<para>Combining programs with appropriate plumbing leads to results where
the whole is greater than the sum of the parts.  It also leads to novel
uses of programs that the authors might never have imagined.
</para>
</listitem><listitem>
<para>Programs should never print extraneous header or trailer data, since these
could get sent on down a pipeline.  (A point we didn&textrsquo;t mention earlier.)
</para>
</listitem><listitem>
<para>Let someone else do the hard part.
</para>
</listitem><listitem>
<para>Know your toolbox!  Use each program appropriately.  If you don&textrsquo;t have an
appropriate tool, build one.
</para></listitem></enumerate>

<para>As of this writing, all the programs we&textrsquo;ve discussed are available via
anonymous <command>ftp</command> from: &linebreak;
<uref><urefurl>ftp://gnudist.gnu.org/textutils/textutils-1.22.tar.gz</urefurl></uref>.  (There may
be more recent versions available now.)
</para>
<para>None of what I have presented in this column is new.  The Software Tools
philosophy was first introduced in the book <cite>Software Tools</cite>, by
Brian Kernighan and P.J. Plauger (Addison-Wesley, ISBN 0-201-03669-X).
This book showed how to write and use software tools.  It was written in
1976, using a preprocessor for FORTRAN named <command>ratfor</command> (RATional
FORtran).  At the time, C was not as ubiquitous as it is now; FORTRAN
was.  The last chapter presented a <command>ratfor</command> to FORTRAN
processor, written in <command>ratfor</command>.  <command>ratfor</command> looks an awful
lot like C; if you know C, you won&textrsquo;t have any problem following the
code.
</para>
<para>In 1981, the book was updated and made available as <cite>Software Tools
in Pascal</cite> (Addison-Wesley, ISBN 0-201-10342-7).  Both books are
still in print and are well worth
reading if you&textrsquo;re a programmer.  They certainly made a major change in
how I view programming.
</para>
<para>The programs in both books are available from
<uref><urefurl>http://cm.bell-labs.com/who/bwk</urefurl><urefdesc spaces=" ">Brian Kernighan&textrsquo;s home page</urefdesc></uref>.
For a number of years, there was an active
Software Tools Users Group, whose members had ported the original
<command>ratfor</command> programs to essentially every computer system with a
FORTRAN compiler.  The popularity of the group waned in the middle 1980s
as Unix began to spread beyond universities.
</para>
<para>With the current proliferation of GNU code and other clones of Unix programs,
these programs now receive little attention; modern C versions are
much more efficient and do more than these programs do.  Nevertheless, as
exposition of good programming style, and evangelism for a still-valuable
philosophy, these books are unparalleled, and I recommend them highly.
</para>
<para>Acknowledgment: I would like to express my gratitude to Brian Kernighan
of Bell Labs, the original Software Toolsmith, for reviewing this column.
</para>
</unnumberedsec>
</chapter>
<node name="GNU-Free-Documentation-License" spaces=" "><nodename>GNU Free Documentation License</nodename><nodenext automatic="on">Concept index</nodenext><nodeprev automatic="on">Opening the software toolbox</nodeprev><nodeup automatic="on">Top</nodeup></node>
<appendix spaces=" "><sectiontitle>GNU Free Documentation License</sectiontitle>

<include spaces=" ">fdl.texi</include>

</appendix>
<node name="Concept-index" spaces=" "><nodename>Concept index</nodename><nodeprev automatic="on">GNU Free Documentation License</nodeprev><nodeup automatic="on">Top</nodeup></node>
<unnumbered spaces=" "><sectiontitle>Index</sectiontitle>

<printindex value="cp" line=" cp"></printindex>

</unnumbered>
<bye></bye>
</texinfo>
