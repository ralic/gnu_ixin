#!/bin/sh
exec ${GUILE-guile} -e '(a1-nf3-guile2)' -s $0 "$@" # -*-scheme-*-
!#
;;; a1-nf3-guile2

;; Copyright (C) 2012 Thien-Thi Nguyen
;;
;; This file is part of IXIN.
;;
;; IXIN is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; IXIN is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with IXIN.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; This is supposed to do what a1-nf3-mixp does, using Guile 2
;; facilities.

;;; Code:

(setlocale LC_ALL "")

(define-module (a1-nf3-guile2)
  #:export (main)
  #:use-module ((sxml simple) #:select (xml->sxml))
  #:use-module ((ice-9 rdelim) #:select (read-string))
  #:use-module (ice-9 regex)
  #:use-module (ice-9 pretty-print))

;; Map a system id to a pair of public id and DTD.  We need this
;; because the XML parser only provides us with the system id.
(define system-id-map
  (list
   `("http://www.gnu.org/software/texinfo/dtd/5.0/texinfo.dtd" .
     ,(with-input-from-file "zomg" read))))

;; This pattern matches all entity definitions, including (unused)
;; parameter entities.
(define entity-pattern
  (make-regexp
   "<!ENTITY (% )?([^ ]+) +((SYSTEM|PUBLIC) ([^ ]+) +)?\"([^\"]+)\"( NDATA [^ >]+)? *>"))

(define (match-to-entity m)
  "Convert a regexp match record to an entity pair."
  (let ((parameter-entity? (match:substring m 1))
        (name              (string->symbol (match:substring m 2)))
        (ext-id-group      (match:substring m 3))
        (ext-id-type       (match:substring m 4))
        (ext-id            (match:substring m 5))
        (resource          (match:substring m 6)))
    (if parameter-entity?
        #f ; not supported
        (cons name resource))))

(define (parse-entities filename)
  "Open FILENAME, extract all entity pattern matches, and return entity alist."
  (let ((str (with-input-from-file filename read-string)))
    (fold-matches entity-pattern str '()
                  (lambda (match acc)
                    (let ((entity (match-to-entity match)))
                      (if entity
                          (cons entity acc)
                          acc))))))

(define (doctype-handler docname systemid internal-subset?)
  "Find DTD file to the given SYSTEMID and return parsed entities."
  (let ((public-id-pair (assoc-ref system-id-map systemid)))
    (if (not public-id-pair)
        (error "Unsupported doctype:" docname systemid)
        (let* ((dtd-file (cdr public-id-pair))
               (entities (parse-entities dtd-file)))
          (values #:entities entities #:namespaces '())))))

(define (one port)
  (let ((sxml (xml->sxml port
                         #:trim-whitespace? #t
                         #:doctype-handler doctype-handler)))
    (pretty-print sxml))
  (force-output))

(define (main args)
  (call-with-input-file (cadr args)
    one)
  (exit #t))

;;; a1-nf3-guile2 ends here
